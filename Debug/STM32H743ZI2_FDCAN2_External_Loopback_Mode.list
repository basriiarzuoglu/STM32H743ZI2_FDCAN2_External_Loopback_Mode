
STM32H743ZI2_FDCAN2_External_Loopback_Mode.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008bf4  08000298  08000298  00010298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c0  08008e8c  08008e8c  00018e8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08008f4c  08008f4c  00018f4c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08008f50  08008f50  00018f50  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000190  24000000  08008f54  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00001c40  24000190  080090e4  00020190  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  24001dd0  080090e4  00021dd0  2**0
                  ALLOC
  8 .ARM.attributes 0000002e  00000000  00000000  00020190  2**0
                  CONTENTS, READONLY
  9 .debug_info   0001731e  00000000  00000000  000201be  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 00003315  00000000  00000000  000374dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 00001178  00000000  00000000  0003a7f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_ranges 00001010  00000000  00000000  0003b970  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  00038bfa  00000000  00000000  0003c980  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   000156ca  00000000  00000000  0007557a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    0015af9d  00000000  00000000  0008ac44  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      00000050  00000000  00000000  001e5be1  2**0
                  CONTENTS, READONLY
 17 .debug_frame  000048a4  00000000  00000000  001e5c34  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	24000190 	.word	0x24000190
 80002b4:	00000000 	.word	0x00000000
 80002b8:	08008e74 	.word	0x08008e74

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	24000194 	.word	0x24000194
 80002d4:	08008e74 	.word	0x08008e74

080002d8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80002d8:	b580      	push	{r7, lr}
 80002da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	sFilterConfig.IdType = FDCAN_STANDARD_ID;
 80002dc:	4b6a      	ldr	r3, [pc, #424]	; (8000488 <main+0x1b0>)
 80002de:	2200      	movs	r2, #0
 80002e0:	601a      	str	r2, [r3, #0]
	  sFilterConfig.FilterIndex = 0;
 80002e2:	4b69      	ldr	r3, [pc, #420]	; (8000488 <main+0x1b0>)
 80002e4:	2200      	movs	r2, #0
 80002e6:	605a      	str	r2, [r3, #4]
	  sFilterConfig.FilterType = FDCAN_FILTER_DUAL;
 80002e8:	4b67      	ldr	r3, [pc, #412]	; (8000488 <main+0x1b0>)
 80002ea:	2201      	movs	r2, #1
 80002ec:	609a      	str	r2, [r3, #8]
	  sFilterConfig.FilterConfig = FDCAN_FILTER_TO_RXBUFFER;
 80002ee:	4b66      	ldr	r3, [pc, #408]	; (8000488 <main+0x1b0>)
 80002f0:	2207      	movs	r2, #7
 80002f2:	60da      	str	r2, [r3, #12]
	  sFilterConfig.FilterID1 = 0x111;
 80002f4:	4b64      	ldr	r3, [pc, #400]	; (8000488 <main+0x1b0>)
 80002f6:	f240 1211 	movw	r2, #273	; 0x111
 80002fa:	611a      	str	r2, [r3, #16]
	  sFilterConfig.FilterID2 = 0x0; // This parameter is ignored if FilterConfig is set to FDCAN_FILTER_TO_RXBUFFER.
 80002fc:	4b62      	ldr	r3, [pc, #392]	; (8000488 <main+0x1b0>)
 80002fe:	2200      	movs	r2, #0
 8000300:	615a      	str	r2, [r3, #20]
	  sFilterConfig.RxBufferIndex = 0;
 8000302:	4b61      	ldr	r3, [pc, #388]	; (8000488 <main+0x1b0>)
 8000304:	2200      	movs	r2, #0
 8000306:	619a      	str	r2, [r3, #24]
	  HAL_FDCAN_ConfigFilter(&hfdcan2, &sFilterConfig);
 8000308:	495f      	ldr	r1, [pc, #380]	; (8000488 <main+0x1b0>)
 800030a:	4860      	ldr	r0, [pc, #384]	; (800048c <main+0x1b4>)
 800030c:	f000 ff80 	bl	8001210 <HAL_FDCAN_ConfigFilter>

	    /* Configure Tx buffer message */
	  TxHeader.Identifier = 0x111;
 8000310:	4b5f      	ldr	r3, [pc, #380]	; (8000490 <main+0x1b8>)
 8000312:	f240 1211 	movw	r2, #273	; 0x111
 8000316:	601a      	str	r2, [r3, #0]
	  TxHeader.IdType = FDCAN_STANDARD_ID;
 8000318:	4b5d      	ldr	r3, [pc, #372]	; (8000490 <main+0x1b8>)
 800031a:	2200      	movs	r2, #0
 800031c:	605a      	str	r2, [r3, #4]
	  TxHeader.TxFrameType = FDCAN_DATA_FRAME;
 800031e:	4b5c      	ldr	r3, [pc, #368]	; (8000490 <main+0x1b8>)
 8000320:	2200      	movs	r2, #0
 8000322:	609a      	str	r2, [r3, #8]
	  TxHeader.DataLength = FDCAN_DLC_BYTES_12;
 8000324:	4b5a      	ldr	r3, [pc, #360]	; (8000490 <main+0x1b8>)
 8000326:	f44f 2210 	mov.w	r2, #589824	; 0x90000
 800032a:	60da      	str	r2, [r3, #12]
	  TxHeader.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 800032c:	4b58      	ldr	r3, [pc, #352]	; (8000490 <main+0x1b8>)
 800032e:	2200      	movs	r2, #0
 8000330:	611a      	str	r2, [r3, #16]
	  TxHeader.BitRateSwitch = FDCAN_BRS_ON;
 8000332:	4b57      	ldr	r3, [pc, #348]	; (8000490 <main+0x1b8>)
 8000334:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8000338:	615a      	str	r2, [r3, #20]
	  TxHeader.FDFormat = FDCAN_FD_CAN;
 800033a:	4b55      	ldr	r3, [pc, #340]	; (8000490 <main+0x1b8>)
 800033c:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8000340:	619a      	str	r2, [r3, #24]
	  TxHeader.TxEventFifoControl = FDCAN_NO_TX_EVENTS;
 8000342:	4b53      	ldr	r3, [pc, #332]	; (8000490 <main+0x1b8>)
 8000344:	2200      	movs	r2, #0
 8000346:	61da      	str	r2, [r3, #28]
	  TxHeader.MessageMarker = 0x00; // Ignore because FDCAN_NO_TX_EVENTS
 8000348:	4b51      	ldr	r3, [pc, #324]	; (8000490 <main+0x1b8>)
 800034a:	2200      	movs	r2, #0
 800034c:	621a      	str	r2, [r3, #32]
	  HAL_FDCAN_AddMessageToTxBuffer(&hfdcan2, &TxHeader, TxData, FDCAN_TX_BUFFER0);
 800034e:	2301      	movs	r3, #1
 8000350:	4a50      	ldr	r2, [pc, #320]	; (8000494 <main+0x1bc>)
 8000352:	494f      	ldr	r1, [pc, #316]	; (8000490 <main+0x1b8>)
 8000354:	484d      	ldr	r0, [pc, #308]	; (800048c <main+0x1b4>)
 8000356:	f000 fffc 	bl	8001352 <HAL_FDCAN_AddMessageToTxBuffer>

	  /* Start the FDCAN module */
	  HAL_FDCAN_Start(&hfdcan2);
 800035a:	484c      	ldr	r0, [pc, #304]	; (800048c <main+0x1b4>)
 800035c:	f000 ffce 	bl	80012fc <HAL_FDCAN_Start>

	  /* Send Tx buffer message */
	  HAL_FDCAN_EnableTxBufferRequest(&hfdcan2, FDCAN_TX_BUFFER0);
 8000360:	2101      	movs	r1, #1
 8000362:	484a      	ldr	r0, [pc, #296]	; (800048c <main+0x1b4>)
 8000364:	f001 f865 	bl	8001432 <HAL_FDCAN_EnableTxBufferRequest>

	  /* Polling for transmission complete */
	  while(HAL_FDCAN_IsTxBufferMessagePending(&hfdcan2, FDCAN_TX_BUFFER0));
 8000368:	bf00      	nop
 800036a:	2101      	movs	r1, #1
 800036c:	4847      	ldr	r0, [pc, #284]	; (800048c <main+0x1b4>)
 800036e:	f001 f9ef 	bl	8001750 <HAL_FDCAN_IsTxBufferMessagePending>
 8000372:	4603      	mov	r3, r0
 8000374:	2b00      	cmp	r3, #0
 8000376:	d1f8      	bne.n	800036a <main+0x92>

	    /* Retrieve message from Rx buffer 0 */
	  HAL_FDCAN_GetRxMessage(&hfdcan2, FDCAN_RX_BUFFER0, &RxHeader, RxData);
 8000378:	4b47      	ldr	r3, [pc, #284]	; (8000498 <main+0x1c0>)
 800037a:	4a48      	ldr	r2, [pc, #288]	; (800049c <main+0x1c4>)
 800037c:	2100      	movs	r1, #0
 800037e:	4843      	ldr	r0, [pc, #268]	; (800048c <main+0x1b4>)
 8000380:	f001 f878 	bl	8001474 <HAL_FDCAN_GetRxMessage>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000384:	f000 fb8e 	bl	8000aa4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000388:	f000 f88e 	bl	80004a8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800038c:	f000 f96e 	bl	800066c <MX_GPIO_Init>
  MX_FDCAN2_Init();
 8000390:	f000 f906 	bl	80005a0 <MX_FDCAN2_Init>
  MX_USB_DEVICE_Init();
 8000394:	f007 ffe6 	bl	8008364 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */

  /* Configure standard ID reception filter to Rx buffer 0 */
  sFilterConfig.IdType = FDCAN_STANDARD_ID;
 8000398:	4b3b      	ldr	r3, [pc, #236]	; (8000488 <main+0x1b0>)
 800039a:	2200      	movs	r2, #0
 800039c:	601a      	str	r2, [r3, #0]
  sFilterConfig.FilterIndex = 0;
 800039e:	4b3a      	ldr	r3, [pc, #232]	; (8000488 <main+0x1b0>)
 80003a0:	2200      	movs	r2, #0
 80003a2:	605a      	str	r2, [r3, #4]
  sFilterConfig.FilterType = FDCAN_FILTER_DUAL;
 80003a4:	4b38      	ldr	r3, [pc, #224]	; (8000488 <main+0x1b0>)
 80003a6:	2201      	movs	r2, #1
 80003a8:	609a      	str	r2, [r3, #8]
  sFilterConfig.FilterConfig = FDCAN_FILTER_TO_RXBUFFER;
 80003aa:	4b37      	ldr	r3, [pc, #220]	; (8000488 <main+0x1b0>)
 80003ac:	2207      	movs	r2, #7
 80003ae:	60da      	str	r2, [r3, #12]
  sFilterConfig.FilterID1 = 0x111;
 80003b0:	4b35      	ldr	r3, [pc, #212]	; (8000488 <main+0x1b0>)
 80003b2:	f240 1211 	movw	r2, #273	; 0x111
 80003b6:	611a      	str	r2, [r3, #16]
  sFilterConfig.FilterID2 = 0x0; // This parameter is ignored if FilterConfig is set to FDCAN_FILTER_TO_RXBUFFER.
 80003b8:	4b33      	ldr	r3, [pc, #204]	; (8000488 <main+0x1b0>)
 80003ba:	2200      	movs	r2, #0
 80003bc:	615a      	str	r2, [r3, #20]
  sFilterConfig.RxBufferIndex = 0;
 80003be:	4b32      	ldr	r3, [pc, #200]	; (8000488 <main+0x1b0>)
 80003c0:	2200      	movs	r2, #0
 80003c2:	619a      	str	r2, [r3, #24]
  HAL_FDCAN_ConfigFilter(&hfdcan2, &sFilterConfig);
 80003c4:	4930      	ldr	r1, [pc, #192]	; (8000488 <main+0x1b0>)
 80003c6:	4831      	ldr	r0, [pc, #196]	; (800048c <main+0x1b4>)
 80003c8:	f000 ff22 	bl	8001210 <HAL_FDCAN_ConfigFilter>

    /* Configure Tx buffer message */
  TxHeader.Identifier = 0x111;
 80003cc:	4b30      	ldr	r3, [pc, #192]	; (8000490 <main+0x1b8>)
 80003ce:	f240 1211 	movw	r2, #273	; 0x111
 80003d2:	601a      	str	r2, [r3, #0]
  TxHeader.IdType = FDCAN_STANDARD_ID;
 80003d4:	4b2e      	ldr	r3, [pc, #184]	; (8000490 <main+0x1b8>)
 80003d6:	2200      	movs	r2, #0
 80003d8:	605a      	str	r2, [r3, #4]
  TxHeader.TxFrameType = FDCAN_DATA_FRAME;
 80003da:	4b2d      	ldr	r3, [pc, #180]	; (8000490 <main+0x1b8>)
 80003dc:	2200      	movs	r2, #0
 80003de:	609a      	str	r2, [r3, #8]
  TxHeader.DataLength = FDCAN_DLC_BYTES_12;
 80003e0:	4b2b      	ldr	r3, [pc, #172]	; (8000490 <main+0x1b8>)
 80003e2:	f44f 2210 	mov.w	r2, #589824	; 0x90000
 80003e6:	60da      	str	r2, [r3, #12]
  TxHeader.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 80003e8:	4b29      	ldr	r3, [pc, #164]	; (8000490 <main+0x1b8>)
 80003ea:	2200      	movs	r2, #0
 80003ec:	611a      	str	r2, [r3, #16]
  TxHeader.BitRateSwitch = FDCAN_BRS_ON;
 80003ee:	4b28      	ldr	r3, [pc, #160]	; (8000490 <main+0x1b8>)
 80003f0:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80003f4:	615a      	str	r2, [r3, #20]
  TxHeader.FDFormat = FDCAN_FD_CAN;
 80003f6:	4b26      	ldr	r3, [pc, #152]	; (8000490 <main+0x1b8>)
 80003f8:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80003fc:	619a      	str	r2, [r3, #24]
  TxHeader.TxEventFifoControl = FDCAN_NO_TX_EVENTS;
 80003fe:	4b24      	ldr	r3, [pc, #144]	; (8000490 <main+0x1b8>)
 8000400:	2200      	movs	r2, #0
 8000402:	61da      	str	r2, [r3, #28]
  TxHeader.MessageMarker = 0x00; // Ignore because FDCAN_NO_TX_EVENTS
 8000404:	4b22      	ldr	r3, [pc, #136]	; (8000490 <main+0x1b8>)
 8000406:	2200      	movs	r2, #0
 8000408:	621a      	str	r2, [r3, #32]
  HAL_FDCAN_AddMessageToTxBuffer(&hfdcan2, &TxHeader, TxData, FDCAN_TX_BUFFER0);
 800040a:	2301      	movs	r3, #1
 800040c:	4a21      	ldr	r2, [pc, #132]	; (8000494 <main+0x1bc>)
 800040e:	4920      	ldr	r1, [pc, #128]	; (8000490 <main+0x1b8>)
 8000410:	481e      	ldr	r0, [pc, #120]	; (800048c <main+0x1b4>)
 8000412:	f000 ff9e 	bl	8001352 <HAL_FDCAN_AddMessageToTxBuffer>

  /* Start the FDCAN module */
  HAL_FDCAN_Start(&hfdcan2);
 8000416:	481d      	ldr	r0, [pc, #116]	; (800048c <main+0x1b4>)
 8000418:	f000 ff70 	bl	80012fc <HAL_FDCAN_Start>

  /* Send Tx buffer message */
  HAL_FDCAN_EnableTxBufferRequest(&hfdcan2, FDCAN_TX_BUFFER0);
 800041c:	2101      	movs	r1, #1
 800041e:	481b      	ldr	r0, [pc, #108]	; (800048c <main+0x1b4>)
 8000420:	f001 f807 	bl	8001432 <HAL_FDCAN_EnableTxBufferRequest>

  /* Polling for transmission complete */
  while(HAL_FDCAN_IsTxBufferMessagePending(&hfdcan2, FDCAN_TX_BUFFER0));
 8000424:	bf00      	nop
 8000426:	2101      	movs	r1, #1
 8000428:	4818      	ldr	r0, [pc, #96]	; (800048c <main+0x1b4>)
 800042a:	f001 f991 	bl	8001750 <HAL_FDCAN_IsTxBufferMessagePending>
 800042e:	4603      	mov	r3, r0
 8000430:	2b00      	cmp	r3, #0
 8000432:	d1f8      	bne.n	8000426 <main+0x14e>

    /* Retrieve message from Rx buffer 0 */
  HAL_FDCAN_GetRxMessage(&hfdcan2, FDCAN_RX_BUFFER0, &RxHeader, RxData);
 8000434:	4b18      	ldr	r3, [pc, #96]	; (8000498 <main+0x1c0>)
 8000436:	4a19      	ldr	r2, [pc, #100]	; (800049c <main+0x1c4>)
 8000438:	2100      	movs	r1, #0
 800043a:	4814      	ldr	r0, [pc, #80]	; (800048c <main+0x1b4>)
 800043c:	f001 f81a 	bl	8001474 <HAL_FDCAN_GetRxMessage>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if(schedule.task1Hz)
 8000440:	4b17      	ldr	r3, [pc, #92]	; (80004a0 <main+0x1c8>)
 8000442:	791b      	ldrb	r3, [r3, #4]
 8000444:	2b00      	cmp	r3, #0
 8000446:	d0fb      	beq.n	8000440 <main+0x168>
	  {
		  CDC_Transmit_FS((uint8_t*)"some data",sizeof("some data"));
 8000448:	210a      	movs	r1, #10
 800044a:	4816      	ldr	r0, [pc, #88]	; (80004a4 <main+0x1cc>)
 800044c:	f008 f84a 	bl	80084e4 <CDC_Transmit_FS>

		  HAL_FDCAN_AddMessageToTxBuffer(&hfdcan2, &TxHeader, TxData, FDCAN_TX_BUFFER0);
 8000450:	2301      	movs	r3, #1
 8000452:	4a10      	ldr	r2, [pc, #64]	; (8000494 <main+0x1bc>)
 8000454:	490e      	ldr	r1, [pc, #56]	; (8000490 <main+0x1b8>)
 8000456:	480d      	ldr	r0, [pc, #52]	; (800048c <main+0x1b4>)
 8000458:	f000 ff7b 	bl	8001352 <HAL_FDCAN_AddMessageToTxBuffer>

		  /* Send Tx buffer message */
		  HAL_FDCAN_EnableTxBufferRequest(&hfdcan2, FDCAN_TX_BUFFER0);
 800045c:	2101      	movs	r1, #1
 800045e:	480b      	ldr	r0, [pc, #44]	; (800048c <main+0x1b4>)
 8000460:	f000 ffe7 	bl	8001432 <HAL_FDCAN_EnableTxBufferRequest>

		  /* Polling for transmission complete */
		  while(HAL_FDCAN_IsTxBufferMessagePending(&hfdcan2, FDCAN_TX_BUFFER0));
 8000464:	bf00      	nop
 8000466:	2101      	movs	r1, #1
 8000468:	4808      	ldr	r0, [pc, #32]	; (800048c <main+0x1b4>)
 800046a:	f001 f971 	bl	8001750 <HAL_FDCAN_IsTxBufferMessagePending>
 800046e:	4603      	mov	r3, r0
 8000470:	2b00      	cmp	r3, #0
 8000472:	d1f8      	bne.n	8000466 <main+0x18e>

		    /* Retrieve message from Rx buffer 0 */
		  HAL_FDCAN_GetRxMessage(&hfdcan2, FDCAN_RX_BUFFER0, &RxHeader, RxData);
 8000474:	4b08      	ldr	r3, [pc, #32]	; (8000498 <main+0x1c0>)
 8000476:	4a09      	ldr	r2, [pc, #36]	; (800049c <main+0x1c4>)
 8000478:	2100      	movs	r1, #0
 800047a:	4804      	ldr	r0, [pc, #16]	; (800048c <main+0x1b4>)
 800047c:	f000 fffa 	bl	8001474 <HAL_FDCAN_GetRxMessage>

		  schedule.task1Hz = 0;
 8000480:	4b07      	ldr	r3, [pc, #28]	; (80004a0 <main+0x1c8>)
 8000482:	2200      	movs	r2, #0
 8000484:	711a      	strb	r2, [r3, #4]
	  if(schedule.task1Hz)
 8000486:	e7db      	b.n	8000440 <main+0x168>
 8000488:	240001ac 	.word	0x240001ac
 800048c:	24000230 	.word	0x24000230
 8000490:	240001cc 	.word	0x240001cc
 8000494:	24000000 	.word	0x24000000
 8000498:	24000218 	.word	0x24000218
 800049c:	240001f0 	.word	0x240001f0
 80004a0:	24000224 	.word	0x24000224
 80004a4:	08008e8c 	.word	0x08008e8c

080004a8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80004a8:	b580      	push	{r7, lr}
 80004aa:	b09c      	sub	sp, #112	; 0x70
 80004ac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004ae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80004b2:	224c      	movs	r2, #76	; 0x4c
 80004b4:	2100      	movs	r1, #0
 80004b6:	4618      	mov	r0, r3
 80004b8:	f008 fcd4 	bl	8008e64 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80004bc:	1d3b      	adds	r3, r7, #4
 80004be:	2220      	movs	r2, #32
 80004c0:	2100      	movs	r1, #0
 80004c2:	4618      	mov	r0, r3
 80004c4:	f008 fcce 	bl	8008e64 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80004c8:	2002      	movs	r0, #2
 80004ca:	f002 fee7 	bl	800329c <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80004ce:	2300      	movs	r3, #0
 80004d0:	603b      	str	r3, [r7, #0]
 80004d2:	4b31      	ldr	r3, [pc, #196]	; (8000598 <SystemClock_Config+0xf0>)
 80004d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80004d6:	4a30      	ldr	r2, [pc, #192]	; (8000598 <SystemClock_Config+0xf0>)
 80004d8:	f023 0301 	bic.w	r3, r3, #1
 80004dc:	62d3      	str	r3, [r2, #44]	; 0x2c
 80004de:	4b2e      	ldr	r3, [pc, #184]	; (8000598 <SystemClock_Config+0xf0>)
 80004e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80004e2:	f003 0301 	and.w	r3, r3, #1
 80004e6:	603b      	str	r3, [r7, #0]
 80004e8:	4b2c      	ldr	r3, [pc, #176]	; (800059c <SystemClock_Config+0xf4>)
 80004ea:	699b      	ldr	r3, [r3, #24]
 80004ec:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80004f0:	4a2a      	ldr	r2, [pc, #168]	; (800059c <SystemClock_Config+0xf4>)
 80004f2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80004f6:	6193      	str	r3, [r2, #24]
 80004f8:	4b28      	ldr	r3, [pc, #160]	; (800059c <SystemClock_Config+0xf4>)
 80004fa:	699b      	ldr	r3, [r3, #24]
 80004fc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000500:	603b      	str	r3, [r7, #0]
 8000502:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000504:	bf00      	nop
 8000506:	4b25      	ldr	r3, [pc, #148]	; (800059c <SystemClock_Config+0xf4>)
 8000508:	699b      	ldr	r3, [r3, #24]
 800050a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800050e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000512:	d1f8      	bne.n	8000506 <SystemClock_Config+0x5e>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000514:	2301      	movs	r3, #1
 8000516:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000518:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800051c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800051e:	2302      	movs	r3, #2
 8000520:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000522:	2302      	movs	r3, #2
 8000524:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000526:	2301      	movs	r3, #1
 8000528:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 24;
 800052a:	2318      	movs	r3, #24
 800052c:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 800052e:	2302      	movs	r3, #2
 8000530:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000532:	2304      	movs	r3, #4
 8000534:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000536:	2302      	movs	r3, #2
 8000538:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 800053a:	230c      	movs	r3, #12
 800053c:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800053e:	2300      	movs	r3, #0
 8000540:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000542:	2300      	movs	r3, #0
 8000544:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000546:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800054a:	4618      	mov	r0, r3
 800054c:	f002 fef0 	bl	8003330 <HAL_RCC_OscConfig>
 8000550:	4603      	mov	r3, r0
 8000552:	2b00      	cmp	r3, #0
 8000554:	d001      	beq.n	800055a <SystemClock_Config+0xb2>
  {
    Error_Handler();
 8000556:	f000 f933 	bl	80007c0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800055a:	233f      	movs	r3, #63	; 0x3f
 800055c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800055e:	2303      	movs	r3, #3
 8000560:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000562:	2300      	movs	r3, #0
 8000564:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000566:	2308      	movs	r3, #8
 8000568:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 800056a:	2300      	movs	r3, #0
 800056c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 800056e:	2300      	movs	r3, #0
 8000570:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 8000572:	2300      	movs	r3, #0
 8000574:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8000576:	2300      	movs	r3, #0
 8000578:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800057a:	1d3b      	adds	r3, r7, #4
 800057c:	2101      	movs	r1, #1
 800057e:	4618      	mov	r0, r3
 8000580:	f003 fae4 	bl	8003b4c <HAL_RCC_ClockConfig>
 8000584:	4603      	mov	r3, r0
 8000586:	2b00      	cmp	r3, #0
 8000588:	d001      	beq.n	800058e <SystemClock_Config+0xe6>
  {
    Error_Handler();
 800058a:	f000 f919 	bl	80007c0 <Error_Handler>
  }
}
 800058e:	bf00      	nop
 8000590:	3770      	adds	r7, #112	; 0x70
 8000592:	46bd      	mov	sp, r7
 8000594:	bd80      	pop	{r7, pc}
 8000596:	bf00      	nop
 8000598:	58000400 	.word	0x58000400
 800059c:	58024800 	.word	0x58024800

080005a0 <MX_FDCAN2_Init>:
  * @brief FDCAN2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN2_Init(void)
{
 80005a0:	b580      	push	{r7, lr}
 80005a2:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN2_Init 0 */

  /* USER CODE BEGIN FDCAN2_Init 1 */

  /* USER CODE END FDCAN2_Init 1 */
  hfdcan2.Instance = FDCAN2;
 80005a4:	4b2f      	ldr	r3, [pc, #188]	; (8000664 <MX_FDCAN2_Init+0xc4>)
 80005a6:	4a30      	ldr	r2, [pc, #192]	; (8000668 <MX_FDCAN2_Init+0xc8>)
 80005a8:	601a      	str	r2, [r3, #0]
  hfdcan2.Init.FrameFormat = FDCAN_FRAME_FD_BRS;
 80005aa:	4b2e      	ldr	r3, [pc, #184]	; (8000664 <MX_FDCAN2_Init+0xc4>)
 80005ac:	f44f 7240 	mov.w	r2, #768	; 0x300
 80005b0:	609a      	str	r2, [r3, #8]
  hfdcan2.Init.Mode = FDCAN_MODE_EXTERNAL_LOOPBACK;
 80005b2:	4b2c      	ldr	r3, [pc, #176]	; (8000664 <MX_FDCAN2_Init+0xc4>)
 80005b4:	2204      	movs	r2, #4
 80005b6:	60da      	str	r2, [r3, #12]
  hfdcan2.Init.AutoRetransmission = ENABLE;
 80005b8:	4b2a      	ldr	r3, [pc, #168]	; (8000664 <MX_FDCAN2_Init+0xc4>)
 80005ba:	2201      	movs	r2, #1
 80005bc:	741a      	strb	r2, [r3, #16]
  hfdcan2.Init.TransmitPause = DISABLE;
 80005be:	4b29      	ldr	r3, [pc, #164]	; (8000664 <MX_FDCAN2_Init+0xc4>)
 80005c0:	2200      	movs	r2, #0
 80005c2:	745a      	strb	r2, [r3, #17]
  hfdcan2.Init.ProtocolException = DISABLE;
 80005c4:	4b27      	ldr	r3, [pc, #156]	; (8000664 <MX_FDCAN2_Init+0xc4>)
 80005c6:	2200      	movs	r2, #0
 80005c8:	749a      	strb	r2, [r3, #18]
  hfdcan2.Init.NominalPrescaler = 1;
 80005ca:	4b26      	ldr	r3, [pc, #152]	; (8000664 <MX_FDCAN2_Init+0xc4>)
 80005cc:	2201      	movs	r2, #1
 80005ce:	615a      	str	r2, [r3, #20]
  hfdcan2.Init.NominalSyncJumpWidth = 13;
 80005d0:	4b24      	ldr	r3, [pc, #144]	; (8000664 <MX_FDCAN2_Init+0xc4>)
 80005d2:	220d      	movs	r2, #13
 80005d4:	619a      	str	r2, [r3, #24]
  hfdcan2.Init.NominalTimeSeg1 = 86;
 80005d6:	4b23      	ldr	r3, [pc, #140]	; (8000664 <MX_FDCAN2_Init+0xc4>)
 80005d8:	2256      	movs	r2, #86	; 0x56
 80005da:	61da      	str	r2, [r3, #28]
  hfdcan2.Init.NominalTimeSeg2 = 13;
 80005dc:	4b21      	ldr	r3, [pc, #132]	; (8000664 <MX_FDCAN2_Init+0xc4>)
 80005de:	220d      	movs	r2, #13
 80005e0:	621a      	str	r2, [r3, #32]
  hfdcan2.Init.DataPrescaler = 2;
 80005e2:	4b20      	ldr	r3, [pc, #128]	; (8000664 <MX_FDCAN2_Init+0xc4>)
 80005e4:	2202      	movs	r2, #2
 80005e6:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan2.Init.DataSyncJumpWidth = 12;
 80005e8:	4b1e      	ldr	r3, [pc, #120]	; (8000664 <MX_FDCAN2_Init+0xc4>)
 80005ea:	220c      	movs	r2, #12
 80005ec:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan2.Init.DataTimeSeg1 = 12;
 80005ee:	4b1d      	ldr	r3, [pc, #116]	; (8000664 <MX_FDCAN2_Init+0xc4>)
 80005f0:	220c      	movs	r2, #12
 80005f2:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan2.Init.DataTimeSeg2 = 12;
 80005f4:	4b1b      	ldr	r3, [pc, #108]	; (8000664 <MX_FDCAN2_Init+0xc4>)
 80005f6:	220c      	movs	r2, #12
 80005f8:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan2.Init.MessageRAMOffset = 0;
 80005fa:	4b1a      	ldr	r3, [pc, #104]	; (8000664 <MX_FDCAN2_Init+0xc4>)
 80005fc:	2200      	movs	r2, #0
 80005fe:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan2.Init.StdFiltersNbr = 1;
 8000600:	4b18      	ldr	r3, [pc, #96]	; (8000664 <MX_FDCAN2_Init+0xc4>)
 8000602:	2201      	movs	r2, #1
 8000604:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan2.Init.ExtFiltersNbr = 0;
 8000606:	4b17      	ldr	r3, [pc, #92]	; (8000664 <MX_FDCAN2_Init+0xc4>)
 8000608:	2200      	movs	r2, #0
 800060a:	63da      	str	r2, [r3, #60]	; 0x3c
  hfdcan2.Init.RxFifo0ElmtsNbr = 0;
 800060c:	4b15      	ldr	r3, [pc, #84]	; (8000664 <MX_FDCAN2_Init+0xc4>)
 800060e:	2200      	movs	r2, #0
 8000610:	641a      	str	r2, [r3, #64]	; 0x40
  hfdcan2.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 8000612:	4b14      	ldr	r3, [pc, #80]	; (8000664 <MX_FDCAN2_Init+0xc4>)
 8000614:	2204      	movs	r2, #4
 8000616:	645a      	str	r2, [r3, #68]	; 0x44
  hfdcan2.Init.RxFifo1ElmtsNbr = 0;
 8000618:	4b12      	ldr	r3, [pc, #72]	; (8000664 <MX_FDCAN2_Init+0xc4>)
 800061a:	2200      	movs	r2, #0
 800061c:	649a      	str	r2, [r3, #72]	; 0x48
  hfdcan2.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 800061e:	4b11      	ldr	r3, [pc, #68]	; (8000664 <MX_FDCAN2_Init+0xc4>)
 8000620:	2204      	movs	r2, #4
 8000622:	64da      	str	r2, [r3, #76]	; 0x4c
  hfdcan2.Init.RxBuffersNbr = 1;
 8000624:	4b0f      	ldr	r3, [pc, #60]	; (8000664 <MX_FDCAN2_Init+0xc4>)
 8000626:	2201      	movs	r2, #1
 8000628:	651a      	str	r2, [r3, #80]	; 0x50
  hfdcan2.Init.RxBufferSize = FDCAN_DATA_BYTES_12;
 800062a:	4b0e      	ldr	r3, [pc, #56]	; (8000664 <MX_FDCAN2_Init+0xc4>)
 800062c:	2205      	movs	r2, #5
 800062e:	655a      	str	r2, [r3, #84]	; 0x54
  hfdcan2.Init.TxEventsNbr = 0;
 8000630:	4b0c      	ldr	r3, [pc, #48]	; (8000664 <MX_FDCAN2_Init+0xc4>)
 8000632:	2200      	movs	r2, #0
 8000634:	659a      	str	r2, [r3, #88]	; 0x58
  hfdcan2.Init.TxBuffersNbr = 1;
 8000636:	4b0b      	ldr	r3, [pc, #44]	; (8000664 <MX_FDCAN2_Init+0xc4>)
 8000638:	2201      	movs	r2, #1
 800063a:	65da      	str	r2, [r3, #92]	; 0x5c
  hfdcan2.Init.TxFifoQueueElmtsNbr = 0;
 800063c:	4b09      	ldr	r3, [pc, #36]	; (8000664 <MX_FDCAN2_Init+0xc4>)
 800063e:	2200      	movs	r2, #0
 8000640:	661a      	str	r2, [r3, #96]	; 0x60
  hfdcan2.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8000642:	4b08      	ldr	r3, [pc, #32]	; (8000664 <MX_FDCAN2_Init+0xc4>)
 8000644:	2200      	movs	r2, #0
 8000646:	665a      	str	r2, [r3, #100]	; 0x64
  hfdcan2.Init.TxElmtSize = FDCAN_DATA_BYTES_12;
 8000648:	4b06      	ldr	r3, [pc, #24]	; (8000664 <MX_FDCAN2_Init+0xc4>)
 800064a:	2205      	movs	r2, #5
 800064c:	669a      	str	r2, [r3, #104]	; 0x68
  if (HAL_FDCAN_Init(&hfdcan2) != HAL_OK)
 800064e:	4805      	ldr	r0, [pc, #20]	; (8000664 <MX_FDCAN2_Init+0xc4>)
 8000650:	f000 fc00 	bl	8000e54 <HAL_FDCAN_Init>
 8000654:	4603      	mov	r3, r0
 8000656:	2b00      	cmp	r3, #0
 8000658:	d001      	beq.n	800065e <MX_FDCAN2_Init+0xbe>
  {
    Error_Handler();
 800065a:	f000 f8b1 	bl	80007c0 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN2_Init 2 */

  /* USER CODE END FDCAN2_Init 2 */

}
 800065e:	bf00      	nop
 8000660:	bd80      	pop	{r7, pc}
 8000662:	bf00      	nop
 8000664:	24000230 	.word	0x24000230
 8000668:	4000a400 	.word	0x4000a400

0800066c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800066c:	b480      	push	{r7}
 800066e:	b085      	sub	sp, #20
 8000670:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000672:	4b19      	ldr	r3, [pc, #100]	; (80006d8 <MX_GPIO_Init+0x6c>)
 8000674:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000678:	4a17      	ldr	r2, [pc, #92]	; (80006d8 <MX_GPIO_Init+0x6c>)
 800067a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800067e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000682:	4b15      	ldr	r3, [pc, #84]	; (80006d8 <MX_GPIO_Init+0x6c>)
 8000684:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000688:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800068c:	60fb      	str	r3, [r7, #12]
 800068e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000690:	4b11      	ldr	r3, [pc, #68]	; (80006d8 <MX_GPIO_Init+0x6c>)
 8000692:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000696:	4a10      	ldr	r2, [pc, #64]	; (80006d8 <MX_GPIO_Init+0x6c>)
 8000698:	f043 0301 	orr.w	r3, r3, #1
 800069c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80006a0:	4b0d      	ldr	r3, [pc, #52]	; (80006d8 <MX_GPIO_Init+0x6c>)
 80006a2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80006a6:	f003 0301 	and.w	r3, r3, #1
 80006aa:	60bb      	str	r3, [r7, #8]
 80006ac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006ae:	4b0a      	ldr	r3, [pc, #40]	; (80006d8 <MX_GPIO_Init+0x6c>)
 80006b0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80006b4:	4a08      	ldr	r2, [pc, #32]	; (80006d8 <MX_GPIO_Init+0x6c>)
 80006b6:	f043 0302 	orr.w	r3, r3, #2
 80006ba:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80006be:	4b06      	ldr	r3, [pc, #24]	; (80006d8 <MX_GPIO_Init+0x6c>)
 80006c0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80006c4:	f003 0302 	and.w	r3, r3, #2
 80006c8:	607b      	str	r3, [r7, #4]
 80006ca:	687b      	ldr	r3, [r7, #4]

}
 80006cc:	bf00      	nop
 80006ce:	3714      	adds	r7, #20
 80006d0:	46bd      	mov	sp, r7
 80006d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d6:	4770      	bx	lr
 80006d8:	58024400 	.word	0x58024400

080006dc <HAL_SYSTICK_Callback>:

/* USER CODE BEGIN 4 */
void HAL_SYSTICK_Callback(void)
{
 80006dc:	b480      	push	{r7}
 80006de:	af00      	add	r7, sp, #0
	schedule.systemTime++;
 80006e0:	4b33      	ldr	r3, [pc, #204]	; (80007b0 <HAL_SYSTICK_Callback+0xd4>)
 80006e2:	689b      	ldr	r3, [r3, #8]
 80006e4:	3301      	adds	r3, #1
 80006e6:	4a32      	ldr	r2, [pc, #200]	; (80007b0 <HAL_SYSTICK_Callback+0xd4>)
 80006e8:	6093      	str	r3, [r2, #8]

	if(schedule.systemTime % 20 == 0)
 80006ea:	4b31      	ldr	r3, [pc, #196]	; (80007b0 <HAL_SYSTICK_Callback+0xd4>)
 80006ec:	6899      	ldr	r1, [r3, #8]
 80006ee:	4b31      	ldr	r3, [pc, #196]	; (80007b4 <HAL_SYSTICK_Callback+0xd8>)
 80006f0:	fba3 2301 	umull	r2, r3, r3, r1
 80006f4:	091a      	lsrs	r2, r3, #4
 80006f6:	4613      	mov	r3, r2
 80006f8:	009b      	lsls	r3, r3, #2
 80006fa:	4413      	add	r3, r2
 80006fc:	009b      	lsls	r3, r3, #2
 80006fe:	1aca      	subs	r2, r1, r3
 8000700:	2a00      	cmp	r2, #0
 8000702:	d102      	bne.n	800070a <HAL_SYSTICK_Callback+0x2e>
		schedule.task50Hz = 1;
 8000704:	4b2a      	ldr	r3, [pc, #168]	; (80007b0 <HAL_SYSTICK_Callback+0xd4>)
 8000706:	2201      	movs	r2, #1
 8000708:	701a      	strb	r2, [r3, #0]

	if(schedule.systemTime % 50 == 0)
 800070a:	4b29      	ldr	r3, [pc, #164]	; (80007b0 <HAL_SYSTICK_Callback+0xd4>)
 800070c:	689a      	ldr	r2, [r3, #8]
 800070e:	4b2a      	ldr	r3, [pc, #168]	; (80007b8 <HAL_SYSTICK_Callback+0xdc>)
 8000710:	fba3 1302 	umull	r1, r3, r3, r2
 8000714:	091b      	lsrs	r3, r3, #4
 8000716:	2132      	movs	r1, #50	; 0x32
 8000718:	fb01 f303 	mul.w	r3, r1, r3
 800071c:	1ad3      	subs	r3, r2, r3
 800071e:	2b00      	cmp	r3, #0
 8000720:	d102      	bne.n	8000728 <HAL_SYSTICK_Callback+0x4c>
		schedule.task20Hz = 1;
 8000722:	4b23      	ldr	r3, [pc, #140]	; (80007b0 <HAL_SYSTICK_Callback+0xd4>)
 8000724:	2201      	movs	r2, #1
 8000726:	705a      	strb	r2, [r3, #1]

	if(schedule.systemTime % 100 == 0)
 8000728:	4b21      	ldr	r3, [pc, #132]	; (80007b0 <HAL_SYSTICK_Callback+0xd4>)
 800072a:	689a      	ldr	r2, [r3, #8]
 800072c:	4b22      	ldr	r3, [pc, #136]	; (80007b8 <HAL_SYSTICK_Callback+0xdc>)
 800072e:	fba3 1302 	umull	r1, r3, r3, r2
 8000732:	095b      	lsrs	r3, r3, #5
 8000734:	2164      	movs	r1, #100	; 0x64
 8000736:	fb01 f303 	mul.w	r3, r1, r3
 800073a:	1ad3      	subs	r3, r2, r3
 800073c:	2b00      	cmp	r3, #0
 800073e:	d102      	bne.n	8000746 <HAL_SYSTICK_Callback+0x6a>
		schedule.task10Hz = 1;
 8000740:	4b1b      	ldr	r3, [pc, #108]	; (80007b0 <HAL_SYSTICK_Callback+0xd4>)
 8000742:	2201      	movs	r2, #1
 8000744:	709a      	strb	r2, [r3, #2]

	if(schedule.systemTime % 200 == 0)
 8000746:	4b1a      	ldr	r3, [pc, #104]	; (80007b0 <HAL_SYSTICK_Callback+0xd4>)
 8000748:	689a      	ldr	r2, [r3, #8]
 800074a:	4b1b      	ldr	r3, [pc, #108]	; (80007b8 <HAL_SYSTICK_Callback+0xdc>)
 800074c:	fba3 1302 	umull	r1, r3, r3, r2
 8000750:	099b      	lsrs	r3, r3, #6
 8000752:	21c8      	movs	r1, #200	; 0xc8
 8000754:	fb01 f303 	mul.w	r3, r1, r3
 8000758:	1ad3      	subs	r3, r2, r3
 800075a:	2b00      	cmp	r3, #0
 800075c:	d102      	bne.n	8000764 <HAL_SYSTICK_Callback+0x88>
		schedule.task5Hz = 1;
 800075e:	4b14      	ldr	r3, [pc, #80]	; (80007b0 <HAL_SYSTICK_Callback+0xd4>)
 8000760:	2201      	movs	r2, #1
 8000762:	70da      	strb	r2, [r3, #3]

	if(schedule.systemTime % 500 == 0)
 8000764:	4b12      	ldr	r3, [pc, #72]	; (80007b0 <HAL_SYSTICK_Callback+0xd4>)
 8000766:	689a      	ldr	r2, [r3, #8]
 8000768:	4b14      	ldr	r3, [pc, #80]	; (80007bc <HAL_SYSTICK_Callback+0xe0>)
 800076a:	fba3 1302 	umull	r1, r3, r3, r2
 800076e:	095b      	lsrs	r3, r3, #5
 8000770:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8000774:	fb01 f303 	mul.w	r3, r1, r3
 8000778:	1ad3      	subs	r3, r2, r3
 800077a:	2b00      	cmp	r3, #0
 800077c:	d102      	bne.n	8000784 <HAL_SYSTICK_Callback+0xa8>
		schedule.task2Hz = 1;
 800077e:	4b0c      	ldr	r3, [pc, #48]	; (80007b0 <HAL_SYSTICK_Callback+0xd4>)
 8000780:	2201      	movs	r2, #1
 8000782:	715a      	strb	r2, [r3, #5]

	if(schedule.systemTime % 1000 == 0)
 8000784:	4b0a      	ldr	r3, [pc, #40]	; (80007b0 <HAL_SYSTICK_Callback+0xd4>)
 8000786:	689a      	ldr	r2, [r3, #8]
 8000788:	4b0c      	ldr	r3, [pc, #48]	; (80007bc <HAL_SYSTICK_Callback+0xe0>)
 800078a:	fba3 1302 	umull	r1, r3, r3, r2
 800078e:	099b      	lsrs	r3, r3, #6
 8000790:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000794:	fb01 f303 	mul.w	r3, r1, r3
 8000798:	1ad3      	subs	r3, r2, r3
 800079a:	2b00      	cmp	r3, #0
 800079c:	d102      	bne.n	80007a4 <HAL_SYSTICK_Callback+0xc8>
		schedule.task1Hz = 1;
 800079e:	4b04      	ldr	r3, [pc, #16]	; (80007b0 <HAL_SYSTICK_Callback+0xd4>)
 80007a0:	2201      	movs	r2, #1
 80007a2:	711a      	strb	r2, [r3, #4]
}
 80007a4:	bf00      	nop
 80007a6:	46bd      	mov	sp, r7
 80007a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ac:	4770      	bx	lr
 80007ae:	bf00      	nop
 80007b0:	24000224 	.word	0x24000224
 80007b4:	cccccccd 	.word	0xcccccccd
 80007b8:	51eb851f 	.word	0x51eb851f
 80007bc:	10624dd3 	.word	0x10624dd3

080007c0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007c0:	b480      	push	{r7}
 80007c2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007c4:	b672      	cpsid	i
}
 80007c6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007c8:	e7fe      	b.n	80007c8 <Error_Handler+0x8>
	...

080007cc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007cc:	b480      	push	{r7}
 80007ce:	b083      	sub	sp, #12
 80007d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007d2:	4b0a      	ldr	r3, [pc, #40]	; (80007fc <HAL_MspInit+0x30>)
 80007d4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80007d8:	4a08      	ldr	r2, [pc, #32]	; (80007fc <HAL_MspInit+0x30>)
 80007da:	f043 0302 	orr.w	r3, r3, #2
 80007de:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80007e2:	4b06      	ldr	r3, [pc, #24]	; (80007fc <HAL_MspInit+0x30>)
 80007e4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80007e8:	f003 0302 	and.w	r3, r3, #2
 80007ec:	607b      	str	r3, [r7, #4]
 80007ee:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007f0:	bf00      	nop
 80007f2:	370c      	adds	r7, #12
 80007f4:	46bd      	mov	sp, r7
 80007f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007fa:	4770      	bx	lr
 80007fc:	58024400 	.word	0x58024400

08000800 <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 8000800:	b580      	push	{r7, lr}
 8000802:	b0b8      	sub	sp, #224	; 0xe0
 8000804:	af00      	add	r7, sp, #0
 8000806:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000808:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800080c:	2200      	movs	r2, #0
 800080e:	601a      	str	r2, [r3, #0]
 8000810:	605a      	str	r2, [r3, #4]
 8000812:	609a      	str	r2, [r3, #8]
 8000814:	60da      	str	r2, [r3, #12]
 8000816:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000818:	f107 0310 	add.w	r3, r7, #16
 800081c:	22bc      	movs	r2, #188	; 0xbc
 800081e:	2100      	movs	r1, #0
 8000820:	4618      	mov	r0, r3
 8000822:	f008 fb1f 	bl	8008e64 <memset>
  if(hfdcan->Instance==FDCAN2)
 8000826:	687b      	ldr	r3, [r7, #4]
 8000828:	681b      	ldr	r3, [r3, #0]
 800082a:	4a25      	ldr	r2, [pc, #148]	; (80008c0 <HAL_FDCAN_MspInit+0xc0>)
 800082c:	4293      	cmp	r3, r2
 800082e:	d142      	bne.n	80008b6 <HAL_FDCAN_MspInit+0xb6>
  /* USER CODE BEGIN FDCAN2_MspInit 0 */

  /* USER CODE END FDCAN2_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8000830:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000834:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL;
 8000836:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800083a:	67fb      	str	r3, [r7, #124]	; 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800083c:	f107 0310 	add.w	r3, r7, #16
 8000840:	4618      	mov	r0, r3
 8000842:	f003 fce3 	bl	800420c <HAL_RCCEx_PeriphCLKConfig>
 8000846:	4603      	mov	r3, r0
 8000848:	2b00      	cmp	r3, #0
 800084a:	d001      	beq.n	8000850 <HAL_FDCAN_MspInit+0x50>
    {
      Error_Handler();
 800084c:	f7ff ffb8 	bl	80007c0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 8000850:	4b1c      	ldr	r3, [pc, #112]	; (80008c4 <HAL_FDCAN_MspInit+0xc4>)
 8000852:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8000856:	4a1b      	ldr	r2, [pc, #108]	; (80008c4 <HAL_FDCAN_MspInit+0xc4>)
 8000858:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800085c:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 8000860:	4b18      	ldr	r3, [pc, #96]	; (80008c4 <HAL_FDCAN_MspInit+0xc4>)
 8000862:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8000866:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800086a:	60fb      	str	r3, [r7, #12]
 800086c:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800086e:	4b15      	ldr	r3, [pc, #84]	; (80008c4 <HAL_FDCAN_MspInit+0xc4>)
 8000870:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000874:	4a13      	ldr	r2, [pc, #76]	; (80008c4 <HAL_FDCAN_MspInit+0xc4>)
 8000876:	f043 0302 	orr.w	r3, r3, #2
 800087a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800087e:	4b11      	ldr	r3, [pc, #68]	; (80008c4 <HAL_FDCAN_MspInit+0xc4>)
 8000880:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000884:	f003 0302 	and.w	r3, r3, #2
 8000888:	60bb      	str	r3, [r7, #8]
 800088a:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN2 GPIO Configuration
    PB5     ------> FDCAN2_RX
    PB6     ------> FDCAN2_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 800088c:	2360      	movs	r3, #96	; 0x60
 800088e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000892:	2302      	movs	r3, #2
 8000894:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000898:	2300      	movs	r3, #0
 800089a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800089e:	2300      	movs	r3, #0
 80008a0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN2;
 80008a4:	2309      	movs	r3, #9
 80008a6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008aa:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80008ae:	4619      	mov	r1, r3
 80008b0:	4805      	ldr	r0, [pc, #20]	; (80008c8 <HAL_FDCAN_MspInit+0xc8>)
 80008b2:	f001 f967 	bl	8001b84 <HAL_GPIO_Init>
  /* USER CODE BEGIN FDCAN2_MspInit 1 */

  /* USER CODE END FDCAN2_MspInit 1 */
  }

}
 80008b6:	bf00      	nop
 80008b8:	37e0      	adds	r7, #224	; 0xe0
 80008ba:	46bd      	mov	sp, r7
 80008bc:	bd80      	pop	{r7, pc}
 80008be:	bf00      	nop
 80008c0:	4000a400 	.word	0x4000a400
 80008c4:	58024400 	.word	0x58024400
 80008c8:	58020400 	.word	0x58020400

080008cc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008cc:	b480      	push	{r7}
 80008ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80008d0:	e7fe      	b.n	80008d0 <NMI_Handler+0x4>

080008d2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008d2:	b480      	push	{r7}
 80008d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008d6:	e7fe      	b.n	80008d6 <HardFault_Handler+0x4>

080008d8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80008d8:	b480      	push	{r7}
 80008da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80008dc:	e7fe      	b.n	80008dc <MemManage_Handler+0x4>

080008de <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80008de:	b480      	push	{r7}
 80008e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80008e2:	e7fe      	b.n	80008e2 <BusFault_Handler+0x4>

080008e4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80008e4:	b480      	push	{r7}
 80008e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80008e8:	e7fe      	b.n	80008e8 <UsageFault_Handler+0x4>

080008ea <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80008ea:	b480      	push	{r7}
 80008ec:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80008ee:	bf00      	nop
 80008f0:	46bd      	mov	sp, r7
 80008f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008f6:	4770      	bx	lr

080008f8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80008f8:	b480      	push	{r7}
 80008fa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80008fc:	bf00      	nop
 80008fe:	46bd      	mov	sp, r7
 8000900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000904:	4770      	bx	lr

08000906 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000906:	b480      	push	{r7}
 8000908:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800090a:	bf00      	nop
 800090c:	46bd      	mov	sp, r7
 800090e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000912:	4770      	bx	lr

08000914 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000914:	b580      	push	{r7, lr}
 8000916:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000918:	f000 f936 	bl	8000b88 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  HAL_SYSTICK_IRQHandler();
 800091c:	f000 fa93 	bl	8000e46 <HAL_SYSTICK_IRQHandler>
  /* USER CODE END SysTick_IRQn 1 */
}
 8000920:	bf00      	nop
 8000922:	bd80      	pop	{r7, pc}

08000924 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000924:	b580      	push	{r7, lr}
 8000926:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000928:	4802      	ldr	r0, [pc, #8]	; (8000934 <OTG_FS_IRQHandler+0x10>)
 800092a:	f001 fc32 	bl	8002192 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800092e:	bf00      	nop
 8000930:	bd80      	pop	{r7, pc}
 8000932:	bf00      	nop
 8000934:	240017a8 	.word	0x240017a8

08000938 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000938:	b480      	push	{r7}
 800093a:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800093c:	4b39      	ldr	r3, [pc, #228]	; (8000a24 <SystemInit+0xec>)
 800093e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000942:	4a38      	ldr	r2, [pc, #224]	; (8000a24 <SystemInit+0xec>)
 8000944:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000948:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800094c:	4b36      	ldr	r3, [pc, #216]	; (8000a28 <SystemInit+0xf0>)
 800094e:	681b      	ldr	r3, [r3, #0]
 8000950:	f003 030f 	and.w	r3, r3, #15
 8000954:	2b06      	cmp	r3, #6
 8000956:	d807      	bhi.n	8000968 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000958:	4b33      	ldr	r3, [pc, #204]	; (8000a28 <SystemInit+0xf0>)
 800095a:	681b      	ldr	r3, [r3, #0]
 800095c:	f023 030f 	bic.w	r3, r3, #15
 8000960:	4a31      	ldr	r2, [pc, #196]	; (8000a28 <SystemInit+0xf0>)
 8000962:	f043 0307 	orr.w	r3, r3, #7
 8000966:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000968:	4b30      	ldr	r3, [pc, #192]	; (8000a2c <SystemInit+0xf4>)
 800096a:	681b      	ldr	r3, [r3, #0]
 800096c:	4a2f      	ldr	r2, [pc, #188]	; (8000a2c <SystemInit+0xf4>)
 800096e:	f043 0301 	orr.w	r3, r3, #1
 8000972:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000974:	4b2d      	ldr	r3, [pc, #180]	; (8000a2c <SystemInit+0xf4>)
 8000976:	2200      	movs	r2, #0
 8000978:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800097a:	4b2c      	ldr	r3, [pc, #176]	; (8000a2c <SystemInit+0xf4>)
 800097c:	681a      	ldr	r2, [r3, #0]
 800097e:	492b      	ldr	r1, [pc, #172]	; (8000a2c <SystemInit+0xf4>)
 8000980:	4b2b      	ldr	r3, [pc, #172]	; (8000a30 <SystemInit+0xf8>)
 8000982:	4013      	ands	r3, r2
 8000984:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000986:	4b28      	ldr	r3, [pc, #160]	; (8000a28 <SystemInit+0xf0>)
 8000988:	681b      	ldr	r3, [r3, #0]
 800098a:	f003 0308 	and.w	r3, r3, #8
 800098e:	2b00      	cmp	r3, #0
 8000990:	d007      	beq.n	80009a2 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000992:	4b25      	ldr	r3, [pc, #148]	; (8000a28 <SystemInit+0xf0>)
 8000994:	681b      	ldr	r3, [r3, #0]
 8000996:	f023 030f 	bic.w	r3, r3, #15
 800099a:	4a23      	ldr	r2, [pc, #140]	; (8000a28 <SystemInit+0xf0>)
 800099c:	f043 0307 	orr.w	r3, r3, #7
 80009a0:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80009a2:	4b22      	ldr	r3, [pc, #136]	; (8000a2c <SystemInit+0xf4>)
 80009a4:	2200      	movs	r2, #0
 80009a6:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80009a8:	4b20      	ldr	r3, [pc, #128]	; (8000a2c <SystemInit+0xf4>)
 80009aa:	2200      	movs	r2, #0
 80009ac:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80009ae:	4b1f      	ldr	r3, [pc, #124]	; (8000a2c <SystemInit+0xf4>)
 80009b0:	2200      	movs	r2, #0
 80009b2:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80009b4:	4b1d      	ldr	r3, [pc, #116]	; (8000a2c <SystemInit+0xf4>)
 80009b6:	4a1f      	ldr	r2, [pc, #124]	; (8000a34 <SystemInit+0xfc>)
 80009b8:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80009ba:	4b1c      	ldr	r3, [pc, #112]	; (8000a2c <SystemInit+0xf4>)
 80009bc:	4a1e      	ldr	r2, [pc, #120]	; (8000a38 <SystemInit+0x100>)
 80009be:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80009c0:	4b1a      	ldr	r3, [pc, #104]	; (8000a2c <SystemInit+0xf4>)
 80009c2:	4a1e      	ldr	r2, [pc, #120]	; (8000a3c <SystemInit+0x104>)
 80009c4:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80009c6:	4b19      	ldr	r3, [pc, #100]	; (8000a2c <SystemInit+0xf4>)
 80009c8:	2200      	movs	r2, #0
 80009ca:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80009cc:	4b17      	ldr	r3, [pc, #92]	; (8000a2c <SystemInit+0xf4>)
 80009ce:	4a1b      	ldr	r2, [pc, #108]	; (8000a3c <SystemInit+0x104>)
 80009d0:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80009d2:	4b16      	ldr	r3, [pc, #88]	; (8000a2c <SystemInit+0xf4>)
 80009d4:	2200      	movs	r2, #0
 80009d6:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80009d8:	4b14      	ldr	r3, [pc, #80]	; (8000a2c <SystemInit+0xf4>)
 80009da:	4a18      	ldr	r2, [pc, #96]	; (8000a3c <SystemInit+0x104>)
 80009dc:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80009de:	4b13      	ldr	r3, [pc, #76]	; (8000a2c <SystemInit+0xf4>)
 80009e0:	2200      	movs	r2, #0
 80009e2:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80009e4:	4b11      	ldr	r3, [pc, #68]	; (8000a2c <SystemInit+0xf4>)
 80009e6:	681b      	ldr	r3, [r3, #0]
 80009e8:	4a10      	ldr	r2, [pc, #64]	; (8000a2c <SystemInit+0xf4>)
 80009ea:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80009ee:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80009f0:	4b0e      	ldr	r3, [pc, #56]	; (8000a2c <SystemInit+0xf4>)
 80009f2:	2200      	movs	r2, #0
 80009f4:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80009f6:	4b12      	ldr	r3, [pc, #72]	; (8000a40 <SystemInit+0x108>)
 80009f8:	681a      	ldr	r2, [r3, #0]
 80009fa:	4b12      	ldr	r3, [pc, #72]	; (8000a44 <SystemInit+0x10c>)
 80009fc:	4013      	ands	r3, r2
 80009fe:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000a02:	d202      	bcs.n	8000a0a <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000a04:	4b10      	ldr	r3, [pc, #64]	; (8000a48 <SystemInit+0x110>)
 8000a06:	2201      	movs	r2, #1
 8000a08:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000a0a:	4b10      	ldr	r3, [pc, #64]	; (8000a4c <SystemInit+0x114>)
 8000a0c:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8000a10:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000a12:	4b04      	ldr	r3, [pc, #16]	; (8000a24 <SystemInit+0xec>)
 8000a14:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000a18:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 8000a1a:	bf00      	nop
 8000a1c:	46bd      	mov	sp, r7
 8000a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a22:	4770      	bx	lr
 8000a24:	e000ed00 	.word	0xe000ed00
 8000a28:	52002000 	.word	0x52002000
 8000a2c:	58024400 	.word	0x58024400
 8000a30:	eaf6ed7f 	.word	0xeaf6ed7f
 8000a34:	02020200 	.word	0x02020200
 8000a38:	01ff0000 	.word	0x01ff0000
 8000a3c:	01010280 	.word	0x01010280
 8000a40:	5c001000 	.word	0x5c001000
 8000a44:	ffff0000 	.word	0xffff0000
 8000a48:	51008108 	.word	0x51008108
 8000a4c:	52004000 	.word	0x52004000

08000a50 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8000a50:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000a88 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000a54:	f7ff ff70 	bl	8000938 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000a58:	480c      	ldr	r0, [pc, #48]	; (8000a8c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000a5a:	490d      	ldr	r1, [pc, #52]	; (8000a90 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000a5c:	4a0d      	ldr	r2, [pc, #52]	; (8000a94 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000a5e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a60:	e002      	b.n	8000a68 <LoopCopyDataInit>

08000a62 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a62:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a64:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a66:	3304      	adds	r3, #4

08000a68 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a68:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a6a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a6c:	d3f9      	bcc.n	8000a62 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a6e:	4a0a      	ldr	r2, [pc, #40]	; (8000a98 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000a70:	4c0a      	ldr	r4, [pc, #40]	; (8000a9c <LoopFillZerobss+0x22>)
  movs r3, #0
 8000a72:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a74:	e001      	b.n	8000a7a <LoopFillZerobss>

08000a76 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a76:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a78:	3204      	adds	r2, #4

08000a7a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a7a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a7c:	d3fb      	bcc.n	8000a76 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000a7e:	f008 f9bf 	bl	8008e00 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000a82:	f7ff fc29 	bl	80002d8 <main>
  bx  lr
 8000a86:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000a88:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8000a8c:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8000a90:	24000190 	.word	0x24000190
  ldr r2, =_sidata
 8000a94:	08008f54 	.word	0x08008f54
  ldr r2, =_sbss
 8000a98:	24000190 	.word	0x24000190
  ldr r4, =_ebss
 8000a9c:	24001dd0 	.word	0x24001dd0

08000aa0 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000aa0:	e7fe      	b.n	8000aa0 <ADC3_IRQHandler>
	...

08000aa4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	b082      	sub	sp, #8
 8000aa8:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000aaa:	2003      	movs	r0, #3
 8000aac:	f000 f98c 	bl	8000dc8 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8000ab0:	f003 fa02 	bl	8003eb8 <HAL_RCC_GetSysClockFreq>
 8000ab4:	4602      	mov	r2, r0
 8000ab6:	4b15      	ldr	r3, [pc, #84]	; (8000b0c <HAL_Init+0x68>)
 8000ab8:	699b      	ldr	r3, [r3, #24]
 8000aba:	0a1b      	lsrs	r3, r3, #8
 8000abc:	f003 030f 	and.w	r3, r3, #15
 8000ac0:	4913      	ldr	r1, [pc, #76]	; (8000b10 <HAL_Init+0x6c>)
 8000ac2:	5ccb      	ldrb	r3, [r1, r3]
 8000ac4:	f003 031f 	and.w	r3, r3, #31
 8000ac8:	fa22 f303 	lsr.w	r3, r2, r3
 8000acc:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8000ace:	4b0f      	ldr	r3, [pc, #60]	; (8000b0c <HAL_Init+0x68>)
 8000ad0:	699b      	ldr	r3, [r3, #24]
 8000ad2:	f003 030f 	and.w	r3, r3, #15
 8000ad6:	4a0e      	ldr	r2, [pc, #56]	; (8000b10 <HAL_Init+0x6c>)
 8000ad8:	5cd3      	ldrb	r3, [r2, r3]
 8000ada:	f003 031f 	and.w	r3, r3, #31
 8000ade:	687a      	ldr	r2, [r7, #4]
 8000ae0:	fa22 f303 	lsr.w	r3, r2, r3
 8000ae4:	4a0b      	ldr	r2, [pc, #44]	; (8000b14 <HAL_Init+0x70>)
 8000ae6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8000ae8:	4a0b      	ldr	r2, [pc, #44]	; (8000b18 <HAL_Init+0x74>)
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000aee:	200f      	movs	r0, #15
 8000af0:	f000 f814 	bl	8000b1c <HAL_InitTick>
 8000af4:	4603      	mov	r3, r0
 8000af6:	2b00      	cmp	r3, #0
 8000af8:	d001      	beq.n	8000afe <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8000afa:	2301      	movs	r3, #1
 8000afc:	e002      	b.n	8000b04 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8000afe:	f7ff fe65 	bl	80007cc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b02:	2300      	movs	r3, #0
}
 8000b04:	4618      	mov	r0, r3
 8000b06:	3708      	adds	r7, #8
 8000b08:	46bd      	mov	sp, r7
 8000b0a:	bd80      	pop	{r7, pc}
 8000b0c:	58024400 	.word	0x58024400
 8000b10:	08008f2c 	.word	0x08008f2c
 8000b14:	24000010 	.word	0x24000010
 8000b18:	2400000c 	.word	0x2400000c

08000b1c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	b082      	sub	sp, #8
 8000b20:	af00      	add	r7, sp, #0
 8000b22:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8000b24:	4b15      	ldr	r3, [pc, #84]	; (8000b7c <HAL_InitTick+0x60>)
 8000b26:	781b      	ldrb	r3, [r3, #0]
 8000b28:	2b00      	cmp	r3, #0
 8000b2a:	d101      	bne.n	8000b30 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8000b2c:	2301      	movs	r3, #1
 8000b2e:	e021      	b.n	8000b74 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8000b30:	4b13      	ldr	r3, [pc, #76]	; (8000b80 <HAL_InitTick+0x64>)
 8000b32:	681a      	ldr	r2, [r3, #0]
 8000b34:	4b11      	ldr	r3, [pc, #68]	; (8000b7c <HAL_InitTick+0x60>)
 8000b36:	781b      	ldrb	r3, [r3, #0]
 8000b38:	4619      	mov	r1, r3
 8000b3a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b3e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000b42:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b46:	4618      	mov	r0, r3
 8000b48:	f000 f971 	bl	8000e2e <HAL_SYSTICK_Config>
 8000b4c:	4603      	mov	r3, r0
 8000b4e:	2b00      	cmp	r3, #0
 8000b50:	d001      	beq.n	8000b56 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8000b52:	2301      	movs	r3, #1
 8000b54:	e00e      	b.n	8000b74 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	2b0f      	cmp	r3, #15
 8000b5a:	d80a      	bhi.n	8000b72 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	6879      	ldr	r1, [r7, #4]
 8000b60:	f04f 30ff 	mov.w	r0, #4294967295
 8000b64:	f000 f93b 	bl	8000dde <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000b68:	4a06      	ldr	r2, [pc, #24]	; (8000b84 <HAL_InitTick+0x68>)
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000b6e:	2300      	movs	r3, #0
 8000b70:	e000      	b.n	8000b74 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8000b72:	2301      	movs	r3, #1
}
 8000b74:	4618      	mov	r0, r3
 8000b76:	3708      	adds	r7, #8
 8000b78:	46bd      	mov	sp, r7
 8000b7a:	bd80      	pop	{r7, pc}
 8000b7c:	24000018 	.word	0x24000018
 8000b80:	2400000c 	.word	0x2400000c
 8000b84:	24000014 	.word	0x24000014

08000b88 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b88:	b480      	push	{r7}
 8000b8a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000b8c:	4b06      	ldr	r3, [pc, #24]	; (8000ba8 <HAL_IncTick+0x20>)
 8000b8e:	781b      	ldrb	r3, [r3, #0]
 8000b90:	461a      	mov	r2, r3
 8000b92:	4b06      	ldr	r3, [pc, #24]	; (8000bac <HAL_IncTick+0x24>)
 8000b94:	681b      	ldr	r3, [r3, #0]
 8000b96:	4413      	add	r3, r2
 8000b98:	4a04      	ldr	r2, [pc, #16]	; (8000bac <HAL_IncTick+0x24>)
 8000b9a:	6013      	str	r3, [r2, #0]
}
 8000b9c:	bf00      	nop
 8000b9e:	46bd      	mov	sp, r7
 8000ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop
 8000ba8:	24000018 	.word	0x24000018
 8000bac:	240002d0 	.word	0x240002d0

08000bb0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000bb0:	b480      	push	{r7}
 8000bb2:	af00      	add	r7, sp, #0
  return uwTick;
 8000bb4:	4b03      	ldr	r3, [pc, #12]	; (8000bc4 <HAL_GetTick+0x14>)
 8000bb6:	681b      	ldr	r3, [r3, #0]
}
 8000bb8:	4618      	mov	r0, r3
 8000bba:	46bd      	mov	sp, r7
 8000bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc0:	4770      	bx	lr
 8000bc2:	bf00      	nop
 8000bc4:	240002d0 	.word	0x240002d0

08000bc8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	b084      	sub	sp, #16
 8000bcc:	af00      	add	r7, sp, #0
 8000bce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000bd0:	f7ff ffee 	bl	8000bb0 <HAL_GetTick>
 8000bd4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000bda:	68fb      	ldr	r3, [r7, #12]
 8000bdc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000be0:	d005      	beq.n	8000bee <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000be2:	4b0a      	ldr	r3, [pc, #40]	; (8000c0c <HAL_Delay+0x44>)
 8000be4:	781b      	ldrb	r3, [r3, #0]
 8000be6:	461a      	mov	r2, r3
 8000be8:	68fb      	ldr	r3, [r7, #12]
 8000bea:	4413      	add	r3, r2
 8000bec:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000bee:	bf00      	nop
 8000bf0:	f7ff ffde 	bl	8000bb0 <HAL_GetTick>
 8000bf4:	4602      	mov	r2, r0
 8000bf6:	68bb      	ldr	r3, [r7, #8]
 8000bf8:	1ad3      	subs	r3, r2, r3
 8000bfa:	68fa      	ldr	r2, [r7, #12]
 8000bfc:	429a      	cmp	r2, r3
 8000bfe:	d8f7      	bhi.n	8000bf0 <HAL_Delay+0x28>
  {
  }
}
 8000c00:	bf00      	nop
 8000c02:	bf00      	nop
 8000c04:	3710      	adds	r7, #16
 8000c06:	46bd      	mov	sp, r7
 8000c08:	bd80      	pop	{r7, pc}
 8000c0a:	bf00      	nop
 8000c0c:	24000018 	.word	0x24000018

08000c10 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8000c10:	b480      	push	{r7}
 8000c12:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8000c14:	4b03      	ldr	r3, [pc, #12]	; (8000c24 <HAL_GetREVID+0x14>)
 8000c16:	681b      	ldr	r3, [r3, #0]
 8000c18:	0c1b      	lsrs	r3, r3, #16
}
 8000c1a:	4618      	mov	r0, r3
 8000c1c:	46bd      	mov	sp, r7
 8000c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c22:	4770      	bx	lr
 8000c24:	5c001000 	.word	0x5c001000

08000c28 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c28:	b480      	push	{r7}
 8000c2a:	b085      	sub	sp, #20
 8000c2c:	af00      	add	r7, sp, #0
 8000c2e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	f003 0307 	and.w	r3, r3, #7
 8000c36:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c38:	4b0b      	ldr	r3, [pc, #44]	; (8000c68 <__NVIC_SetPriorityGrouping+0x40>)
 8000c3a:	68db      	ldr	r3, [r3, #12]
 8000c3c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c3e:	68ba      	ldr	r2, [r7, #8]
 8000c40:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000c44:	4013      	ands	r3, r2
 8000c46:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000c48:	68fb      	ldr	r3, [r7, #12]
 8000c4a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c4c:	68bb      	ldr	r3, [r7, #8]
 8000c4e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000c50:	4b06      	ldr	r3, [pc, #24]	; (8000c6c <__NVIC_SetPriorityGrouping+0x44>)
 8000c52:	4313      	orrs	r3, r2
 8000c54:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c56:	4a04      	ldr	r2, [pc, #16]	; (8000c68 <__NVIC_SetPriorityGrouping+0x40>)
 8000c58:	68bb      	ldr	r3, [r7, #8]
 8000c5a:	60d3      	str	r3, [r2, #12]
}
 8000c5c:	bf00      	nop
 8000c5e:	3714      	adds	r7, #20
 8000c60:	46bd      	mov	sp, r7
 8000c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c66:	4770      	bx	lr
 8000c68:	e000ed00 	.word	0xe000ed00
 8000c6c:	05fa0000 	.word	0x05fa0000

08000c70 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c70:	b480      	push	{r7}
 8000c72:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c74:	4b04      	ldr	r3, [pc, #16]	; (8000c88 <__NVIC_GetPriorityGrouping+0x18>)
 8000c76:	68db      	ldr	r3, [r3, #12]
 8000c78:	0a1b      	lsrs	r3, r3, #8
 8000c7a:	f003 0307 	and.w	r3, r3, #7
}
 8000c7e:	4618      	mov	r0, r3
 8000c80:	46bd      	mov	sp, r7
 8000c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c86:	4770      	bx	lr
 8000c88:	e000ed00 	.word	0xe000ed00

08000c8c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c8c:	b480      	push	{r7}
 8000c8e:	b083      	sub	sp, #12
 8000c90:	af00      	add	r7, sp, #0
 8000c92:	4603      	mov	r3, r0
 8000c94:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000c96:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000c9a:	2b00      	cmp	r3, #0
 8000c9c:	db0b      	blt.n	8000cb6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c9e:	88fb      	ldrh	r3, [r7, #6]
 8000ca0:	f003 021f 	and.w	r2, r3, #31
 8000ca4:	4907      	ldr	r1, [pc, #28]	; (8000cc4 <__NVIC_EnableIRQ+0x38>)
 8000ca6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000caa:	095b      	lsrs	r3, r3, #5
 8000cac:	2001      	movs	r0, #1
 8000cae:	fa00 f202 	lsl.w	r2, r0, r2
 8000cb2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000cb6:	bf00      	nop
 8000cb8:	370c      	adds	r7, #12
 8000cba:	46bd      	mov	sp, r7
 8000cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc0:	4770      	bx	lr
 8000cc2:	bf00      	nop
 8000cc4:	e000e100 	.word	0xe000e100

08000cc8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000cc8:	b480      	push	{r7}
 8000cca:	b083      	sub	sp, #12
 8000ccc:	af00      	add	r7, sp, #0
 8000cce:	4603      	mov	r3, r0
 8000cd0:	6039      	str	r1, [r7, #0]
 8000cd2:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000cd4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000cd8:	2b00      	cmp	r3, #0
 8000cda:	db0a      	blt.n	8000cf2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cdc:	683b      	ldr	r3, [r7, #0]
 8000cde:	b2da      	uxtb	r2, r3
 8000ce0:	490c      	ldr	r1, [pc, #48]	; (8000d14 <__NVIC_SetPriority+0x4c>)
 8000ce2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000ce6:	0112      	lsls	r2, r2, #4
 8000ce8:	b2d2      	uxtb	r2, r2
 8000cea:	440b      	add	r3, r1
 8000cec:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000cf0:	e00a      	b.n	8000d08 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cf2:	683b      	ldr	r3, [r7, #0]
 8000cf4:	b2da      	uxtb	r2, r3
 8000cf6:	4908      	ldr	r1, [pc, #32]	; (8000d18 <__NVIC_SetPriority+0x50>)
 8000cf8:	88fb      	ldrh	r3, [r7, #6]
 8000cfa:	f003 030f 	and.w	r3, r3, #15
 8000cfe:	3b04      	subs	r3, #4
 8000d00:	0112      	lsls	r2, r2, #4
 8000d02:	b2d2      	uxtb	r2, r2
 8000d04:	440b      	add	r3, r1
 8000d06:	761a      	strb	r2, [r3, #24]
}
 8000d08:	bf00      	nop
 8000d0a:	370c      	adds	r7, #12
 8000d0c:	46bd      	mov	sp, r7
 8000d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d12:	4770      	bx	lr
 8000d14:	e000e100 	.word	0xe000e100
 8000d18:	e000ed00 	.word	0xe000ed00

08000d1c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d1c:	b480      	push	{r7}
 8000d1e:	b089      	sub	sp, #36	; 0x24
 8000d20:	af00      	add	r7, sp, #0
 8000d22:	60f8      	str	r0, [r7, #12]
 8000d24:	60b9      	str	r1, [r7, #8]
 8000d26:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d28:	68fb      	ldr	r3, [r7, #12]
 8000d2a:	f003 0307 	and.w	r3, r3, #7
 8000d2e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d30:	69fb      	ldr	r3, [r7, #28]
 8000d32:	f1c3 0307 	rsb	r3, r3, #7
 8000d36:	2b04      	cmp	r3, #4
 8000d38:	bf28      	it	cs
 8000d3a:	2304      	movcs	r3, #4
 8000d3c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d3e:	69fb      	ldr	r3, [r7, #28]
 8000d40:	3304      	adds	r3, #4
 8000d42:	2b06      	cmp	r3, #6
 8000d44:	d902      	bls.n	8000d4c <NVIC_EncodePriority+0x30>
 8000d46:	69fb      	ldr	r3, [r7, #28]
 8000d48:	3b03      	subs	r3, #3
 8000d4a:	e000      	b.n	8000d4e <NVIC_EncodePriority+0x32>
 8000d4c:	2300      	movs	r3, #0
 8000d4e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d50:	f04f 32ff 	mov.w	r2, #4294967295
 8000d54:	69bb      	ldr	r3, [r7, #24]
 8000d56:	fa02 f303 	lsl.w	r3, r2, r3
 8000d5a:	43da      	mvns	r2, r3
 8000d5c:	68bb      	ldr	r3, [r7, #8]
 8000d5e:	401a      	ands	r2, r3
 8000d60:	697b      	ldr	r3, [r7, #20]
 8000d62:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d64:	f04f 31ff 	mov.w	r1, #4294967295
 8000d68:	697b      	ldr	r3, [r7, #20]
 8000d6a:	fa01 f303 	lsl.w	r3, r1, r3
 8000d6e:	43d9      	mvns	r1, r3
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d74:	4313      	orrs	r3, r2
         );
}
 8000d76:	4618      	mov	r0, r3
 8000d78:	3724      	adds	r7, #36	; 0x24
 8000d7a:	46bd      	mov	sp, r7
 8000d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d80:	4770      	bx	lr
	...

08000d84 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000d84:	b580      	push	{r7, lr}
 8000d86:	b082      	sub	sp, #8
 8000d88:	af00      	add	r7, sp, #0
 8000d8a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	3b01      	subs	r3, #1
 8000d90:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000d94:	d301      	bcc.n	8000d9a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000d96:	2301      	movs	r3, #1
 8000d98:	e00f      	b.n	8000dba <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d9a:	4a0a      	ldr	r2, [pc, #40]	; (8000dc4 <SysTick_Config+0x40>)
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	3b01      	subs	r3, #1
 8000da0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000da2:	210f      	movs	r1, #15
 8000da4:	f04f 30ff 	mov.w	r0, #4294967295
 8000da8:	f7ff ff8e 	bl	8000cc8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000dac:	4b05      	ldr	r3, [pc, #20]	; (8000dc4 <SysTick_Config+0x40>)
 8000dae:	2200      	movs	r2, #0
 8000db0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000db2:	4b04      	ldr	r3, [pc, #16]	; (8000dc4 <SysTick_Config+0x40>)
 8000db4:	2207      	movs	r2, #7
 8000db6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000db8:	2300      	movs	r3, #0
}
 8000dba:	4618      	mov	r0, r3
 8000dbc:	3708      	adds	r7, #8
 8000dbe:	46bd      	mov	sp, r7
 8000dc0:	bd80      	pop	{r7, pc}
 8000dc2:	bf00      	nop
 8000dc4:	e000e010 	.word	0xe000e010

08000dc8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	b082      	sub	sp, #8
 8000dcc:	af00      	add	r7, sp, #0
 8000dce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000dd0:	6878      	ldr	r0, [r7, #4]
 8000dd2:	f7ff ff29 	bl	8000c28 <__NVIC_SetPriorityGrouping>
}
 8000dd6:	bf00      	nop
 8000dd8:	3708      	adds	r7, #8
 8000dda:	46bd      	mov	sp, r7
 8000ddc:	bd80      	pop	{r7, pc}

08000dde <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000dde:	b580      	push	{r7, lr}
 8000de0:	b086      	sub	sp, #24
 8000de2:	af00      	add	r7, sp, #0
 8000de4:	4603      	mov	r3, r0
 8000de6:	60b9      	str	r1, [r7, #8]
 8000de8:	607a      	str	r2, [r7, #4]
 8000dea:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000dec:	f7ff ff40 	bl	8000c70 <__NVIC_GetPriorityGrouping>
 8000df0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000df2:	687a      	ldr	r2, [r7, #4]
 8000df4:	68b9      	ldr	r1, [r7, #8]
 8000df6:	6978      	ldr	r0, [r7, #20]
 8000df8:	f7ff ff90 	bl	8000d1c <NVIC_EncodePriority>
 8000dfc:	4602      	mov	r2, r0
 8000dfe:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000e02:	4611      	mov	r1, r2
 8000e04:	4618      	mov	r0, r3
 8000e06:	f7ff ff5f 	bl	8000cc8 <__NVIC_SetPriority>
}
 8000e0a:	bf00      	nop
 8000e0c:	3718      	adds	r7, #24
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	bd80      	pop	{r7, pc}

08000e12 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e12:	b580      	push	{r7, lr}
 8000e14:	b082      	sub	sp, #8
 8000e16:	af00      	add	r7, sp, #0
 8000e18:	4603      	mov	r3, r0
 8000e1a:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000e1c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000e20:	4618      	mov	r0, r3
 8000e22:	f7ff ff33 	bl	8000c8c <__NVIC_EnableIRQ>
}
 8000e26:	bf00      	nop
 8000e28:	3708      	adds	r7, #8
 8000e2a:	46bd      	mov	sp, r7
 8000e2c:	bd80      	pop	{r7, pc}

08000e2e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e2e:	b580      	push	{r7, lr}
 8000e30:	b082      	sub	sp, #8
 8000e32:	af00      	add	r7, sp, #0
 8000e34:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000e36:	6878      	ldr	r0, [r7, #4]
 8000e38:	f7ff ffa4 	bl	8000d84 <SysTick_Config>
 8000e3c:	4603      	mov	r3, r0
}
 8000e3e:	4618      	mov	r0, r3
 8000e40:	3708      	adds	r7, #8
 8000e42:	46bd      	mov	sp, r7
 8000e44:	bd80      	pop	{r7, pc}

08000e46 <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 8000e46:	b580      	push	{r7, lr}
 8000e48:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 8000e4a:	f7ff fc47 	bl	80006dc <HAL_SYSTICK_Callback>
}
 8000e4e:	bf00      	nop
 8000e50:	bd80      	pop	{r7, pc}
	...

08000e54 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8000e54:	b580      	push	{r7, lr}
 8000e56:	b098      	sub	sp, #96	; 0x60
 8000e58:	af00      	add	r7, sp, #0
 8000e5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  const uint32_t CvtEltSize[] = {0, 0, 0, 0, 0, 1, 2, 3, 4, 0, 5, 0, 0, 0, 6, 0, 0, 0, 7};
 8000e5c:	4a84      	ldr	r2, [pc, #528]	; (8001070 <HAL_FDCAN_Init+0x21c>)
 8000e5e:	f107 030c 	add.w	r3, r7, #12
 8000e62:	4611      	mov	r1, r2
 8000e64:	224c      	movs	r2, #76	; 0x4c
 8000e66:	4618      	mov	r0, r3
 8000e68:	f007 ffee 	bl	8008e48 <memcpy>

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	d101      	bne.n	8000e76 <HAL_FDCAN_Init+0x22>
  {
    return HAL_ERROR;
 8000e72:	2301      	movs	r3, #1
 8000e74:	e1c6      	b.n	8001204 <HAL_FDCAN_Init+0x3b0>
  }

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	681b      	ldr	r3, [r3, #0]
 8000e7a:	4a7e      	ldr	r2, [pc, #504]	; (8001074 <HAL_FDCAN_Init+0x220>)
 8000e7c:	4293      	cmp	r3, r2
 8000e7e:	d106      	bne.n	8000e8e <HAL_FDCAN_Init+0x3a>
  {
    hfdcan->ttcan = (TTCAN_TypeDef *)((uint32_t)hfdcan->Instance + 0x100U);
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8000e88:	461a      	mov	r2, r3
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	605a      	str	r2, [r3, #4]

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8000e94:	b2db      	uxtb	r3, r3
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	d106      	bne.n	8000ea8 <HAL_FDCAN_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 8000ea2:	6878      	ldr	r0, [r7, #4]
 8000ea4:	f7ff fcac 	bl	8000800 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	699a      	ldr	r2, [r3, #24]
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	681b      	ldr	r3, [r3, #0]
 8000eb2:	f022 0210 	bic.w	r2, r2, #16
 8000eb6:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000eb8:	f7ff fe7a 	bl	8000bb0 <HAL_GetTick>
 8000ebc:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8000ebe:	e014      	b.n	8000eea <HAL_FDCAN_Init+0x96>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8000ec0:	f7ff fe76 	bl	8000bb0 <HAL_GetTick>
 8000ec4:	4602      	mov	r2, r0
 8000ec6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000ec8:	1ad3      	subs	r3, r2, r3
 8000eca:	2b0a      	cmp	r3, #10
 8000ecc:	d90d      	bls.n	8000eea <HAL_FDCAN_Init+0x96>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8000ed4:	f043 0201 	orr.w	r2, r3, #1
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	2203      	movs	r2, #3
 8000ee2:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 8000ee6:	2301      	movs	r3, #1
 8000ee8:	e18c      	b.n	8001204 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	681b      	ldr	r3, [r3, #0]
 8000eee:	699b      	ldr	r3, [r3, #24]
 8000ef0:	f003 0308 	and.w	r3, r3, #8
 8000ef4:	2b08      	cmp	r3, #8
 8000ef6:	d0e3      	beq.n	8000ec0 <HAL_FDCAN_Init+0x6c>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	699a      	ldr	r2, [r3, #24]
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	681b      	ldr	r3, [r3, #0]
 8000f02:	f042 0201 	orr.w	r2, r2, #1
 8000f06:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000f08:	f7ff fe52 	bl	8000bb0 <HAL_GetTick>
 8000f0c:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8000f0e:	e014      	b.n	8000f3a <HAL_FDCAN_Init+0xe6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8000f10:	f7ff fe4e 	bl	8000bb0 <HAL_GetTick>
 8000f14:	4602      	mov	r2, r0
 8000f16:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000f18:	1ad3      	subs	r3, r2, r3
 8000f1a:	2b0a      	cmp	r3, #10
 8000f1c:	d90d      	bls.n	8000f3a <HAL_FDCAN_Init+0xe6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8000f24:	f043 0201 	orr.w	r2, r3, #1
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	2203      	movs	r2, #3
 8000f32:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 8000f36:	2301      	movs	r3, #1
 8000f38:	e164      	b.n	8001204 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	699b      	ldr	r3, [r3, #24]
 8000f40:	f003 0301 	and.w	r3, r3, #1
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	d0e3      	beq.n	8000f10 <HAL_FDCAN_Init+0xbc>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	699a      	ldr	r2, [r3, #24]
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	f042 0202 	orr.w	r2, r2, #2
 8000f56:	619a      	str	r2, [r3, #24]

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	7c1b      	ldrb	r3, [r3, #16]
 8000f5c:	2b01      	cmp	r3, #1
 8000f5e:	d108      	bne.n	8000f72 <HAL_FDCAN_Init+0x11e>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	699a      	ldr	r2, [r3, #24]
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	681b      	ldr	r3, [r3, #0]
 8000f6a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8000f6e:	619a      	str	r2, [r3, #24]
 8000f70:	e007      	b.n	8000f82 <HAL_FDCAN_Init+0x12e>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	699a      	ldr	r2, [r3, #24]
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000f80:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	7c5b      	ldrb	r3, [r3, #17]
 8000f86:	2b01      	cmp	r3, #1
 8000f88:	d108      	bne.n	8000f9c <HAL_FDCAN_Init+0x148>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	699a      	ldr	r2, [r3, #24]
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8000f98:	619a      	str	r2, [r3, #24]
 8000f9a:	e007      	b.n	8000fac <HAL_FDCAN_Init+0x158>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	699a      	ldr	r2, [r3, #24]
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8000faa:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	7c9b      	ldrb	r3, [r3, #18]
 8000fb0:	2b01      	cmp	r3, #1
 8000fb2:	d108      	bne.n	8000fc6 <HAL_FDCAN_Init+0x172>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	699a      	ldr	r2, [r3, #24]
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8000fc2:	619a      	str	r2, [r3, #24]
 8000fc4:	e007      	b.n	8000fd6 <HAL_FDCAN_Init+0x182>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	699a      	ldr	r2, [r3, #24]
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8000fd4:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	699b      	ldr	r3, [r3, #24]
 8000fdc:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	689a      	ldr	r2, [r3, #8]
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	430a      	orrs	r2, r1
 8000fea:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	699a      	ldr	r2, [r3, #24]
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 8000ffa:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	691a      	ldr	r2, [r3, #16]
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	f022 0210 	bic.w	r2, r2, #16
 800100a:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	68db      	ldr	r3, [r3, #12]
 8001010:	2b01      	cmp	r3, #1
 8001012:	d108      	bne.n	8001026 <HAL_FDCAN_Init+0x1d2>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	699a      	ldr	r2, [r3, #24]
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	f042 0204 	orr.w	r2, r2, #4
 8001022:	619a      	str	r2, [r3, #24]
 8001024:	e030      	b.n	8001088 <HAL_FDCAN_Init+0x234>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	68db      	ldr	r3, [r3, #12]
 800102a:	2b00      	cmp	r3, #0
 800102c:	d02c      	beq.n	8001088 <HAL_FDCAN_Init+0x234>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	68db      	ldr	r3, [r3, #12]
 8001032:	2b02      	cmp	r3, #2
 8001034:	d020      	beq.n	8001078 <HAL_FDCAN_Init+0x224>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	699a      	ldr	r2, [r3, #24]
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001044:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	691a      	ldr	r2, [r3, #16]
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	f042 0210 	orr.w	r2, r2, #16
 8001054:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	68db      	ldr	r3, [r3, #12]
 800105a:	2b03      	cmp	r3, #3
 800105c:	d114      	bne.n	8001088 <HAL_FDCAN_Init+0x234>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	699a      	ldr	r2, [r3, #24]
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	f042 0220 	orr.w	r2, r2, #32
 800106c:	619a      	str	r2, [r3, #24]
 800106e:	e00b      	b.n	8001088 <HAL_FDCAN_Init+0x234>
 8001070:	08008e98 	.word	0x08008e98
 8001074:	4000a000 	.word	0x4000a000
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	699a      	ldr	r2, [r3, #24]
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	f042 0220 	orr.w	r2, r2, #32
 8001086:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	699b      	ldr	r3, [r3, #24]
 800108c:	3b01      	subs	r3, #1
 800108e:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	69db      	ldr	r3, [r3, #28]
 8001094:	3b01      	subs	r3, #1
 8001096:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8001098:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	6a1b      	ldr	r3, [r3, #32]
 800109e:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80010a0:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	695b      	ldr	r3, [r3, #20]
 80010a8:	3b01      	subs	r3, #1
 80010aa:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80010b0:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80010b2:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	689b      	ldr	r3, [r3, #8]
 80010b8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80010bc:	d115      	bne.n	80010ea <HAL_FDCAN_Init+0x296>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80010c2:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80010c8:	3b01      	subs	r3, #1
 80010ca:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 80010cc:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010d2:	3b01      	subs	r3, #1
 80010d4:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 80010d6:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010de:	3b01      	subs	r3, #1
 80010e0:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 80010e6:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 80010e8:	60da      	str	r2, [r3, #12]
  }

  if (hfdcan->Init.TxFifoQueueElmtsNbr > 0U)
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d00a      	beq.n	8001108 <HAL_FDCAN_Init+0x2b4>
  {
    /* Select between Tx FIFO and Tx Queue operation modes */
    SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	430a      	orrs	r2, r1
 8001104:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
  }

  /* Configure Tx element size */
  if ((hfdcan->Init.TxBuffersNbr + hfdcan->Init.TxFifoQueueElmtsNbr) > 0U)
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001110:	4413      	add	r3, r2
 8001112:	2b00      	cmp	r3, #0
 8001114:	d011      	beq.n	800113a <HAL_FDCAN_Init+0x2e6>
  {
    MODIFY_REG(hfdcan->Instance->TXESC, FDCAN_TXESC_TBDS, CvtEltSize[hfdcan->Init.TxElmtSize]);
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 800111e:	f023 0107 	bic.w	r1, r3, #7
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001126:	009b      	lsls	r3, r3, #2
 8001128:	3360      	adds	r3, #96	; 0x60
 800112a:	443b      	add	r3, r7
 800112c:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	430a      	orrs	r2, r1
 8001136:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  /* Configure Rx FIFO 0 element size */
  if (hfdcan->Init.RxFifo0ElmtsNbr > 0U)
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800113e:	2b00      	cmp	r3, #0
 8001140:	d011      	beq.n	8001166 <HAL_FDCAN_Init+0x312>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F0DS, (CvtEltSize[hfdcan->Init.RxFifo0ElmtSize] << FDCAN_RXESC_F0DS_Pos));
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800114a:	f023 0107 	bic.w	r1, r3, #7
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001152:	009b      	lsls	r3, r3, #2
 8001154:	3360      	adds	r3, #96	; 0x60
 8001156:	443b      	add	r3, r7
 8001158:	f853 2c54 	ldr.w	r2, [r3, #-84]
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	430a      	orrs	r2, r1
 8001162:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx FIFO 1 element size */
  if (hfdcan->Init.RxFifo1ElmtsNbr > 0U)
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800116a:	2b00      	cmp	r3, #0
 800116c:	d012      	beq.n	8001194 <HAL_FDCAN_Init+0x340>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F1DS, (CvtEltSize[hfdcan->Init.RxFifo1ElmtSize] << FDCAN_RXESC_F1DS_Pos));
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8001176:	f023 0170 	bic.w	r1, r3, #112	; 0x70
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800117e:	009b      	lsls	r3, r3, #2
 8001180:	3360      	adds	r3, #96	; 0x60
 8001182:	443b      	add	r3, r7
 8001184:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8001188:	011a      	lsls	r2, r3, #4
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	430a      	orrs	r2, r1
 8001190:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx buffer element size */
  if (hfdcan->Init.RxBuffersNbr > 0U)
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001198:	2b00      	cmp	r3, #0
 800119a:	d012      	beq.n	80011c2 <HAL_FDCAN_Init+0x36e>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_RBDS, (CvtEltSize[hfdcan->Init.RxBufferSize] << FDCAN_RXESC_RBDS_Pos));
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80011a4:	f423 61e0 	bic.w	r1, r3, #1792	; 0x700
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80011ac:	009b      	lsls	r3, r3, #2
 80011ae:	3360      	adds	r3, #96	; 0x60
 80011b0:	443b      	add	r3, r7
 80011b2:	f853 3c54 	ldr.w	r3, [r3, #-84]
 80011b6:	021a      	lsls	r2, r3, #8
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	430a      	orrs	r2, r1
 80011be:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* By default operation mode is set to Event-driven communication.
     If Time-triggered communication is needed, user should call the
     HAL_FDCAN_TT_ConfigOperation function just after the HAL_FDCAN_Init */
  if (hfdcan->Instance == FDCAN1)
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	4a11      	ldr	r2, [pc, #68]	; (800120c <HAL_FDCAN_Init+0x3b8>)
 80011c8:	4293      	cmp	r3, r2
 80011ca:	d107      	bne.n	80011dc <HAL_FDCAN_Init+0x388>
  {
    CLEAR_BIT(hfdcan->ttcan->TTOCF, FDCAN_TTOCF_OM);
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	685b      	ldr	r3, [r3, #4]
 80011d0:	689a      	ldr	r2, [r3, #8]
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	685b      	ldr	r3, [r3, #4]
 80011d6:	f022 0203 	bic.w	r2, r2, #3
 80011da:	609a      	str	r2, [r3, #8]
  }

  /* Initialize the Latest Tx FIFO/Queue request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	2200      	movs	r2, #0
 80011e0:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	2200      	movs	r2, #0
 80011e8:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	2201      	movs	r2, #1
 80011f0:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

  /* Calculate each RAM block address */
  status = FDCAN_CalcultateRamBlockAddresses(hfdcan);
 80011f4:	6878      	ldr	r0, [r7, #4]
 80011f6:	f000 fac1 	bl	800177c <FDCAN_CalcultateRamBlockAddresses>
 80011fa:	4603      	mov	r3, r0
 80011fc:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b

  /* Return function status */
  return status;
 8001200:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
}
 8001204:	4618      	mov	r0, r3
 8001206:	3760      	adds	r7, #96	; 0x60
 8001208:	46bd      	mov	sp, r7
 800120a:	bd80      	pop	{r7, pc}
 800120c:	4000a000 	.word	0x4000a000

08001210 <HAL_FDCAN_ConfigFilter>:
  * @param  sFilterConfig pointer to an FDCAN_FilterTypeDef structure that
  *         contains the filter configuration information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ConfigFilter(FDCAN_HandleTypeDef *hfdcan, FDCAN_FilterTypeDef *sFilterConfig)
{
 8001210:	b480      	push	{r7}
 8001212:	b087      	sub	sp, #28
 8001214:	af00      	add	r7, sp, #0
 8001216:	6078      	str	r0, [r7, #4]
 8001218:	6039      	str	r1, [r7, #0]
  uint32_t FilterElementW1;
  uint32_t FilterElementW2;
  uint32_t *FilterAddress;
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8001220:	73fb      	strb	r3, [r7, #15]

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8001222:	7bfb      	ldrb	r3, [r7, #15]
 8001224:	2b01      	cmp	r3, #1
 8001226:	d002      	beq.n	800122e <HAL_FDCAN_ConfigFilter+0x1e>
 8001228:	7bfb      	ldrb	r3, [r7, #15]
 800122a:	2b02      	cmp	r3, #2
 800122c:	d157      	bne.n	80012de <HAL_FDCAN_ConfigFilter+0xce>
    {
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->RxBufferIndex, 63U));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->IsCalibrationMsg, 1U));
    }

    if (sFilterConfig->IdType == FDCAN_STANDARD_ID)
 800122e:	683b      	ldr	r3, [r7, #0]
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	2b00      	cmp	r3, #0
 8001234:	d12b      	bne.n	800128e <HAL_FDCAN_ConfigFilter+0x7e>
        assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x7FFU));
        assert_param(IS_FDCAN_STD_FILTER_TYPE(sFilterConfig->FilterType));
      }

      /* Build filter element */
      if (sFilterConfig->FilterConfig == FDCAN_FILTER_TO_RXBUFFER)
 8001236:	683b      	ldr	r3, [r7, #0]
 8001238:	68db      	ldr	r3, [r3, #12]
 800123a:	2b07      	cmp	r3, #7
 800123c:	d10d      	bne.n	800125a <HAL_FDCAN_ConfigFilter+0x4a>
      {
        FilterElementW1 = ((FDCAN_FILTER_TO_RXBUFFER << 27U)       |
                           (sFilterConfig->FilterID1 << 16U)       |
 800123e:	683b      	ldr	r3, [r7, #0]
 8001240:	691b      	ldr	r3, [r3, #16]
 8001242:	041a      	lsls	r2, r3, #16
                           (sFilterConfig->IsCalibrationMsg << 8U) |
 8001244:	683b      	ldr	r3, [r7, #0]
 8001246:	69db      	ldr	r3, [r3, #28]
 8001248:	021b      	lsls	r3, r3, #8
                           (sFilterConfig->FilterID1 << 16U)       |
 800124a:	431a      	orrs	r2, r3
                           sFilterConfig->RxBufferIndex);
 800124c:	683b      	ldr	r3, [r7, #0]
 800124e:	699b      	ldr	r3, [r3, #24]
                           (sFilterConfig->IsCalibrationMsg << 8U) |
 8001250:	4313      	orrs	r3, r2
        FilterElementW1 = ((FDCAN_FILTER_TO_RXBUFFER << 27U)       |
 8001252:	f043 5360 	orr.w	r3, r3, #939524096	; 0x38000000
 8001256:	617b      	str	r3, [r7, #20]
 8001258:	e00e      	b.n	8001278 <HAL_FDCAN_ConfigFilter+0x68>
      }
      else
      {
        FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 800125a:	683b      	ldr	r3, [r7, #0]
 800125c:	689b      	ldr	r3, [r3, #8]
 800125e:	079a      	lsls	r2, r3, #30
                           (sFilterConfig->FilterConfig << 27U) |
 8001260:	683b      	ldr	r3, [r7, #0]
 8001262:	68db      	ldr	r3, [r3, #12]
 8001264:	06db      	lsls	r3, r3, #27
        FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8001266:	431a      	orrs	r2, r3
                           (sFilterConfig->FilterID1 << 16U)    |
 8001268:	683b      	ldr	r3, [r7, #0]
 800126a:	691b      	ldr	r3, [r3, #16]
 800126c:	041b      	lsls	r3, r3, #16
                           (sFilterConfig->FilterConfig << 27U) |
 800126e:	431a      	orrs	r2, r3
                           sFilterConfig->FilterID2);
 8001270:	683b      	ldr	r3, [r7, #0]
 8001272:	695b      	ldr	r3, [r3, #20]
        FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8001274:	4313      	orrs	r3, r2
 8001276:	617b      	str	r3, [r7, #20]
      }

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.StandardFilterSA + (sFilterConfig->FilterIndex * 4U));
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800127c:	683b      	ldr	r3, [r7, #0]
 800127e:	685b      	ldr	r3, [r3, #4]
 8001280:	009b      	lsls	r3, r3, #2
 8001282:	4413      	add	r3, r2
 8001284:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 8001286:	68bb      	ldr	r3, [r7, #8]
 8001288:	697a      	ldr	r2, [r7, #20]
 800128a:	601a      	str	r2, [r3, #0]
 800128c:	e025      	b.n	80012da <HAL_FDCAN_ConfigFilter+0xca>
        assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x1FFFFFFFU));
        assert_param(IS_FDCAN_EXT_FILTER_TYPE(sFilterConfig->FilterType));
      }

      /* Build first word of filter element */
      FilterElementW1 = ((sFilterConfig->FilterConfig << 29U) | sFilterConfig->FilterID1);
 800128e:	683b      	ldr	r3, [r7, #0]
 8001290:	68db      	ldr	r3, [r3, #12]
 8001292:	075a      	lsls	r2, r3, #29
 8001294:	683b      	ldr	r3, [r7, #0]
 8001296:	691b      	ldr	r3, [r3, #16]
 8001298:	4313      	orrs	r3, r2
 800129a:	617b      	str	r3, [r7, #20]

      /* Build second word of filter element */
      if (sFilterConfig->FilterConfig == FDCAN_FILTER_TO_RXBUFFER)
 800129c:	683b      	ldr	r3, [r7, #0]
 800129e:	68db      	ldr	r3, [r3, #12]
 80012a0:	2b07      	cmp	r3, #7
 80012a2:	d103      	bne.n	80012ac <HAL_FDCAN_ConfigFilter+0x9c>
      {
        FilterElementW2 = sFilterConfig->RxBufferIndex;
 80012a4:	683b      	ldr	r3, [r7, #0]
 80012a6:	699b      	ldr	r3, [r3, #24]
 80012a8:	613b      	str	r3, [r7, #16]
 80012aa:	e006      	b.n	80012ba <HAL_FDCAN_ConfigFilter+0xaa>
      }
      else
      {
        FilterElementW2 = ((sFilterConfig->FilterType << 30U) | sFilterConfig->FilterID2);
 80012ac:	683b      	ldr	r3, [r7, #0]
 80012ae:	689b      	ldr	r3, [r3, #8]
 80012b0:	079a      	lsls	r2, r3, #30
 80012b2:	683b      	ldr	r3, [r7, #0]
 80012b4:	695b      	ldr	r3, [r3, #20]
 80012b6:	4313      	orrs	r3, r2
 80012b8:	613b      	str	r3, [r7, #16]
      }

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.ExtendedFilterSA + (sFilterConfig->FilterIndex * 4U * 2U));
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80012be:	683b      	ldr	r3, [r7, #0]
 80012c0:	685b      	ldr	r3, [r3, #4]
 80012c2:	00db      	lsls	r3, r3, #3
 80012c4:	4413      	add	r3, r2
 80012c6:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 80012c8:	68bb      	ldr	r3, [r7, #8]
 80012ca:	697a      	ldr	r2, [r7, #20]
 80012cc:	601a      	str	r2, [r3, #0]
      FilterAddress++;
 80012ce:	68bb      	ldr	r3, [r7, #8]
 80012d0:	3304      	adds	r3, #4
 80012d2:	60bb      	str	r3, [r7, #8]
      *FilterAddress = FilterElementW2;
 80012d4:	68bb      	ldr	r3, [r7, #8]
 80012d6:	693a      	ldr	r2, [r7, #16]
 80012d8:	601a      	str	r2, [r3, #0]
    }

    /* Return function status */
    return HAL_OK;
 80012da:	2300      	movs	r3, #0
 80012dc:	e008      	b.n	80012f0 <HAL_FDCAN_ConfigFilter+0xe0>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80012e4:	f043 0202 	orr.w	r2, r3, #2
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 80012ee:	2301      	movs	r3, #1
  }
}
 80012f0:	4618      	mov	r0, r3
 80012f2:	371c      	adds	r7, #28
 80012f4:	46bd      	mov	sp, r7
 80012f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012fa:	4770      	bx	lr

080012fc <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 80012fc:	b480      	push	{r7}
 80012fe:	b083      	sub	sp, #12
 8001300:	af00      	add	r7, sp, #0
 8001302:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800130a:	b2db      	uxtb	r3, r3
 800130c:	2b01      	cmp	r3, #1
 800130e:	d111      	bne.n	8001334 <HAL_FDCAN_Start+0x38>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	2202      	movs	r2, #2
 8001314:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	699a      	ldr	r2, [r3, #24]
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	f022 0201 	bic.w	r2, r2, #1
 8001326:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	2200      	movs	r2, #0
 800132c:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Return function status */
    return HAL_OK;
 8001330:	2300      	movs	r3, #0
 8001332:	e008      	b.n	8001346 <HAL_FDCAN_Start+0x4a>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800133a:	f043 0204 	orr.w	r2, r3, #4
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 8001344:	2301      	movs	r3, #1
  }
}
 8001346:	4618      	mov	r0, r3
 8001348:	370c      	adds	r7, #12
 800134a:	46bd      	mov	sp, r7
 800134c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001350:	4770      	bx	lr

08001352 <HAL_FDCAN_AddMessageToTxBuffer>:
  * @param  BufferIndex index of the buffer to be configured.
  *         This parameter can be a value of @arg FDCAN_Tx_location.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_AddMessageToTxBuffer(FDCAN_HandleTypeDef *hfdcan, FDCAN_TxHeaderTypeDef *pTxHeader, uint8_t *pTxData, uint32_t BufferIndex)
{
 8001352:	b580      	push	{r7, lr}
 8001354:	b08c      	sub	sp, #48	; 0x30
 8001356:	af00      	add	r7, sp, #0
 8001358:	60f8      	str	r0, [r7, #12]
 800135a:	60b9      	str	r1, [r7, #8]
 800135c:	607a      	str	r2, [r7, #4]
 800135e:	603b      	str	r3, [r7, #0]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8001360:	68fb      	ldr	r3, [r7, #12]
 8001362:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8001366:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  assert_param(IS_FDCAN_FDF(pTxHeader->FDFormat));
  assert_param(IS_FDCAN_EFC(pTxHeader->TxEventFifoControl));
  assert_param(IS_FDCAN_MAX_VALUE(pTxHeader->MessageMarker, 0xFFU));
  assert_param(IS_FDCAN_TX_LOCATION(BufferIndex));

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 800136a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800136e:	2b01      	cmp	r3, #1
 8001370:	d003      	beq.n	800137a <HAL_FDCAN_AddMessageToTxBuffer+0x28>
 8001372:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001376:	2b02      	cmp	r3, #2
 8001378:	d14e      	bne.n	8001418 <HAL_FDCAN_AddMessageToTxBuffer+0xc6>
 800137a:	683b      	ldr	r3, [r7, #0]
 800137c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800137e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001380:	fa93 f3a3 	rbit	r3, r3
 8001384:	623b      	str	r3, [r7, #32]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001386:	6a3b      	ldr	r3, [r7, #32]
 8001388:	62bb      	str	r3, [r7, #40]	; 0x28
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800138a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800138c:	2b00      	cmp	r3, #0
 800138e:	d101      	bne.n	8001394 <HAL_FDCAN_AddMessageToTxBuffer+0x42>
  {
    return 32U;
 8001390:	2320      	movs	r3, #32
 8001392:	e003      	b.n	800139c <HAL_FDCAN_AddMessageToTxBuffer+0x4a>
  }
  return __builtin_clz(value);
 8001394:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001396:	fab3 f383 	clz	r3, r3
 800139a:	b2db      	uxtb	r3, r3
  {
    /* Check that the selected buffer has an allocated area into the RAM */
    if (POSITION_VAL(BufferIndex) >= ((hfdcan->Instance->TXBC & FDCAN_TXBC_NDTB) >> FDCAN_TXBC_NDTB_Pos))
 800139c:	461a      	mov	r2, r3
 800139e:	68fb      	ldr	r3, [r7, #12]
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80013a6:	0c1b      	lsrs	r3, r3, #16
 80013a8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80013ac:	429a      	cmp	r2, r3
 80013ae:	d309      	bcc.n	80013c4 <HAL_FDCAN_AddMessageToTxBuffer+0x72>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 80013b0:	68fb      	ldr	r3, [r7, #12]
 80013b2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80013b6:	f043 0220 	orr.w	r2, r3, #32
 80013ba:	68fb      	ldr	r3, [r7, #12]
 80013bc:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      return HAL_ERROR;
 80013c0:	2301      	movs	r3, #1
 80013c2:	e032      	b.n	800142a <HAL_FDCAN_AddMessageToTxBuffer+0xd8>
    }

    /* Check that there is no transmission request pending for the selected buffer */
    if ((hfdcan->Instance->TXBRP & BufferIndex) != 0U)
 80013c4:	68fb      	ldr	r3, [r7, #12]
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	f8d3 20cc 	ldr.w	r2, [r3, #204]	; 0xcc
 80013cc:	683b      	ldr	r3, [r7, #0]
 80013ce:	4013      	ands	r3, r2
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d009      	beq.n	80013e8 <HAL_FDCAN_AddMessageToTxBuffer+0x96>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PENDING;
 80013d4:	68fb      	ldr	r3, [r7, #12]
 80013d6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80013da:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80013de:	68fb      	ldr	r3, [r7, #12]
 80013e0:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      return HAL_ERROR;
 80013e4:	2301      	movs	r3, #1
 80013e6:	e020      	b.n	800142a <HAL_FDCAN_AddMessageToTxBuffer+0xd8>
 80013e8:	683b      	ldr	r3, [r7, #0]
 80013ea:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80013ec:	69bb      	ldr	r3, [r7, #24]
 80013ee:	fa93 f3a3 	rbit	r3, r3
 80013f2:	617b      	str	r3, [r7, #20]
  return result;
 80013f4:	697b      	ldr	r3, [r7, #20]
 80013f6:	61fb      	str	r3, [r7, #28]
  if (value == 0U)
 80013f8:	69fb      	ldr	r3, [r7, #28]
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d101      	bne.n	8001402 <HAL_FDCAN_AddMessageToTxBuffer+0xb0>
    return 32U;
 80013fe:	2320      	movs	r3, #32
 8001400:	e003      	b.n	800140a <HAL_FDCAN_AddMessageToTxBuffer+0xb8>
  return __builtin_clz(value);
 8001402:	69fb      	ldr	r3, [r7, #28]
 8001404:	fab3 f383 	clz	r3, r3
 8001408:	b2db      	uxtb	r3, r3
    }
    else
    {
      /* Add the message to the Tx buffer */
      FDCAN_CopyMessageToRAM(hfdcan, pTxHeader, pTxData, POSITION_VAL(BufferIndex));
 800140a:	687a      	ldr	r2, [r7, #4]
 800140c:	68b9      	ldr	r1, [r7, #8]
 800140e:	68f8      	ldr	r0, [r7, #12]
 8001410:	f000 fb3a 	bl	8001a88 <FDCAN_CopyMessageToRAM>
    }

    /* Return function status */
    return HAL_OK;
 8001414:	2300      	movs	r3, #0
 8001416:	e008      	b.n	800142a <HAL_FDCAN_AddMessageToTxBuffer+0xd8>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8001418:	68fb      	ldr	r3, [r7, #12]
 800141a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800141e:	f043 0202 	orr.w	r2, r3, #2
 8001422:	68fb      	ldr	r3, [r7, #12]
 8001424:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 8001428:	2301      	movs	r3, #1
  }
}
 800142a:	4618      	mov	r0, r3
 800142c:	3730      	adds	r7, #48	; 0x30
 800142e:	46bd      	mov	sp, r7
 8001430:	bd80      	pop	{r7, pc}

08001432 <HAL_FDCAN_EnableTxBufferRequest>:
  * @param  BufferIndex buffer index.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_EnableTxBufferRequest(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndex)
{
 8001432:	b480      	push	{r7}
 8001434:	b083      	sub	sp, #12
 8001436:	af00      	add	r7, sp, #0
 8001438:	6078      	str	r0, [r7, #4]
 800143a:	6039      	str	r1, [r7, #0]
  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8001442:	b2db      	uxtb	r3, r3
 8001444:	2b02      	cmp	r3, #2
 8001446:	d106      	bne.n	8001456 <HAL_FDCAN_EnableTxBufferRequest+0x24>
  {
    /* Add transmission request */
    hfdcan->Instance->TXBAR = BufferIndex;
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	683a      	ldr	r2, [r7, #0]
 800144e:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0

    /* Return function status */
    return HAL_OK;
 8001452:	2300      	movs	r3, #0
 8001454:	e008      	b.n	8001468 <HAL_FDCAN_EnableTxBufferRequest+0x36>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800145c:	f043 0208 	orr.w	r2, r3, #8
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 8001466:	2301      	movs	r3, #1
  }
}
 8001468:	4618      	mov	r0, r3
 800146a:	370c      	adds	r7, #12
 800146c:	46bd      	mov	sp, r7
 800146e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001472:	4770      	bx	lr

08001474 <HAL_FDCAN_GetRxMessage>:
  * @param  pRxHeader pointer to a FDCAN_RxHeaderTypeDef structure.
  * @param  pRxData pointer to a buffer where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetRxMessage(FDCAN_HandleTypeDef *hfdcan, uint32_t RxLocation, FDCAN_RxHeaderTypeDef *pRxHeader, uint8_t *pRxData)
{
 8001474:	b480      	push	{r7}
 8001476:	b08b      	sub	sp, #44	; 0x2c
 8001478:	af00      	add	r7, sp, #0
 800147a:	60f8      	str	r0, [r7, #12]
 800147c:	60b9      	str	r1, [r7, #8]
 800147e:	607a      	str	r2, [r7, #4]
 8001480:	603b      	str	r3, [r7, #0]
  uint32_t *RxAddress;
  uint8_t  *pData;
  uint32_t ByteCounter;
  uint32_t GetIndex = 0;
 8001482:	2300      	movs	r3, #0
 8001484:	61fb      	str	r3, [r7, #28]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8001486:	68fb      	ldr	r3, [r7, #12]
 8001488:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800148c:	76fb      	strb	r3, [r7, #27]

  if (state == HAL_FDCAN_STATE_BUSY)
 800148e:	7efb      	ldrb	r3, [r7, #27]
 8001490:	2b02      	cmp	r3, #2
 8001492:	f040 814b 	bne.w	800172c <HAL_FDCAN_GetRxMessage+0x2b8>
  {
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8001496:	68bb      	ldr	r3, [r7, #8]
 8001498:	2b40      	cmp	r3, #64	; 0x40
 800149a:	d14d      	bne.n	8001538 <HAL_FDCAN_GetRxMessage+0xc4>
    {
      /* Check that the Rx FIFO 0 has an allocated area into the RAM */
      if ((hfdcan->Instance->RXF0C & FDCAN_RXF0C_F0S) == 0U)
 800149c:	68fb      	ldr	r3, [r7, #12]
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80014a4:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d109      	bne.n	80014c0 <HAL_FDCAN_GetRxMessage+0x4c>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 80014ac:	68fb      	ldr	r3, [r7, #12]
 80014ae:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80014b2:	f043 0220 	orr.w	r2, r3, #32
 80014b6:	68fb      	ldr	r3, [r7, #12]
 80014b8:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 80014bc:	2301      	movs	r3, #1
 80014be:	e13e      	b.n	800173e <HAL_FDCAN_GetRxMessage+0x2ca>
      }

      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 80014c0:	68fb      	ldr	r3, [r7, #12]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80014c8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d109      	bne.n	80014e4 <HAL_FDCAN_GetRxMessage+0x70>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 80014d0:	68fb      	ldr	r3, [r7, #12]
 80014d2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80014d6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80014da:	68fb      	ldr	r3, [r7, #12]
 80014dc:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 80014e0:	2301      	movs	r3, #1
 80014e2:	e12c      	b.n	800173e <HAL_FDCAN_GetRxMessage+0x2ca>
      }
      else
      {
        /* Check that the Rx FIFO 0 is full & overwrite mode is on*/
        if(((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0F) >> FDCAN_RXF0S_F0F_Pos) == 1U)
 80014e4:	68fb      	ldr	r3, [r7, #12]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80014ec:	0e1b      	lsrs	r3, r3, #24
 80014ee:	f003 0301 	and.w	r3, r3, #1
 80014f2:	2b01      	cmp	r3, #1
 80014f4:	d10b      	bne.n	800150e <HAL_FDCAN_GetRxMessage+0x9a>
        {
          if(((hfdcan->Instance->RXF0C & FDCAN_RXF0C_F0OM) >> FDCAN_RXF0C_F0OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 80014f6:	68fb      	ldr	r3, [r7, #12]
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80014fe:	0fdb      	lsrs	r3, r3, #31
 8001500:	f003 0301 	and.w	r3, r3, #1
 8001504:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001508:	d101      	bne.n	800150e <HAL_FDCAN_GetRxMessage+0x9a>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 800150a:	2301      	movs	r3, #1
 800150c:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 0 element index*/
        GetIndex += ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 800150e:	68fb      	ldr	r3, [r7, #12]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8001516:	0a1b      	lsrs	r3, r3, #8
 8001518:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800151c:	69fa      	ldr	r2, [r7, #28]
 800151e:	4413      	add	r3, r2
 8001520:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 0 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * hfdcan->Init.RxFifo0ElmtSize * 4U));
 8001522:	68fb      	ldr	r3, [r7, #12]
 8001524:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8001526:	68fb      	ldr	r3, [r7, #12]
 8001528:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800152a:	69f9      	ldr	r1, [r7, #28]
 800152c:	fb01 f303 	mul.w	r3, r1, r3
 8001530:	009b      	lsls	r3, r3, #2
 8001532:	4413      	add	r3, r2
 8001534:	627b      	str	r3, [r7, #36]	; 0x24
 8001536:	e069      	b.n	800160c <HAL_FDCAN_GetRxMessage+0x198>
      }
    }
    else if (RxLocation == FDCAN_RX_FIFO1) /* Rx element is assigned to the Rx FIFO 1 */
 8001538:	68bb      	ldr	r3, [r7, #8]
 800153a:	2b41      	cmp	r3, #65	; 0x41
 800153c:	d14d      	bne.n	80015da <HAL_FDCAN_GetRxMessage+0x166>
    {
      /* Check that the Rx FIFO 1 has an allocated area into the RAM */
      if ((hfdcan->Instance->RXF1C & FDCAN_RXF1C_F1S) == 0U)
 800153e:	68fb      	ldr	r3, [r7, #12]
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8001546:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800154a:	2b00      	cmp	r3, #0
 800154c:	d109      	bne.n	8001562 <HAL_FDCAN_GetRxMessage+0xee>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 800154e:	68fb      	ldr	r3, [r7, #12]
 8001550:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001554:	f043 0220 	orr.w	r2, r3, #32
 8001558:	68fb      	ldr	r3, [r7, #12]
 800155a:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 800155e:	2301      	movs	r3, #1
 8001560:	e0ed      	b.n	800173e <HAL_FDCAN_GetRxMessage+0x2ca>
      }

      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 8001562:	68fb      	ldr	r3, [r7, #12]
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800156a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800156e:	2b00      	cmp	r3, #0
 8001570:	d109      	bne.n	8001586 <HAL_FDCAN_GetRxMessage+0x112>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8001572:	68fb      	ldr	r3, [r7, #12]
 8001574:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001578:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800157c:	68fb      	ldr	r3, [r7, #12]
 800157e:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 8001582:	2301      	movs	r3, #1
 8001584:	e0db      	b.n	800173e <HAL_FDCAN_GetRxMessage+0x2ca>
      }
      else
      {
        /* Check that the Rx FIFO 1 is full & overwrite mode is on*/
        if(((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1F) >> FDCAN_RXF1S_F1F_Pos) == 1U)
 8001586:	68fb      	ldr	r3, [r7, #12]
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800158e:	0e1b      	lsrs	r3, r3, #24
 8001590:	f003 0301 	and.w	r3, r3, #1
 8001594:	2b01      	cmp	r3, #1
 8001596:	d10b      	bne.n	80015b0 <HAL_FDCAN_GetRxMessage+0x13c>
        {
          if(((hfdcan->Instance->RXF1C & FDCAN_RXF1C_F1OM) >> FDCAN_RXF1C_F1OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 8001598:	68fb      	ldr	r3, [r7, #12]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80015a0:	0fdb      	lsrs	r3, r3, #31
 80015a2:	f003 0301 	and.w	r3, r3, #1
 80015a6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80015aa:	d101      	bne.n	80015b0 <HAL_FDCAN_GetRxMessage+0x13c>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 80015ac:	2301      	movs	r3, #1
 80015ae:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 1 element index*/
        GetIndex += ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 80015b0:	68fb      	ldr	r3, [r7, #12]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80015b8:	0a1b      	lsrs	r3, r3, #8
 80015ba:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80015be:	69fa      	ldr	r2, [r7, #28]
 80015c0:	4413      	add	r3, r2
 80015c2:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 1 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * hfdcan->Init.RxFifo1ElmtSize * 4U));
 80015c4:	68fb      	ldr	r3, [r7, #12]
 80015c6:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 80015c8:	68fb      	ldr	r3, [r7, #12]
 80015ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015cc:	69f9      	ldr	r1, [r7, #28]
 80015ce:	fb01 f303 	mul.w	r3, r1, r3
 80015d2:	009b      	lsls	r3, r3, #2
 80015d4:	4413      	add	r3, r2
 80015d6:	627b      	str	r3, [r7, #36]	; 0x24
 80015d8:	e018      	b.n	800160c <HAL_FDCAN_GetRxMessage+0x198>
      }
    }
    else /* Rx element is assigned to a dedicated Rx buffer */
    {
      /* Check that the selected buffer has an allocated area into the RAM */
      if (RxLocation >= hfdcan->Init.RxBuffersNbr)
 80015da:	68fb      	ldr	r3, [r7, #12]
 80015dc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80015de:	68ba      	ldr	r2, [r7, #8]
 80015e0:	429a      	cmp	r2, r3
 80015e2:	d309      	bcc.n	80015f8 <HAL_FDCAN_GetRxMessage+0x184>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 80015e4:	68fb      	ldr	r3, [r7, #12]
 80015e6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80015ea:	f043 0220 	orr.w	r2, r3, #32
 80015ee:	68fb      	ldr	r3, [r7, #12]
 80015f0:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 80015f4:	2301      	movs	r3, #1
 80015f6:	e0a2      	b.n	800173e <HAL_FDCAN_GetRxMessage+0x2ca>
      }
      else
      {
        /* Calculate Rx buffer address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxBufferSA + (RxLocation * hfdcan->Init.RxBufferSize * 4U));
 80015f8:	68fb      	ldr	r3, [r7, #12]
 80015fa:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 80015fc:	68fb      	ldr	r3, [r7, #12]
 80015fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001600:	68b9      	ldr	r1, [r7, #8]
 8001602:	fb01 f303 	mul.w	r3, r1, r3
 8001606:	009b      	lsls	r3, r3, #2
 8001608:	4413      	add	r3, r2
 800160a:	627b      	str	r3, [r7, #36]	; 0x24
      }
    }

    /* Retrieve IdType */
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 800160c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	f003 4280 	and.w	r2, r3, #1073741824	; 0x40000000
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	605a      	str	r2, [r3, #4]

    /* Retrieve Identifier */
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	685b      	ldr	r3, [r3, #4]
 800161c:	2b00      	cmp	r3, #0
 800161e:	d107      	bne.n	8001630 <HAL_FDCAN_GetRxMessage+0x1bc>
    {
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18);
 8001620:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	0c9b      	lsrs	r3, r3, #18
 8001626:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	601a      	str	r2, [r3, #0]
 800162e:	e005      	b.n	800163c <HAL_FDCAN_GetRxMessage+0x1c8>
    }
    else /* Extended ID element */
    {
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 8001630:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve RxFrameType */
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 800163c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	f003 5200 	and.w	r2, r3, #536870912	; 0x20000000
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	609a      	str	r2, [r3, #8]

    /* Retrieve ErrorStateIndicator */
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 8001648:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	611a      	str	r2, [r3, #16]

    /* Increment RxAddress pointer to second word of Rx FIFO element */
    RxAddress++;
 8001654:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001656:	3304      	adds	r3, #4
 8001658:	627b      	str	r3, [r7, #36]	; 0x24

    /* Retrieve RxTimestamp */
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 800165a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	b29a      	uxth	r2, r3
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	61da      	str	r2, [r3, #28]

    /* Retrieve DataLength */
    pRxHeader->DataLength = (*RxAddress & FDCAN_ELEMENT_MASK_DLC);
 8001664:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	f403 2270 	and.w	r2, r3, #983040	; 0xf0000
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	60da      	str	r2, [r3, #12]

    /* Retrieve BitRateSwitch */
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 8001670:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	f403 1280 	and.w	r2, r3, #1048576	; 0x100000
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	615a      	str	r2, [r3, #20]

    /* Retrieve FDFormat */
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 800167c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	f403 1200 	and.w	r2, r3, #2097152	; 0x200000
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	619a      	str	r2, [r3, #24]

    /* Retrieve FilterIndex */
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24);
 8001688:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	0e1b      	lsrs	r3, r3, #24
 800168e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	621a      	str	r2, [r3, #32]

    /* Retrieve NonMatchingFrame */
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31);
 8001696:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	0fda      	lsrs	r2, r3, #31
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Increment RxAddress pointer to payload of Rx FIFO element */
    RxAddress++;
 80016a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016a2:	3304      	adds	r3, #4
 80016a4:	627b      	str	r3, [r7, #36]	; 0x24

    /* Retrieve Rx payload */
    pData = (uint8_t *)RxAddress;
 80016a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016a8:	617b      	str	r3, [r7, #20]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16]; ByteCounter++)
 80016aa:	2300      	movs	r3, #0
 80016ac:	623b      	str	r3, [r7, #32]
 80016ae:	e00a      	b.n	80016c6 <HAL_FDCAN_GetRxMessage+0x252>
    {
      pRxData[ByteCounter] = pData[ByteCounter];
 80016b0:	697a      	ldr	r2, [r7, #20]
 80016b2:	6a3b      	ldr	r3, [r7, #32]
 80016b4:	441a      	add	r2, r3
 80016b6:	6839      	ldr	r1, [r7, #0]
 80016b8:	6a3b      	ldr	r3, [r7, #32]
 80016ba:	440b      	add	r3, r1
 80016bc:	7812      	ldrb	r2, [r2, #0]
 80016be:	701a      	strb	r2, [r3, #0]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16]; ByteCounter++)
 80016c0:	6a3b      	ldr	r3, [r7, #32]
 80016c2:	3301      	adds	r3, #1
 80016c4:	623b      	str	r3, [r7, #32]
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	68db      	ldr	r3, [r3, #12]
 80016ca:	0c1b      	lsrs	r3, r3, #16
 80016cc:	4a1f      	ldr	r2, [pc, #124]	; (800174c <HAL_FDCAN_GetRxMessage+0x2d8>)
 80016ce:	5cd3      	ldrb	r3, [r2, r3]
 80016d0:	461a      	mov	r2, r3
 80016d2:	6a3b      	ldr	r3, [r7, #32]
 80016d4:	4293      	cmp	r3, r2
 80016d6:	d3eb      	bcc.n	80016b0 <HAL_FDCAN_GetRxMessage+0x23c>
    }

    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 80016d8:	68bb      	ldr	r3, [r7, #8]
 80016da:	2b40      	cmp	r3, #64	; 0x40
 80016dc:	d105      	bne.n	80016ea <HAL_FDCAN_GetRxMessage+0x276>
    {
      /* Acknowledge the Rx FIFO 0 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF0A = GetIndex;
 80016de:	68fb      	ldr	r3, [r7, #12]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	69fa      	ldr	r2, [r7, #28]
 80016e4:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
 80016e8:	e01e      	b.n	8001728 <HAL_FDCAN_GetRxMessage+0x2b4>
    }
    else if (RxLocation == FDCAN_RX_FIFO1) /* Rx element is assigned to the Rx FIFO 1 */
 80016ea:	68bb      	ldr	r3, [r7, #8]
 80016ec:	2b41      	cmp	r3, #65	; 0x41
 80016ee:	d105      	bne.n	80016fc <HAL_FDCAN_GetRxMessage+0x288>
    {
      /* Acknowledge the Rx FIFO 1 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF1A = GetIndex;
 80016f0:	68fb      	ldr	r3, [r7, #12]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	69fa      	ldr	r2, [r7, #28]
 80016f6:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
 80016fa:	e015      	b.n	8001728 <HAL_FDCAN_GetRxMessage+0x2b4>
    }
    else /* Rx element is assigned to a dedicated Rx buffer */
    {
      /* Clear the New Data flag of the current Rx buffer */
      if (RxLocation < FDCAN_RX_BUFFER32)
 80016fc:	68bb      	ldr	r3, [r7, #8]
 80016fe:	2b1f      	cmp	r3, #31
 8001700:	d808      	bhi.n	8001714 <HAL_FDCAN_GetRxMessage+0x2a0>
      {
        hfdcan->Instance->NDAT1 = ((uint32_t)1 << RxLocation);
 8001702:	68fb      	ldr	r3, [r7, #12]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	2101      	movs	r1, #1
 8001708:	68ba      	ldr	r2, [r7, #8]
 800170a:	fa01 f202 	lsl.w	r2, r1, r2
 800170e:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
 8001712:	e009      	b.n	8001728 <HAL_FDCAN_GetRxMessage+0x2b4>
      }
      else /* FDCAN_RX_BUFFER32 <= RxLocation <= FDCAN_RX_BUFFER63 */
      {
        hfdcan->Instance->NDAT2 = ((uint32_t)1 << (RxLocation & 0x1FU));
 8001714:	68bb      	ldr	r3, [r7, #8]
 8001716:	f003 021f 	and.w	r2, r3, #31
 800171a:	68fb      	ldr	r3, [r7, #12]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	2101      	movs	r1, #1
 8001720:	fa01 f202 	lsl.w	r2, r1, r2
 8001724:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
      }
    }

    /* Return function status */
    return HAL_OK;
 8001728:	2300      	movs	r3, #0
 800172a:	e008      	b.n	800173e <HAL_FDCAN_GetRxMessage+0x2ca>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 800172c:	68fb      	ldr	r3, [r7, #12]
 800172e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001732:	f043 0208 	orr.w	r2, r3, #8
 8001736:	68fb      	ldr	r3, [r7, #12]
 8001738:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 800173c:	2301      	movs	r3, #1
  }
}
 800173e:	4618      	mov	r0, r3
 8001740:	372c      	adds	r7, #44	; 0x2c
 8001742:	46bd      	mov	sp, r7
 8001744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001748:	4770      	bx	lr
 800174a:	bf00      	nop
 800174c:	08008f3c 	.word	0x08008f3c

08001750 <HAL_FDCAN_IsTxBufferMessagePending>:
  * @retval Status
  *          - 0 : No pending transmission request on TxBufferIndex.
  *          - 1 : Pending transmission request on TxBufferIndex.
  */
uint32_t HAL_FDCAN_IsTxBufferMessagePending(FDCAN_HandleTypeDef *hfdcan, uint32_t TxBufferIndex)
{
 8001750:	b480      	push	{r7}
 8001752:	b083      	sub	sp, #12
 8001754:	af00      	add	r7, sp, #0
 8001756:	6078      	str	r0, [r7, #4]
 8001758:	6039      	str	r1, [r7, #0]
  /* Check pending transmission request on the selected buffer */
  if ((hfdcan->Instance->TXBRP & TxBufferIndex) == 0U)
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	f8d3 20cc 	ldr.w	r2, [r3, #204]	; 0xcc
 8001762:	683b      	ldr	r3, [r7, #0]
 8001764:	4013      	ands	r3, r2
 8001766:	2b00      	cmp	r3, #0
 8001768:	d101      	bne.n	800176e <HAL_FDCAN_IsTxBufferMessagePending+0x1e>
  {
    return 0;
 800176a:	2300      	movs	r3, #0
 800176c:	e000      	b.n	8001770 <HAL_FDCAN_IsTxBufferMessagePending+0x20>
  }
  return 1;
 800176e:	2301      	movs	r3, #1
}
 8001770:	4618      	mov	r0, r3
 8001772:	370c      	adds	r7, #12
 8001774:	46bd      	mov	sp, r7
 8001776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800177a:	4770      	bx	lr

0800177c <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
 */
static HAL_StatusTypeDef FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 800177c:	b480      	push	{r7}
 800177e:	b085      	sub	sp, #20
 8001780:	af00      	add	r7, sp, #0
 8001782:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t StartAddress;

  StartAddress = hfdcan->Init.MessageRAMOffset;
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001788:	60bb      	str	r3, [r7, #8]

  /* Standard filter list start address */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_FLSSA, (StartAddress << FDCAN_SIDFC_FLSSA_Pos));
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8001792:	4ba7      	ldr	r3, [pc, #668]	; (8001a30 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8001794:	4013      	ands	r3, r2
 8001796:	68ba      	ldr	r2, [r7, #8]
 8001798:	0091      	lsls	r1, r2, #2
 800179a:	687a      	ldr	r2, [r7, #4]
 800179c:	6812      	ldr	r2, [r2, #0]
 800179e:	430b      	orrs	r3, r1
 80017a0:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_SIDFC_LSS_Pos));
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80017ac:	f423 017f 	bic.w	r1, r3, #16711680	; 0xff0000
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80017b4:	041a      	lsls	r2, r3, #16
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	430a      	orrs	r2, r1
 80017bc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Extended filter list start address */
  StartAddress += hfdcan->Init.StdFiltersNbr;
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80017c4:	68ba      	ldr	r2, [r7, #8]
 80017c6:	4413      	add	r3, r2
 80017c8:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_FLESA, (StartAddress << FDCAN_XIDFC_FLESA_Pos));
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80017d2:	4b97      	ldr	r3, [pc, #604]	; (8001a30 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80017d4:	4013      	ands	r3, r2
 80017d6:	68ba      	ldr	r2, [r7, #8]
 80017d8:	0091      	lsls	r1, r2, #2
 80017da:	687a      	ldr	r2, [r7, #4]
 80017dc:	6812      	ldr	r2, [r2, #0]
 80017de:	430b      	orrs	r3, r1
 80017e0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_XIDFC_LSE_Pos));
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80017ec:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80017f4:	041a      	lsls	r2, r3, #16
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	430a      	orrs	r2, r1
 80017fc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Rx FIFO 0 start address */
  StartAddress += (hfdcan->Init.ExtFiltersNbr * 2U);
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001804:	005b      	lsls	r3, r3, #1
 8001806:	68ba      	ldr	r2, [r7, #8]
 8001808:	4413      	add	r3, r2
 800180a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0SA, (StartAddress << FDCAN_RXF0C_F0SA_Pos));
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 8001814:	4b86      	ldr	r3, [pc, #536]	; (8001a30 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8001816:	4013      	ands	r3, r2
 8001818:	68ba      	ldr	r2, [r7, #8]
 800181a:	0091      	lsls	r1, r2, #2
 800181c:	687a      	ldr	r2, [r7, #4]
 800181e:	6812      	ldr	r2, [r2, #0]
 8001820:	430b      	orrs	r3, r1
 8001822:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0

  /* Rx FIFO 0 elements number */
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0S, (hfdcan->Init.RxFifo0ElmtsNbr << FDCAN_RXF0C_F0S_Pos));
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800182e:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001836:	041a      	lsls	r2, r3, #16
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	430a      	orrs	r2, r1
 800183e:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

  /* Rx FIFO 1 start address */
  StartAddress += (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize);
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001846:	687a      	ldr	r2, [r7, #4]
 8001848:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800184a:	fb02 f303 	mul.w	r3, r2, r3
 800184e:	68ba      	ldr	r2, [r7, #8]
 8001850:	4413      	add	r3, r2
 8001852:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1SA, (StartAddress << FDCAN_RXF1C_F1SA_Pos));
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 800185c:	4b74      	ldr	r3, [pc, #464]	; (8001a30 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 800185e:	4013      	ands	r3, r2
 8001860:	68ba      	ldr	r2, [r7, #8]
 8001862:	0091      	lsls	r1, r2, #2
 8001864:	687a      	ldr	r2, [r7, #4]
 8001866:	6812      	ldr	r2, [r2, #0]
 8001868:	430b      	orrs	r3, r1
 800186a:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0

  /* Rx FIFO 1 elements number */
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1S, (hfdcan->Init.RxFifo1ElmtsNbr << FDCAN_RXF1C_F1S_Pos));
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8001876:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800187e:	041a      	lsls	r2, r3, #16
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	430a      	orrs	r2, r1
 8001886:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

  /* Rx buffer list start address */
  StartAddress += (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize);
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800188e:	687a      	ldr	r2, [r7, #4]
 8001890:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8001892:	fb02 f303 	mul.w	r3, r2, r3
 8001896:	68ba      	ldr	r2, [r7, #8]
 8001898:	4413      	add	r3, r2
 800189a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXBC, FDCAN_RXBC_RBSA, (StartAddress << FDCAN_RXBC_RBSA_Pos));
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 80018a4:	4b62      	ldr	r3, [pc, #392]	; (8001a30 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80018a6:	4013      	ands	r3, r2
 80018a8:	68ba      	ldr	r2, [r7, #8]
 80018aa:	0091      	lsls	r1, r2, #2
 80018ac:	687a      	ldr	r2, [r7, #4]
 80018ae:	6812      	ldr	r2, [r2, #0]
 80018b0:	430b      	orrs	r3, r1
 80018b2:	f8c2 30ac 	str.w	r3, [r2, #172]	; 0xac

  /* Tx event FIFO start address */
  StartAddress += (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize);
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80018ba:	687a      	ldr	r2, [r7, #4]
 80018bc:	6d52      	ldr	r2, [r2, #84]	; 0x54
 80018be:	fb02 f303 	mul.w	r3, r2, r3
 80018c2:	68ba      	ldr	r2, [r7, #8]
 80018c4:	4413      	add	r3, r2
 80018c6:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFSA, (StartAddress << FDCAN_TXEFC_EFSA_Pos));
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 80018d0:	4b57      	ldr	r3, [pc, #348]	; (8001a30 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80018d2:	4013      	ands	r3, r2
 80018d4:	68ba      	ldr	r2, [r7, #8]
 80018d6:	0091      	lsls	r1, r2, #2
 80018d8:	687a      	ldr	r2, [r7, #4]
 80018da:	6812      	ldr	r2, [r2, #0]
 80018dc:	430b      	orrs	r3, r1
 80018de:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

  /* Tx event FIFO elements number */
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFS, (hfdcan->Init.TxEventsNbr << FDCAN_TXEFC_EFS_Pos));
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80018ea:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018f2:	041a      	lsls	r2, r3, #16
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	430a      	orrs	r2, r1
 80018fa:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0

  /* Tx buffer list start address */
  StartAddress += (hfdcan->Init.TxEventsNbr * 2U);
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001902:	005b      	lsls	r3, r3, #1
 8001904:	68ba      	ldr	r2, [r7, #8]
 8001906:	4413      	add	r3, r2
 8001908:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TBSA, (StartAddress << FDCAN_TXBC_TBSA_Pos));
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8001912:	4b47      	ldr	r3, [pc, #284]	; (8001a30 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8001914:	4013      	ands	r3, r2
 8001916:	68ba      	ldr	r2, [r7, #8]
 8001918:	0091      	lsls	r1, r2, #2
 800191a:	687a      	ldr	r2, [r7, #4]
 800191c:	6812      	ldr	r2, [r2, #0]
 800191e:	430b      	orrs	r3, r1
 8001920:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0

  /* Dedicated Tx buffers number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_NDTB, (hfdcan->Init.TxBuffersNbr << FDCAN_TXBC_NDTB_Pos));
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800192c:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001934:	041a      	lsls	r2, r3, #16
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	430a      	orrs	r2, r1
 800193c:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Tx FIFO/queue elements number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TFQS, (hfdcan->Init.TxFifoQueueElmtsNbr << FDCAN_TXBC_TFQS_Pos));
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8001948:	f023 517c 	bic.w	r1, r3, #1056964608	; 0x3f000000
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001950:	061a      	lsls	r2, r3, #24
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	430a      	orrs	r2, r1
 8001958:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  hfdcan->msgRam.StandardFilterSA = SRAMCAN_BASE + (hfdcan->Init.MessageRAMOffset * 4U);
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001960:	4b34      	ldr	r3, [pc, #208]	; (8001a34 <FDCAN_CalcultateRamBlockAddresses+0x2b8>)
 8001962:	4413      	add	r3, r2
 8001964:	009a      	lsls	r2, r3, #2
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	66da      	str	r2, [r3, #108]	; 0x6c
  hfdcan->msgRam.ExtendedFilterSA = hfdcan->msgRam.StandardFilterSA + (hfdcan->Init.StdFiltersNbr * 4U);
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001972:	009b      	lsls	r3, r3, #2
 8001974:	441a      	add	r2, r3
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	671a      	str	r2, [r3, #112]	; 0x70
  hfdcan->msgRam.RxFIFO0SA = hfdcan->msgRam.ExtendedFilterSA + (hfdcan->Init.ExtFiltersNbr * 2U * 4U);
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001982:	00db      	lsls	r3, r3, #3
 8001984:	441a      	add	r2, r3
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	675a      	str	r2, [r3, #116]	; 0x74
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA + (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize * 4U);
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001992:	6879      	ldr	r1, [r7, #4]
 8001994:	6c49      	ldr	r1, [r1, #68]	; 0x44
 8001996:	fb01 f303 	mul.w	r3, r1, r3
 800199a:	009b      	lsls	r3, r3, #2
 800199c:	441a      	add	r2, r3
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	679a      	str	r2, [r3, #120]	; 0x78
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA + (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize * 4U);
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80019aa:	6879      	ldr	r1, [r7, #4]
 80019ac:	6cc9      	ldr	r1, [r1, #76]	; 0x4c
 80019ae:	fb01 f303 	mul.w	r3, r1, r3
 80019b2:	009b      	lsls	r3, r3, #2
 80019b4:	441a      	add	r2, r3
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	67da      	str	r2, [r3, #124]	; 0x7c
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA + (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize * 4U);
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80019c2:	6879      	ldr	r1, [r7, #4]
 80019c4:	6d49      	ldr	r1, [r1, #84]	; 0x54
 80019c6:	fb01 f303 	mul.w	r3, r1, r3
 80019ca:	009b      	lsls	r3, r3, #2
 80019cc:	441a      	add	r2, r3
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  hfdcan->msgRam.TxBufferSA = hfdcan->msgRam.TxEventFIFOSA + (hfdcan->Init.TxEventsNbr * 2U * 4U);
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019de:	00db      	lsls	r3, r3, #3
 80019e0:	441a      	add	r2, r3
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hfdcan->msgRam.TxFIFOQSA = hfdcan->msgRam.TxBufferSA + (hfdcan->Init.TxBuffersNbr * hfdcan->Init.TxElmtSize * 4U);
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80019f2:	6879      	ldr	r1, [r7, #4]
 80019f4:	6e89      	ldr	r1, [r1, #104]	; 0x68
 80019f6:	fb01 f303 	mul.w	r3, r1, r3
 80019fa:	009b      	lsls	r3, r3, #2
 80019fc:	441a      	add	r2, r3
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA + (hfdcan->Init.TxFifoQueueElmtsNbr * hfdcan->Init.TxElmtSize * 4U);
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001a0e:	6879      	ldr	r1, [r7, #4]
 8001a10:	6e89      	ldr	r1, [r1, #104]	; 0x68
 8001a12:	fb01 f303 	mul.w	r3, r1, r3
 8001a16:	009b      	lsls	r3, r3, #2
 8001a18:	441a      	add	r2, r3
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  if (hfdcan->msgRam.EndAddress > FDCAN_MESSAGE_RAM_END_ADDRESS) /* Last address of the Message RAM */
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a26:	4a04      	ldr	r2, [pc, #16]	; (8001a38 <FDCAN_CalcultateRamBlockAddresses+0x2bc>)
 8001a28:	4293      	cmp	r3, r2
 8001a2a:	d915      	bls.n	8001a58 <FDCAN_CalcultateRamBlockAddresses+0x2dc>
 8001a2c:	e006      	b.n	8001a3c <FDCAN_CalcultateRamBlockAddresses+0x2c0>
 8001a2e:	bf00      	nop
 8001a30:	ffff0003 	.word	0xffff0003
 8001a34:	10002b00 	.word	0x10002b00
 8001a38:	4000d3fc 	.word	0x4000d3fc
  {
    /* Update error code.
       Message RAM overflow */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001a42:	f043 0220 	orr.w	r2, r3, #32
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Change FDCAN state */
    hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	2203      	movs	r2, #3
 8001a50:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

    return HAL_ERROR;
 8001a54:	2301      	movs	r3, #1
 8001a56:	e010      	b.n	8001a7a <FDCAN_CalcultateRamBlockAddresses+0x2fe>
  }
  else
  {
    /* Flush the allocated Message RAM area */
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001a5c:	60fb      	str	r3, [r7, #12]
 8001a5e:	e005      	b.n	8001a6c <FDCAN_CalcultateRamBlockAddresses+0x2f0>
    {
      *(uint32_t *)(RAMcounter) = 0x00000000;
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	2200      	movs	r2, #0
 8001a64:	601a      	str	r2, [r3, #0]
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8001a66:	68fb      	ldr	r3, [r7, #12]
 8001a68:	3304      	adds	r3, #4
 8001a6a:	60fb      	str	r3, [r7, #12]
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a72:	68fa      	ldr	r2, [r7, #12]
 8001a74:	429a      	cmp	r2, r3
 8001a76:	d3f3      	bcc.n	8001a60 <FDCAN_CalcultateRamBlockAddresses+0x2e4>
    }
  }

  /* Return function status */
  return HAL_OK;
 8001a78:	2300      	movs	r3, #0
}
 8001a7a:	4618      	mov	r0, r3
 8001a7c:	3714      	adds	r7, #20
 8001a7e:	46bd      	mov	sp, r7
 8001a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a84:	4770      	bx	lr
 8001a86:	bf00      	nop

08001a88 <FDCAN_CopyMessageToRAM>:
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @param  BufferIndex index of the buffer to be configured.
  * @retval HAL status
 */
static void FDCAN_CopyMessageToRAM(FDCAN_HandleTypeDef *hfdcan, FDCAN_TxHeaderTypeDef *pTxHeader, uint8_t *pTxData, uint32_t BufferIndex)
{
 8001a88:	b480      	push	{r7}
 8001a8a:	b089      	sub	sp, #36	; 0x24
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	60f8      	str	r0, [r7, #12]
 8001a90:	60b9      	str	r1, [r7, #8]
 8001a92:	607a      	str	r2, [r7, #4]
 8001a94:	603b      	str	r3, [r7, #0]
  uint32_t TxElementW2;
  uint32_t *TxAddress;
  uint32_t ByteCounter;

  /* Build first word of Tx header element */
  if (pTxHeader->IdType == FDCAN_STANDARD_ID)
 8001a96:	68bb      	ldr	r3, [r7, #8]
 8001a98:	685b      	ldr	r3, [r3, #4]
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d10a      	bne.n	8001ab4 <FDCAN_CopyMessageToRAM+0x2c>
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8001a9e:	68bb      	ldr	r3, [r7, #8]
 8001aa0:	691a      	ldr	r2, [r3, #16]
                   FDCAN_STANDARD_ID |
                   pTxHeader->TxFrameType |
 8001aa2:	68bb      	ldr	r3, [r7, #8]
 8001aa4:	689b      	ldr	r3, [r3, #8]
                   FDCAN_STANDARD_ID |
 8001aa6:	431a      	orrs	r2, r3
                   (pTxHeader->Identifier << 18));
 8001aa8:	68bb      	ldr	r3, [r7, #8]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	049b      	lsls	r3, r3, #18
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8001aae:	4313      	orrs	r3, r2
 8001ab0:	61fb      	str	r3, [r7, #28]
 8001ab2:	e00a      	b.n	8001aca <FDCAN_CopyMessageToRAM+0x42>
  }
  else /* pTxHeader->IdType == FDCAN_EXTENDED_ID */
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8001ab4:	68bb      	ldr	r3, [r7, #8]
 8001ab6:	691a      	ldr	r2, [r3, #16]
                   FDCAN_EXTENDED_ID |
                   pTxHeader->TxFrameType |
 8001ab8:	68bb      	ldr	r3, [r7, #8]
 8001aba:	689b      	ldr	r3, [r3, #8]
                   FDCAN_EXTENDED_ID |
 8001abc:	431a      	orrs	r2, r3
                   pTxHeader->Identifier);
 8001abe:	68bb      	ldr	r3, [r7, #8]
 8001ac0:	681b      	ldr	r3, [r3, #0]
                   pTxHeader->TxFrameType |
 8001ac2:	4313      	orrs	r3, r2
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8001ac4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8001ac8:	61fb      	str	r3, [r7, #28]
  }

  /* Build second word of Tx header element */
  TxElementW2 = ((pTxHeader->MessageMarker << 24) |
 8001aca:	68bb      	ldr	r3, [r7, #8]
 8001acc:	6a1b      	ldr	r3, [r3, #32]
 8001ace:	061a      	lsls	r2, r3, #24
                 pTxHeader->TxEventFifoControl |
 8001ad0:	68bb      	ldr	r3, [r7, #8]
 8001ad2:	69db      	ldr	r3, [r3, #28]
  TxElementW2 = ((pTxHeader->MessageMarker << 24) |
 8001ad4:	431a      	orrs	r2, r3
                 pTxHeader->FDFormat |
 8001ad6:	68bb      	ldr	r3, [r7, #8]
 8001ad8:	699b      	ldr	r3, [r3, #24]
                 pTxHeader->TxEventFifoControl |
 8001ada:	431a      	orrs	r2, r3
                 pTxHeader->BitRateSwitch |
 8001adc:	68bb      	ldr	r3, [r7, #8]
 8001ade:	695b      	ldr	r3, [r3, #20]
                 pTxHeader->FDFormat |
 8001ae0:	431a      	orrs	r2, r3
                 pTxHeader->DataLength);
 8001ae2:	68bb      	ldr	r3, [r7, #8]
 8001ae4:	68db      	ldr	r3, [r3, #12]
  TxElementW2 = ((pTxHeader->MessageMarker << 24) |
 8001ae6:	4313      	orrs	r3, r2
 8001ae8:	613b      	str	r3, [r7, #16]

  /* Calculate Tx element address */
  TxAddress = (uint32_t *)(hfdcan->msgRam.TxBufferSA + (BufferIndex * hfdcan->Init.TxElmtSize * 4U));
 8001aea:	68fb      	ldr	r3, [r7, #12]
 8001aec:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8001af0:	68fb      	ldr	r3, [r7, #12]
 8001af2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001af4:	6839      	ldr	r1, [r7, #0]
 8001af6:	fb01 f303 	mul.w	r3, r1, r3
 8001afa:	009b      	lsls	r3, r3, #2
 8001afc:	4413      	add	r3, r2
 8001afe:	61bb      	str	r3, [r7, #24]

  /* Write Tx element header to the message RAM */
  *TxAddress = TxElementW1;
 8001b00:	69bb      	ldr	r3, [r7, #24]
 8001b02:	69fa      	ldr	r2, [r7, #28]
 8001b04:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8001b06:	69bb      	ldr	r3, [r7, #24]
 8001b08:	3304      	adds	r3, #4
 8001b0a:	61bb      	str	r3, [r7, #24]
  *TxAddress = TxElementW2;
 8001b0c:	69bb      	ldr	r3, [r7, #24]
 8001b0e:	693a      	ldr	r2, [r7, #16]
 8001b10:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8001b12:	69bb      	ldr	r3, [r7, #24]
 8001b14:	3304      	adds	r3, #4
 8001b16:	61bb      	str	r3, [r7, #24]

  /* Write Tx payload to the message RAM */
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength >> 16]; ByteCounter += 4U)
 8001b18:	2300      	movs	r3, #0
 8001b1a:	617b      	str	r3, [r7, #20]
 8001b1c:	e020      	b.n	8001b60 <FDCAN_CopyMessageToRAM+0xd8>
  {
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24) |
 8001b1e:	697b      	ldr	r3, [r7, #20]
 8001b20:	3303      	adds	r3, #3
 8001b22:	687a      	ldr	r2, [r7, #4]
 8001b24:	4413      	add	r3, r2
 8001b26:	781b      	ldrb	r3, [r3, #0]
 8001b28:	061a      	lsls	r2, r3, #24
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16) |
 8001b2a:	697b      	ldr	r3, [r7, #20]
 8001b2c:	3302      	adds	r3, #2
 8001b2e:	6879      	ldr	r1, [r7, #4]
 8001b30:	440b      	add	r3, r1
 8001b32:	781b      	ldrb	r3, [r3, #0]
 8001b34:	041b      	lsls	r3, r3, #16
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24) |
 8001b36:	431a      	orrs	r2, r3
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8) |
 8001b38:	697b      	ldr	r3, [r7, #20]
 8001b3a:	3301      	adds	r3, #1
 8001b3c:	6879      	ldr	r1, [r7, #4]
 8001b3e:	440b      	add	r3, r1
 8001b40:	781b      	ldrb	r3, [r3, #0]
 8001b42:	021b      	lsls	r3, r3, #8
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16) |
 8001b44:	4313      	orrs	r3, r2
                  (uint32_t)pTxData[ByteCounter]);
 8001b46:	6879      	ldr	r1, [r7, #4]
 8001b48:	697a      	ldr	r2, [r7, #20]
 8001b4a:	440a      	add	r2, r1
 8001b4c:	7812      	ldrb	r2, [r2, #0]
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8) |
 8001b4e:	431a      	orrs	r2, r3
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24) |
 8001b50:	69bb      	ldr	r3, [r7, #24]
 8001b52:	601a      	str	r2, [r3, #0]
    TxAddress++;
 8001b54:	69bb      	ldr	r3, [r7, #24]
 8001b56:	3304      	adds	r3, #4
 8001b58:	61bb      	str	r3, [r7, #24]
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength >> 16]; ByteCounter += 4U)
 8001b5a:	697b      	ldr	r3, [r7, #20]
 8001b5c:	3304      	adds	r3, #4
 8001b5e:	617b      	str	r3, [r7, #20]
 8001b60:	68bb      	ldr	r3, [r7, #8]
 8001b62:	68db      	ldr	r3, [r3, #12]
 8001b64:	0c1b      	lsrs	r3, r3, #16
 8001b66:	4a06      	ldr	r2, [pc, #24]	; (8001b80 <FDCAN_CopyMessageToRAM+0xf8>)
 8001b68:	5cd3      	ldrb	r3, [r2, r3]
 8001b6a:	461a      	mov	r2, r3
 8001b6c:	697b      	ldr	r3, [r7, #20]
 8001b6e:	4293      	cmp	r3, r2
 8001b70:	d3d5      	bcc.n	8001b1e <FDCAN_CopyMessageToRAM+0x96>
  }
}
 8001b72:	bf00      	nop
 8001b74:	bf00      	nop
 8001b76:	3724      	adds	r7, #36	; 0x24
 8001b78:	46bd      	mov	sp, r7
 8001b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b7e:	4770      	bx	lr
 8001b80:	08008f3c 	.word	0x08008f3c

08001b84 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001b84:	b480      	push	{r7}
 8001b86:	b089      	sub	sp, #36	; 0x24
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	6078      	str	r0, [r7, #4]
 8001b8c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001b8e:	2300      	movs	r3, #0
 8001b90:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8001b92:	4b89      	ldr	r3, [pc, #548]	; (8001db8 <HAL_GPIO_Init+0x234>)
 8001b94:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001b96:	e194      	b.n	8001ec2 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001b98:	683b      	ldr	r3, [r7, #0]
 8001b9a:	681a      	ldr	r2, [r3, #0]
 8001b9c:	2101      	movs	r1, #1
 8001b9e:	69fb      	ldr	r3, [r7, #28]
 8001ba0:	fa01 f303 	lsl.w	r3, r1, r3
 8001ba4:	4013      	ands	r3, r2
 8001ba6:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8001ba8:	693b      	ldr	r3, [r7, #16]
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	f000 8186 	beq.w	8001ebc <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001bb0:	683b      	ldr	r3, [r7, #0]
 8001bb2:	685b      	ldr	r3, [r3, #4]
 8001bb4:	2b01      	cmp	r3, #1
 8001bb6:	d00b      	beq.n	8001bd0 <HAL_GPIO_Init+0x4c>
 8001bb8:	683b      	ldr	r3, [r7, #0]
 8001bba:	685b      	ldr	r3, [r3, #4]
 8001bbc:	2b02      	cmp	r3, #2
 8001bbe:	d007      	beq.n	8001bd0 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001bc0:	683b      	ldr	r3, [r7, #0]
 8001bc2:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001bc4:	2b11      	cmp	r3, #17
 8001bc6:	d003      	beq.n	8001bd0 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001bc8:	683b      	ldr	r3, [r7, #0]
 8001bca:	685b      	ldr	r3, [r3, #4]
 8001bcc:	2b12      	cmp	r3, #18
 8001bce:	d130      	bne.n	8001c32 <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	689b      	ldr	r3, [r3, #8]
 8001bd4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001bd6:	69fb      	ldr	r3, [r7, #28]
 8001bd8:	005b      	lsls	r3, r3, #1
 8001bda:	2203      	movs	r2, #3
 8001bdc:	fa02 f303 	lsl.w	r3, r2, r3
 8001be0:	43db      	mvns	r3, r3
 8001be2:	69ba      	ldr	r2, [r7, #24]
 8001be4:	4013      	ands	r3, r2
 8001be6:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001be8:	683b      	ldr	r3, [r7, #0]
 8001bea:	68da      	ldr	r2, [r3, #12]
 8001bec:	69fb      	ldr	r3, [r7, #28]
 8001bee:	005b      	lsls	r3, r3, #1
 8001bf0:	fa02 f303 	lsl.w	r3, r2, r3
 8001bf4:	69ba      	ldr	r2, [r7, #24]
 8001bf6:	4313      	orrs	r3, r2
 8001bf8:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	69ba      	ldr	r2, [r7, #24]
 8001bfe:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	685b      	ldr	r3, [r3, #4]
 8001c04:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001c06:	2201      	movs	r2, #1
 8001c08:	69fb      	ldr	r3, [r7, #28]
 8001c0a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c0e:	43db      	mvns	r3, r3
 8001c10:	69ba      	ldr	r2, [r7, #24]
 8001c12:	4013      	ands	r3, r2
 8001c14:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001c16:	683b      	ldr	r3, [r7, #0]
 8001c18:	685b      	ldr	r3, [r3, #4]
 8001c1a:	091b      	lsrs	r3, r3, #4
 8001c1c:	f003 0201 	and.w	r2, r3, #1
 8001c20:	69fb      	ldr	r3, [r7, #28]
 8001c22:	fa02 f303 	lsl.w	r3, r2, r3
 8001c26:	69ba      	ldr	r2, [r7, #24]
 8001c28:	4313      	orrs	r3, r2
 8001c2a:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	69ba      	ldr	r2, [r7, #24]
 8001c30:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	68db      	ldr	r3, [r3, #12]
 8001c36:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001c38:	69fb      	ldr	r3, [r7, #28]
 8001c3a:	005b      	lsls	r3, r3, #1
 8001c3c:	2203      	movs	r2, #3
 8001c3e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c42:	43db      	mvns	r3, r3
 8001c44:	69ba      	ldr	r2, [r7, #24]
 8001c46:	4013      	ands	r3, r2
 8001c48:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001c4a:	683b      	ldr	r3, [r7, #0]
 8001c4c:	689a      	ldr	r2, [r3, #8]
 8001c4e:	69fb      	ldr	r3, [r7, #28]
 8001c50:	005b      	lsls	r3, r3, #1
 8001c52:	fa02 f303 	lsl.w	r3, r2, r3
 8001c56:	69ba      	ldr	r2, [r7, #24]
 8001c58:	4313      	orrs	r3, r2
 8001c5a:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	69ba      	ldr	r2, [r7, #24]
 8001c60:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001c62:	683b      	ldr	r3, [r7, #0]
 8001c64:	685b      	ldr	r3, [r3, #4]
 8001c66:	2b02      	cmp	r3, #2
 8001c68:	d003      	beq.n	8001c72 <HAL_GPIO_Init+0xee>
 8001c6a:	683b      	ldr	r3, [r7, #0]
 8001c6c:	685b      	ldr	r3, [r3, #4]
 8001c6e:	2b12      	cmp	r3, #18
 8001c70:	d123      	bne.n	8001cba <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001c72:	69fb      	ldr	r3, [r7, #28]
 8001c74:	08da      	lsrs	r2, r3, #3
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	3208      	adds	r2, #8
 8001c7a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001c7e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001c80:	69fb      	ldr	r3, [r7, #28]
 8001c82:	f003 0307 	and.w	r3, r3, #7
 8001c86:	009b      	lsls	r3, r3, #2
 8001c88:	220f      	movs	r2, #15
 8001c8a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c8e:	43db      	mvns	r3, r3
 8001c90:	69ba      	ldr	r2, [r7, #24]
 8001c92:	4013      	ands	r3, r2
 8001c94:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001c96:	683b      	ldr	r3, [r7, #0]
 8001c98:	691a      	ldr	r2, [r3, #16]
 8001c9a:	69fb      	ldr	r3, [r7, #28]
 8001c9c:	f003 0307 	and.w	r3, r3, #7
 8001ca0:	009b      	lsls	r3, r3, #2
 8001ca2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ca6:	69ba      	ldr	r2, [r7, #24]
 8001ca8:	4313      	orrs	r3, r2
 8001caa:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001cac:	69fb      	ldr	r3, [r7, #28]
 8001cae:	08da      	lsrs	r2, r3, #3
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	3208      	adds	r2, #8
 8001cb4:	69b9      	ldr	r1, [r7, #24]
 8001cb6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001cc0:	69fb      	ldr	r3, [r7, #28]
 8001cc2:	005b      	lsls	r3, r3, #1
 8001cc4:	2203      	movs	r2, #3
 8001cc6:	fa02 f303 	lsl.w	r3, r2, r3
 8001cca:	43db      	mvns	r3, r3
 8001ccc:	69ba      	ldr	r2, [r7, #24]
 8001cce:	4013      	ands	r3, r2
 8001cd0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001cd2:	683b      	ldr	r3, [r7, #0]
 8001cd4:	685b      	ldr	r3, [r3, #4]
 8001cd6:	f003 0203 	and.w	r2, r3, #3
 8001cda:	69fb      	ldr	r3, [r7, #28]
 8001cdc:	005b      	lsls	r3, r3, #1
 8001cde:	fa02 f303 	lsl.w	r3, r2, r3
 8001ce2:	69ba      	ldr	r2, [r7, #24]
 8001ce4:	4313      	orrs	r3, r2
 8001ce6:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	69ba      	ldr	r2, [r7, #24]
 8001cec:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001cee:	683b      	ldr	r3, [r7, #0]
 8001cf0:	685b      	ldr	r3, [r3, #4]
 8001cf2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	f000 80e0 	beq.w	8001ebc <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001cfc:	4b2f      	ldr	r3, [pc, #188]	; (8001dbc <HAL_GPIO_Init+0x238>)
 8001cfe:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001d02:	4a2e      	ldr	r2, [pc, #184]	; (8001dbc <HAL_GPIO_Init+0x238>)
 8001d04:	f043 0302 	orr.w	r3, r3, #2
 8001d08:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001d0c:	4b2b      	ldr	r3, [pc, #172]	; (8001dbc <HAL_GPIO_Init+0x238>)
 8001d0e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001d12:	f003 0302 	and.w	r3, r3, #2
 8001d16:	60fb      	str	r3, [r7, #12]
 8001d18:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001d1a:	4a29      	ldr	r2, [pc, #164]	; (8001dc0 <HAL_GPIO_Init+0x23c>)
 8001d1c:	69fb      	ldr	r3, [r7, #28]
 8001d1e:	089b      	lsrs	r3, r3, #2
 8001d20:	3302      	adds	r3, #2
 8001d22:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d26:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001d28:	69fb      	ldr	r3, [r7, #28]
 8001d2a:	f003 0303 	and.w	r3, r3, #3
 8001d2e:	009b      	lsls	r3, r3, #2
 8001d30:	220f      	movs	r2, #15
 8001d32:	fa02 f303 	lsl.w	r3, r2, r3
 8001d36:	43db      	mvns	r3, r3
 8001d38:	69ba      	ldr	r2, [r7, #24]
 8001d3a:	4013      	ands	r3, r2
 8001d3c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	4a20      	ldr	r2, [pc, #128]	; (8001dc4 <HAL_GPIO_Init+0x240>)
 8001d42:	4293      	cmp	r3, r2
 8001d44:	d052      	beq.n	8001dec <HAL_GPIO_Init+0x268>
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	4a1f      	ldr	r2, [pc, #124]	; (8001dc8 <HAL_GPIO_Init+0x244>)
 8001d4a:	4293      	cmp	r3, r2
 8001d4c:	d031      	beq.n	8001db2 <HAL_GPIO_Init+0x22e>
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	4a1e      	ldr	r2, [pc, #120]	; (8001dcc <HAL_GPIO_Init+0x248>)
 8001d52:	4293      	cmp	r3, r2
 8001d54:	d02b      	beq.n	8001dae <HAL_GPIO_Init+0x22a>
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	4a1d      	ldr	r2, [pc, #116]	; (8001dd0 <HAL_GPIO_Init+0x24c>)
 8001d5a:	4293      	cmp	r3, r2
 8001d5c:	d025      	beq.n	8001daa <HAL_GPIO_Init+0x226>
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	4a1c      	ldr	r2, [pc, #112]	; (8001dd4 <HAL_GPIO_Init+0x250>)
 8001d62:	4293      	cmp	r3, r2
 8001d64:	d01f      	beq.n	8001da6 <HAL_GPIO_Init+0x222>
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	4a1b      	ldr	r2, [pc, #108]	; (8001dd8 <HAL_GPIO_Init+0x254>)
 8001d6a:	4293      	cmp	r3, r2
 8001d6c:	d019      	beq.n	8001da2 <HAL_GPIO_Init+0x21e>
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	4a1a      	ldr	r2, [pc, #104]	; (8001ddc <HAL_GPIO_Init+0x258>)
 8001d72:	4293      	cmp	r3, r2
 8001d74:	d013      	beq.n	8001d9e <HAL_GPIO_Init+0x21a>
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	4a19      	ldr	r2, [pc, #100]	; (8001de0 <HAL_GPIO_Init+0x25c>)
 8001d7a:	4293      	cmp	r3, r2
 8001d7c:	d00d      	beq.n	8001d9a <HAL_GPIO_Init+0x216>
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	4a18      	ldr	r2, [pc, #96]	; (8001de4 <HAL_GPIO_Init+0x260>)
 8001d82:	4293      	cmp	r3, r2
 8001d84:	d007      	beq.n	8001d96 <HAL_GPIO_Init+0x212>
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	4a17      	ldr	r2, [pc, #92]	; (8001de8 <HAL_GPIO_Init+0x264>)
 8001d8a:	4293      	cmp	r3, r2
 8001d8c:	d101      	bne.n	8001d92 <HAL_GPIO_Init+0x20e>
 8001d8e:	2309      	movs	r3, #9
 8001d90:	e02d      	b.n	8001dee <HAL_GPIO_Init+0x26a>
 8001d92:	230a      	movs	r3, #10
 8001d94:	e02b      	b.n	8001dee <HAL_GPIO_Init+0x26a>
 8001d96:	2308      	movs	r3, #8
 8001d98:	e029      	b.n	8001dee <HAL_GPIO_Init+0x26a>
 8001d9a:	2307      	movs	r3, #7
 8001d9c:	e027      	b.n	8001dee <HAL_GPIO_Init+0x26a>
 8001d9e:	2306      	movs	r3, #6
 8001da0:	e025      	b.n	8001dee <HAL_GPIO_Init+0x26a>
 8001da2:	2305      	movs	r3, #5
 8001da4:	e023      	b.n	8001dee <HAL_GPIO_Init+0x26a>
 8001da6:	2304      	movs	r3, #4
 8001da8:	e021      	b.n	8001dee <HAL_GPIO_Init+0x26a>
 8001daa:	2303      	movs	r3, #3
 8001dac:	e01f      	b.n	8001dee <HAL_GPIO_Init+0x26a>
 8001dae:	2302      	movs	r3, #2
 8001db0:	e01d      	b.n	8001dee <HAL_GPIO_Init+0x26a>
 8001db2:	2301      	movs	r3, #1
 8001db4:	e01b      	b.n	8001dee <HAL_GPIO_Init+0x26a>
 8001db6:	bf00      	nop
 8001db8:	58000080 	.word	0x58000080
 8001dbc:	58024400 	.word	0x58024400
 8001dc0:	58000400 	.word	0x58000400
 8001dc4:	58020000 	.word	0x58020000
 8001dc8:	58020400 	.word	0x58020400
 8001dcc:	58020800 	.word	0x58020800
 8001dd0:	58020c00 	.word	0x58020c00
 8001dd4:	58021000 	.word	0x58021000
 8001dd8:	58021400 	.word	0x58021400
 8001ddc:	58021800 	.word	0x58021800
 8001de0:	58021c00 	.word	0x58021c00
 8001de4:	58022000 	.word	0x58022000
 8001de8:	58022400 	.word	0x58022400
 8001dec:	2300      	movs	r3, #0
 8001dee:	69fa      	ldr	r2, [r7, #28]
 8001df0:	f002 0203 	and.w	r2, r2, #3
 8001df4:	0092      	lsls	r2, r2, #2
 8001df6:	4093      	lsls	r3, r2
 8001df8:	69ba      	ldr	r2, [r7, #24]
 8001dfa:	4313      	orrs	r3, r2
 8001dfc:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001dfe:	4938      	ldr	r1, [pc, #224]	; (8001ee0 <HAL_GPIO_Init+0x35c>)
 8001e00:	69fb      	ldr	r3, [r7, #28]
 8001e02:	089b      	lsrs	r3, r3, #2
 8001e04:	3302      	adds	r3, #2
 8001e06:	69ba      	ldr	r2, [r7, #24]
 8001e08:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8001e0c:	697b      	ldr	r3, [r7, #20]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001e12:	693b      	ldr	r3, [r7, #16]
 8001e14:	43db      	mvns	r3, r3
 8001e16:	69ba      	ldr	r2, [r7, #24]
 8001e18:	4013      	ands	r3, r2
 8001e1a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001e1c:	683b      	ldr	r3, [r7, #0]
 8001e1e:	685b      	ldr	r3, [r3, #4]
 8001e20:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d003      	beq.n	8001e30 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001e28:	69ba      	ldr	r2, [r7, #24]
 8001e2a:	693b      	ldr	r3, [r7, #16]
 8001e2c:	4313      	orrs	r3, r2
 8001e2e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8001e30:	697b      	ldr	r3, [r7, #20]
 8001e32:	69ba      	ldr	r2, [r7, #24]
 8001e34:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 8001e36:	697b      	ldr	r3, [r7, #20]
 8001e38:	685b      	ldr	r3, [r3, #4]
 8001e3a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001e3c:	693b      	ldr	r3, [r7, #16]
 8001e3e:	43db      	mvns	r3, r3
 8001e40:	69ba      	ldr	r2, [r7, #24]
 8001e42:	4013      	ands	r3, r2
 8001e44:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001e46:	683b      	ldr	r3, [r7, #0]
 8001e48:	685b      	ldr	r3, [r3, #4]
 8001e4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d003      	beq.n	8001e5a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001e52:	69ba      	ldr	r2, [r7, #24]
 8001e54:	693b      	ldr	r3, [r7, #16]
 8001e56:	4313      	orrs	r3, r2
 8001e58:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8001e5a:	697b      	ldr	r3, [r7, #20]
 8001e5c:	69ba      	ldr	r2, [r7, #24]
 8001e5e:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001e60:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001e68:	693b      	ldr	r3, [r7, #16]
 8001e6a:	43db      	mvns	r3, r3
 8001e6c:	69ba      	ldr	r2, [r7, #24]
 8001e6e:	4013      	ands	r3, r2
 8001e70:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001e72:	683b      	ldr	r3, [r7, #0]
 8001e74:	685b      	ldr	r3, [r3, #4]
 8001e76:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d003      	beq.n	8001e86 <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 8001e7e:	69ba      	ldr	r2, [r7, #24]
 8001e80:	693b      	ldr	r3, [r7, #16]
 8001e82:	4313      	orrs	r3, r2
 8001e84:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8001e86:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001e8a:	69bb      	ldr	r3, [r7, #24]
 8001e8c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8001e8e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e92:	685b      	ldr	r3, [r3, #4]
 8001e94:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001e96:	693b      	ldr	r3, [r7, #16]
 8001e98:	43db      	mvns	r3, r3
 8001e9a:	69ba      	ldr	r2, [r7, #24]
 8001e9c:	4013      	ands	r3, r2
 8001e9e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001ea0:	683b      	ldr	r3, [r7, #0]
 8001ea2:	685b      	ldr	r3, [r3, #4]
 8001ea4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d003      	beq.n	8001eb4 <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 8001eac:	69ba      	ldr	r2, [r7, #24]
 8001eae:	693b      	ldr	r3, [r7, #16]
 8001eb0:	4313      	orrs	r3, r2
 8001eb2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8001eb4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001eb8:	69bb      	ldr	r3, [r7, #24]
 8001eba:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 8001ebc:	69fb      	ldr	r3, [r7, #28]
 8001ebe:	3301      	adds	r3, #1
 8001ec0:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001ec2:	683b      	ldr	r3, [r7, #0]
 8001ec4:	681a      	ldr	r2, [r3, #0]
 8001ec6:	69fb      	ldr	r3, [r7, #28]
 8001ec8:	fa22 f303 	lsr.w	r3, r2, r3
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	f47f ae63 	bne.w	8001b98 <HAL_GPIO_Init+0x14>
  }
}
 8001ed2:	bf00      	nop
 8001ed4:	bf00      	nop
 8001ed6:	3724      	adds	r7, #36	; 0x24
 8001ed8:	46bd      	mov	sp, r7
 8001eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ede:	4770      	bx	lr
 8001ee0:	58000400 	.word	0x58000400

08001ee4 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001ee4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001ee6:	b08f      	sub	sp, #60	; 0x3c
 8001ee8:	af0a      	add	r7, sp, #40	; 0x28
 8001eea:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d101      	bne.n	8001ef6 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001ef2:	2301      	movs	r3, #1
 8001ef4:	e116      	b.n	8002124 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8001f02:	b2db      	uxtb	r3, r3
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d106      	bne.n	8001f16 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	2200      	movs	r2, #0
 8001f0c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001f10:	6878      	ldr	r0, [r7, #4]
 8001f12:	f006 fc2f 	bl	8008774 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	2203      	movs	r2, #3
 8001f1a:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001f1e:	68bb      	ldr	r3, [r7, #8]
 8001f20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d102      	bne.n	8001f30 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	2200      	movs	r2, #0
 8001f2e:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	4618      	mov	r0, r3
 8001f36:	f003 fb34 	bl	80055a2 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	603b      	str	r3, [r7, #0]
 8001f40:	687e      	ldr	r6, [r7, #4]
 8001f42:	466d      	mov	r5, sp
 8001f44:	f106 0410 	add.w	r4, r6, #16
 8001f48:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001f4a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001f4c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001f4e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001f50:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001f54:	e885 0003 	stmia.w	r5, {r0, r1}
 8001f58:	1d33      	adds	r3, r6, #4
 8001f5a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001f5c:	6838      	ldr	r0, [r7, #0]
 8001f5e:	f003 f9ff 	bl	8005360 <USB_CoreInit>
 8001f62:	4603      	mov	r3, r0
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d005      	beq.n	8001f74 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	2202      	movs	r2, #2
 8001f6c:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8001f70:	2301      	movs	r3, #1
 8001f72:	e0d7      	b.n	8002124 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	2100      	movs	r1, #0
 8001f7a:	4618      	mov	r0, r3
 8001f7c:	f003 fb22 	bl	80055c4 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001f80:	2300      	movs	r3, #0
 8001f82:	73fb      	strb	r3, [r7, #15]
 8001f84:	e04a      	b.n	800201c <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001f86:	7bfa      	ldrb	r2, [r7, #15]
 8001f88:	6879      	ldr	r1, [r7, #4]
 8001f8a:	4613      	mov	r3, r2
 8001f8c:	00db      	lsls	r3, r3, #3
 8001f8e:	1a9b      	subs	r3, r3, r2
 8001f90:	009b      	lsls	r3, r3, #2
 8001f92:	440b      	add	r3, r1
 8001f94:	333d      	adds	r3, #61	; 0x3d
 8001f96:	2201      	movs	r2, #1
 8001f98:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001f9a:	7bfa      	ldrb	r2, [r7, #15]
 8001f9c:	6879      	ldr	r1, [r7, #4]
 8001f9e:	4613      	mov	r3, r2
 8001fa0:	00db      	lsls	r3, r3, #3
 8001fa2:	1a9b      	subs	r3, r3, r2
 8001fa4:	009b      	lsls	r3, r3, #2
 8001fa6:	440b      	add	r3, r1
 8001fa8:	333c      	adds	r3, #60	; 0x3c
 8001faa:	7bfa      	ldrb	r2, [r7, #15]
 8001fac:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001fae:	7bfa      	ldrb	r2, [r7, #15]
 8001fb0:	7bfb      	ldrb	r3, [r7, #15]
 8001fb2:	b298      	uxth	r0, r3
 8001fb4:	6879      	ldr	r1, [r7, #4]
 8001fb6:	4613      	mov	r3, r2
 8001fb8:	00db      	lsls	r3, r3, #3
 8001fba:	1a9b      	subs	r3, r3, r2
 8001fbc:	009b      	lsls	r3, r3, #2
 8001fbe:	440b      	add	r3, r1
 8001fc0:	3342      	adds	r3, #66	; 0x42
 8001fc2:	4602      	mov	r2, r0
 8001fc4:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001fc6:	7bfa      	ldrb	r2, [r7, #15]
 8001fc8:	6879      	ldr	r1, [r7, #4]
 8001fca:	4613      	mov	r3, r2
 8001fcc:	00db      	lsls	r3, r3, #3
 8001fce:	1a9b      	subs	r3, r3, r2
 8001fd0:	009b      	lsls	r3, r3, #2
 8001fd2:	440b      	add	r3, r1
 8001fd4:	333f      	adds	r3, #63	; 0x3f
 8001fd6:	2200      	movs	r2, #0
 8001fd8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001fda:	7bfa      	ldrb	r2, [r7, #15]
 8001fdc:	6879      	ldr	r1, [r7, #4]
 8001fde:	4613      	mov	r3, r2
 8001fe0:	00db      	lsls	r3, r3, #3
 8001fe2:	1a9b      	subs	r3, r3, r2
 8001fe4:	009b      	lsls	r3, r3, #2
 8001fe6:	440b      	add	r3, r1
 8001fe8:	3344      	adds	r3, #68	; 0x44
 8001fea:	2200      	movs	r2, #0
 8001fec:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001fee:	7bfa      	ldrb	r2, [r7, #15]
 8001ff0:	6879      	ldr	r1, [r7, #4]
 8001ff2:	4613      	mov	r3, r2
 8001ff4:	00db      	lsls	r3, r3, #3
 8001ff6:	1a9b      	subs	r3, r3, r2
 8001ff8:	009b      	lsls	r3, r3, #2
 8001ffa:	440b      	add	r3, r1
 8001ffc:	3348      	adds	r3, #72	; 0x48
 8001ffe:	2200      	movs	r2, #0
 8002000:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002002:	7bfa      	ldrb	r2, [r7, #15]
 8002004:	6879      	ldr	r1, [r7, #4]
 8002006:	4613      	mov	r3, r2
 8002008:	00db      	lsls	r3, r3, #3
 800200a:	1a9b      	subs	r3, r3, r2
 800200c:	009b      	lsls	r3, r3, #2
 800200e:	440b      	add	r3, r1
 8002010:	3350      	adds	r3, #80	; 0x50
 8002012:	2200      	movs	r2, #0
 8002014:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002016:	7bfb      	ldrb	r3, [r7, #15]
 8002018:	3301      	adds	r3, #1
 800201a:	73fb      	strb	r3, [r7, #15]
 800201c:	7bfa      	ldrb	r2, [r7, #15]
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	685b      	ldr	r3, [r3, #4]
 8002022:	429a      	cmp	r2, r3
 8002024:	d3af      	bcc.n	8001f86 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002026:	2300      	movs	r3, #0
 8002028:	73fb      	strb	r3, [r7, #15]
 800202a:	e044      	b.n	80020b6 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800202c:	7bfa      	ldrb	r2, [r7, #15]
 800202e:	6879      	ldr	r1, [r7, #4]
 8002030:	4613      	mov	r3, r2
 8002032:	00db      	lsls	r3, r3, #3
 8002034:	1a9b      	subs	r3, r3, r2
 8002036:	009b      	lsls	r3, r3, #2
 8002038:	440b      	add	r3, r1
 800203a:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 800203e:	2200      	movs	r2, #0
 8002040:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002042:	7bfa      	ldrb	r2, [r7, #15]
 8002044:	6879      	ldr	r1, [r7, #4]
 8002046:	4613      	mov	r3, r2
 8002048:	00db      	lsls	r3, r3, #3
 800204a:	1a9b      	subs	r3, r3, r2
 800204c:	009b      	lsls	r3, r3, #2
 800204e:	440b      	add	r3, r1
 8002050:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8002054:	7bfa      	ldrb	r2, [r7, #15]
 8002056:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002058:	7bfa      	ldrb	r2, [r7, #15]
 800205a:	6879      	ldr	r1, [r7, #4]
 800205c:	4613      	mov	r3, r2
 800205e:	00db      	lsls	r3, r3, #3
 8002060:	1a9b      	subs	r3, r3, r2
 8002062:	009b      	lsls	r3, r3, #2
 8002064:	440b      	add	r3, r1
 8002066:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800206a:	2200      	movs	r2, #0
 800206c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800206e:	7bfa      	ldrb	r2, [r7, #15]
 8002070:	6879      	ldr	r1, [r7, #4]
 8002072:	4613      	mov	r3, r2
 8002074:	00db      	lsls	r3, r3, #3
 8002076:	1a9b      	subs	r3, r3, r2
 8002078:	009b      	lsls	r3, r3, #2
 800207a:	440b      	add	r3, r1
 800207c:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8002080:	2200      	movs	r2, #0
 8002082:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002084:	7bfa      	ldrb	r2, [r7, #15]
 8002086:	6879      	ldr	r1, [r7, #4]
 8002088:	4613      	mov	r3, r2
 800208a:	00db      	lsls	r3, r3, #3
 800208c:	1a9b      	subs	r3, r3, r2
 800208e:	009b      	lsls	r3, r3, #2
 8002090:	440b      	add	r3, r1
 8002092:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002096:	2200      	movs	r2, #0
 8002098:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800209a:	7bfa      	ldrb	r2, [r7, #15]
 800209c:	6879      	ldr	r1, [r7, #4]
 800209e:	4613      	mov	r3, r2
 80020a0:	00db      	lsls	r3, r3, #3
 80020a2:	1a9b      	subs	r3, r3, r2
 80020a4:	009b      	lsls	r3, r3, #2
 80020a6:	440b      	add	r3, r1
 80020a8:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80020ac:	2200      	movs	r2, #0
 80020ae:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80020b0:	7bfb      	ldrb	r3, [r7, #15]
 80020b2:	3301      	adds	r3, #1
 80020b4:	73fb      	strb	r3, [r7, #15]
 80020b6:	7bfa      	ldrb	r2, [r7, #15]
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	685b      	ldr	r3, [r3, #4]
 80020bc:	429a      	cmp	r2, r3
 80020be:	d3b5      	bcc.n	800202c <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	603b      	str	r3, [r7, #0]
 80020c6:	687e      	ldr	r6, [r7, #4]
 80020c8:	466d      	mov	r5, sp
 80020ca:	f106 0410 	add.w	r4, r6, #16
 80020ce:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80020d0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80020d2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80020d4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80020d6:	e894 0003 	ldmia.w	r4, {r0, r1}
 80020da:	e885 0003 	stmia.w	r5, {r0, r1}
 80020de:	1d33      	adds	r3, r6, #4
 80020e0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80020e2:	6838      	ldr	r0, [r7, #0]
 80020e4:	f003 fa98 	bl	8005618 <USB_DevInit>
 80020e8:	4603      	mov	r3, r0
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d005      	beq.n	80020fa <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	2202      	movs	r2, #2
 80020f2:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80020f6:	2301      	movs	r3, #1
 80020f8:	e014      	b.n	8002124 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	2200      	movs	r2, #0
 80020fe:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	2201      	movs	r2, #1
 8002106:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800210e:	2b01      	cmp	r3, #1
 8002110:	d102      	bne.n	8002118 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002112:	6878      	ldr	r0, [r7, #4]
 8002114:	f001 f892 	bl	800323c <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	4618      	mov	r0, r3
 800211e:	f004 fb18 	bl	8006752 <USB_DevDisconnect>

  return HAL_OK;
 8002122:	2300      	movs	r3, #0
}
 8002124:	4618      	mov	r0, r3
 8002126:	3714      	adds	r7, #20
 8002128:	46bd      	mov	sp, r7
 800212a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800212c <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800212c:	b580      	push	{r7, lr}
 800212e:	b084      	sub	sp, #16
 8002130:	af00      	add	r7, sp, #0
 8002132:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002140:	2b01      	cmp	r3, #1
 8002142:	d101      	bne.n	8002148 <HAL_PCD_Start+0x1c>
 8002144:	2302      	movs	r3, #2
 8002146:	e020      	b.n	800218a <HAL_PCD_Start+0x5e>
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	2201      	movs	r2, #1
 800214c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002154:	2b01      	cmp	r3, #1
 8002156:	d109      	bne.n	800216c <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800215c:	2b01      	cmp	r3, #1
 800215e:	d005      	beq.n	800216c <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002164:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	4618      	mov	r0, r3
 8002172:	f003 fa05 	bl	8005580 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	4618      	mov	r0, r3
 800217c:	f004 fac8 	bl	8006710 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	2200      	movs	r2, #0
 8002184:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8002188:	2300      	movs	r3, #0
}
 800218a:	4618      	mov	r0, r3
 800218c:	3710      	adds	r7, #16
 800218e:	46bd      	mov	sp, r7
 8002190:	bd80      	pop	{r7, pc}

08002192 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002192:	b590      	push	{r4, r7, lr}
 8002194:	b08d      	sub	sp, #52	; 0x34
 8002196:	af00      	add	r7, sp, #0
 8002198:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80021a0:	6a3b      	ldr	r3, [r7, #32]
 80021a2:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	4618      	mov	r0, r3
 80021aa:	f004 fb86 	bl	80068ba <USB_GetMode>
 80021ae:	4603      	mov	r3, r0
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	f040 83ca 	bne.w	800294a <HAL_PCD_IRQHandler+0x7b8>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	4618      	mov	r0, r3
 80021bc:	f004 faea 	bl	8006794 <USB_ReadInterrupts>
 80021c0:	4603      	mov	r3, r0
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	f000 83c0 	beq.w	8002948 <HAL_PCD_IRQHandler+0x7b6>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	4618      	mov	r0, r3
 80021ce:	f004 fae1 	bl	8006794 <USB_ReadInterrupts>
 80021d2:	4603      	mov	r3, r0
 80021d4:	f003 0302 	and.w	r3, r3, #2
 80021d8:	2b02      	cmp	r3, #2
 80021da:	d107      	bne.n	80021ec <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	695a      	ldr	r2, [r3, #20]
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	f002 0202 	and.w	r2, r2, #2
 80021ea:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	4618      	mov	r0, r3
 80021f2:	f004 facf 	bl	8006794 <USB_ReadInterrupts>
 80021f6:	4603      	mov	r3, r0
 80021f8:	f003 0310 	and.w	r3, r3, #16
 80021fc:	2b10      	cmp	r3, #16
 80021fe:	d161      	bne.n	80022c4 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	699a      	ldr	r2, [r3, #24]
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	f022 0210 	bic.w	r2, r2, #16
 800220e:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8002210:	6a3b      	ldr	r3, [r7, #32]
 8002212:	6a1b      	ldr	r3, [r3, #32]
 8002214:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8002216:	69bb      	ldr	r3, [r7, #24]
 8002218:	f003 020f 	and.w	r2, r3, #15
 800221c:	4613      	mov	r3, r2
 800221e:	00db      	lsls	r3, r3, #3
 8002220:	1a9b      	subs	r3, r3, r2
 8002222:	009b      	lsls	r3, r3, #2
 8002224:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002228:	687a      	ldr	r2, [r7, #4]
 800222a:	4413      	add	r3, r2
 800222c:	3304      	adds	r3, #4
 800222e:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8002230:	69bb      	ldr	r3, [r7, #24]
 8002232:	0c5b      	lsrs	r3, r3, #17
 8002234:	f003 030f 	and.w	r3, r3, #15
 8002238:	2b02      	cmp	r3, #2
 800223a:	d124      	bne.n	8002286 <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 800223c:	69ba      	ldr	r2, [r7, #24]
 800223e:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8002242:	4013      	ands	r3, r2
 8002244:	2b00      	cmp	r3, #0
 8002246:	d035      	beq.n	80022b4 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002248:	697b      	ldr	r3, [r7, #20]
 800224a:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 800224c:	69bb      	ldr	r3, [r7, #24]
 800224e:	091b      	lsrs	r3, r3, #4
 8002250:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002252:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002256:	b29b      	uxth	r3, r3
 8002258:	461a      	mov	r2, r3
 800225a:	6a38      	ldr	r0, [r7, #32]
 800225c:	f004 f906 	bl	800646c <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002260:	697b      	ldr	r3, [r7, #20]
 8002262:	68da      	ldr	r2, [r3, #12]
 8002264:	69bb      	ldr	r3, [r7, #24]
 8002266:	091b      	lsrs	r3, r3, #4
 8002268:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800226c:	441a      	add	r2, r3
 800226e:	697b      	ldr	r3, [r7, #20]
 8002270:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002272:	697b      	ldr	r3, [r7, #20]
 8002274:	699a      	ldr	r2, [r3, #24]
 8002276:	69bb      	ldr	r3, [r7, #24]
 8002278:	091b      	lsrs	r3, r3, #4
 800227a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800227e:	441a      	add	r2, r3
 8002280:	697b      	ldr	r3, [r7, #20]
 8002282:	619a      	str	r2, [r3, #24]
 8002284:	e016      	b.n	80022b4 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8002286:	69bb      	ldr	r3, [r7, #24]
 8002288:	0c5b      	lsrs	r3, r3, #17
 800228a:	f003 030f 	and.w	r3, r3, #15
 800228e:	2b06      	cmp	r3, #6
 8002290:	d110      	bne.n	80022b4 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002298:	2208      	movs	r2, #8
 800229a:	4619      	mov	r1, r3
 800229c:	6a38      	ldr	r0, [r7, #32]
 800229e:	f004 f8e5 	bl	800646c <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80022a2:	697b      	ldr	r3, [r7, #20]
 80022a4:	699a      	ldr	r2, [r3, #24]
 80022a6:	69bb      	ldr	r3, [r7, #24]
 80022a8:	091b      	lsrs	r3, r3, #4
 80022aa:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80022ae:	441a      	add	r2, r3
 80022b0:	697b      	ldr	r3, [r7, #20]
 80022b2:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	699a      	ldr	r2, [r3, #24]
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	f042 0210 	orr.w	r2, r2, #16
 80022c2:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	4618      	mov	r0, r3
 80022ca:	f004 fa63 	bl	8006794 <USB_ReadInterrupts>
 80022ce:	4603      	mov	r3, r0
 80022d0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80022d4:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80022d8:	d16e      	bne.n	80023b8 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 80022da:	2300      	movs	r3, #0
 80022dc:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	4618      	mov	r0, r3
 80022e4:	f004 fa69 	bl	80067ba <USB_ReadDevAllOutEpInterrupt>
 80022e8:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 80022ea:	e062      	b.n	80023b2 <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 80022ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022ee:	f003 0301 	and.w	r3, r3, #1
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d057      	beq.n	80023a6 <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80022fc:	b2d2      	uxtb	r2, r2
 80022fe:	4611      	mov	r1, r2
 8002300:	4618      	mov	r0, r3
 8002302:	f004 fa8e 	bl	8006822 <USB_ReadDevOutEPInterrupt>
 8002306:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8002308:	693b      	ldr	r3, [r7, #16]
 800230a:	f003 0301 	and.w	r3, r3, #1
 800230e:	2b00      	cmp	r3, #0
 8002310:	d00c      	beq.n	800232c <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8002312:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002314:	015a      	lsls	r2, r3, #5
 8002316:	69fb      	ldr	r3, [r7, #28]
 8002318:	4413      	add	r3, r2
 800231a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800231e:	461a      	mov	r2, r3
 8002320:	2301      	movs	r3, #1
 8002322:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8002324:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002326:	6878      	ldr	r0, [r7, #4]
 8002328:	f000 fdde 	bl	8002ee8 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800232c:	693b      	ldr	r3, [r7, #16]
 800232e:	f003 0308 	and.w	r3, r3, #8
 8002332:	2b00      	cmp	r3, #0
 8002334:	d00c      	beq.n	8002350 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8002336:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002338:	015a      	lsls	r2, r3, #5
 800233a:	69fb      	ldr	r3, [r7, #28]
 800233c:	4413      	add	r3, r2
 800233e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002342:	461a      	mov	r2, r3
 8002344:	2308      	movs	r3, #8
 8002346:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8002348:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800234a:	6878      	ldr	r0, [r7, #4]
 800234c:	f000 fed8 	bl	8003100 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8002350:	693b      	ldr	r3, [r7, #16]
 8002352:	f003 0310 	and.w	r3, r3, #16
 8002356:	2b00      	cmp	r3, #0
 8002358:	d008      	beq.n	800236c <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800235a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800235c:	015a      	lsls	r2, r3, #5
 800235e:	69fb      	ldr	r3, [r7, #28]
 8002360:	4413      	add	r3, r2
 8002362:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002366:	461a      	mov	r2, r3
 8002368:	2310      	movs	r3, #16
 800236a:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800236c:	693b      	ldr	r3, [r7, #16]
 800236e:	f003 0320 	and.w	r3, r3, #32
 8002372:	2b00      	cmp	r3, #0
 8002374:	d008      	beq.n	8002388 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002376:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002378:	015a      	lsls	r2, r3, #5
 800237a:	69fb      	ldr	r3, [r7, #28]
 800237c:	4413      	add	r3, r2
 800237e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002382:	461a      	mov	r2, r3
 8002384:	2320      	movs	r3, #32
 8002386:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8002388:	693b      	ldr	r3, [r7, #16]
 800238a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800238e:	2b00      	cmp	r3, #0
 8002390:	d009      	beq.n	80023a6 <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8002392:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002394:	015a      	lsls	r2, r3, #5
 8002396:	69fb      	ldr	r3, [r7, #28]
 8002398:	4413      	add	r3, r2
 800239a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800239e:	461a      	mov	r2, r3
 80023a0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80023a4:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80023a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023a8:	3301      	adds	r3, #1
 80023aa:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80023ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023ae:	085b      	lsrs	r3, r3, #1
 80023b0:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80023b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d199      	bne.n	80022ec <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	4618      	mov	r0, r3
 80023be:	f004 f9e9 	bl	8006794 <USB_ReadInterrupts>
 80023c2:	4603      	mov	r3, r0
 80023c4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80023c8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80023cc:	f040 80c0 	bne.w	8002550 <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	4618      	mov	r0, r3
 80023d6:	f004 fa0a 	bl	80067ee <USB_ReadDevAllInEpInterrupt>
 80023da:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 80023dc:	2300      	movs	r3, #0
 80023de:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 80023e0:	e0b2      	b.n	8002548 <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80023e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023e4:	f003 0301 	and.w	r3, r3, #1
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	f000 80a7 	beq.w	800253c <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80023f4:	b2d2      	uxtb	r2, r2
 80023f6:	4611      	mov	r1, r2
 80023f8:	4618      	mov	r0, r3
 80023fa:	f004 fa30 	bl	800685e <USB_ReadDevInEPInterrupt>
 80023fe:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8002400:	693b      	ldr	r3, [r7, #16]
 8002402:	f003 0301 	and.w	r3, r3, #1
 8002406:	2b00      	cmp	r3, #0
 8002408:	d057      	beq.n	80024ba <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800240a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800240c:	f003 030f 	and.w	r3, r3, #15
 8002410:	2201      	movs	r2, #1
 8002412:	fa02 f303 	lsl.w	r3, r2, r3
 8002416:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002418:	69fb      	ldr	r3, [r7, #28]
 800241a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800241e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	43db      	mvns	r3, r3
 8002424:	69f9      	ldr	r1, [r7, #28]
 8002426:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800242a:	4013      	ands	r3, r2
 800242c:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800242e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002430:	015a      	lsls	r2, r3, #5
 8002432:	69fb      	ldr	r3, [r7, #28]
 8002434:	4413      	add	r3, r2
 8002436:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800243a:	461a      	mov	r2, r3
 800243c:	2301      	movs	r3, #1
 800243e:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	691b      	ldr	r3, [r3, #16]
 8002444:	2b01      	cmp	r3, #1
 8002446:	d132      	bne.n	80024ae <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8002448:	6879      	ldr	r1, [r7, #4]
 800244a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800244c:	4613      	mov	r3, r2
 800244e:	00db      	lsls	r3, r3, #3
 8002450:	1a9b      	subs	r3, r3, r2
 8002452:	009b      	lsls	r3, r3, #2
 8002454:	440b      	add	r3, r1
 8002456:	3348      	adds	r3, #72	; 0x48
 8002458:	6819      	ldr	r1, [r3, #0]
 800245a:	6878      	ldr	r0, [r7, #4]
 800245c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800245e:	4613      	mov	r3, r2
 8002460:	00db      	lsls	r3, r3, #3
 8002462:	1a9b      	subs	r3, r3, r2
 8002464:	009b      	lsls	r3, r3, #2
 8002466:	4403      	add	r3, r0
 8002468:	3344      	adds	r3, #68	; 0x44
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	4419      	add	r1, r3
 800246e:	6878      	ldr	r0, [r7, #4]
 8002470:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002472:	4613      	mov	r3, r2
 8002474:	00db      	lsls	r3, r3, #3
 8002476:	1a9b      	subs	r3, r3, r2
 8002478:	009b      	lsls	r3, r3, #2
 800247a:	4403      	add	r3, r0
 800247c:	3348      	adds	r3, #72	; 0x48
 800247e:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8002480:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002482:	2b00      	cmp	r3, #0
 8002484:	d113      	bne.n	80024ae <HAL_PCD_IRQHandler+0x31c>
 8002486:	6879      	ldr	r1, [r7, #4]
 8002488:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800248a:	4613      	mov	r3, r2
 800248c:	00db      	lsls	r3, r3, #3
 800248e:	1a9b      	subs	r3, r3, r2
 8002490:	009b      	lsls	r3, r3, #2
 8002492:	440b      	add	r3, r1
 8002494:	3350      	adds	r3, #80	; 0x50
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	2b00      	cmp	r3, #0
 800249a:	d108      	bne.n	80024ae <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	6818      	ldr	r0, [r3, #0]
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80024a6:	461a      	mov	r2, r3
 80024a8:	2101      	movs	r1, #1
 80024aa:	f004 fa39 	bl	8006920 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80024ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024b0:	b2db      	uxtb	r3, r3
 80024b2:	4619      	mov	r1, r3
 80024b4:	6878      	ldr	r0, [r7, #4]
 80024b6:	f006 fa0c 	bl	80088d2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80024ba:	693b      	ldr	r3, [r7, #16]
 80024bc:	f003 0308 	and.w	r3, r3, #8
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d008      	beq.n	80024d6 <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80024c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024c6:	015a      	lsls	r2, r3, #5
 80024c8:	69fb      	ldr	r3, [r7, #28]
 80024ca:	4413      	add	r3, r2
 80024cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80024d0:	461a      	mov	r2, r3
 80024d2:	2308      	movs	r3, #8
 80024d4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80024d6:	693b      	ldr	r3, [r7, #16]
 80024d8:	f003 0310 	and.w	r3, r3, #16
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d008      	beq.n	80024f2 <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80024e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024e2:	015a      	lsls	r2, r3, #5
 80024e4:	69fb      	ldr	r3, [r7, #28]
 80024e6:	4413      	add	r3, r2
 80024e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80024ec:	461a      	mov	r2, r3
 80024ee:	2310      	movs	r3, #16
 80024f0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80024f2:	693b      	ldr	r3, [r7, #16]
 80024f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d008      	beq.n	800250e <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80024fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024fe:	015a      	lsls	r2, r3, #5
 8002500:	69fb      	ldr	r3, [r7, #28]
 8002502:	4413      	add	r3, r2
 8002504:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002508:	461a      	mov	r2, r3
 800250a:	2340      	movs	r3, #64	; 0x40
 800250c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800250e:	693b      	ldr	r3, [r7, #16]
 8002510:	f003 0302 	and.w	r3, r3, #2
 8002514:	2b00      	cmp	r3, #0
 8002516:	d008      	beq.n	800252a <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8002518:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800251a:	015a      	lsls	r2, r3, #5
 800251c:	69fb      	ldr	r3, [r7, #28]
 800251e:	4413      	add	r3, r2
 8002520:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002524:	461a      	mov	r2, r3
 8002526:	2302      	movs	r3, #2
 8002528:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800252a:	693b      	ldr	r3, [r7, #16]
 800252c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002530:	2b00      	cmp	r3, #0
 8002532:	d003      	beq.n	800253c <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8002534:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002536:	6878      	ldr	r0, [r7, #4]
 8002538:	f000 fc48 	bl	8002dcc <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 800253c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800253e:	3301      	adds	r3, #1
 8002540:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002542:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002544:	085b      	lsrs	r3, r3, #1
 8002546:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002548:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800254a:	2b00      	cmp	r3, #0
 800254c:	f47f af49 	bne.w	80023e2 <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	4618      	mov	r0, r3
 8002556:	f004 f91d 	bl	8006794 <USB_ReadInterrupts>
 800255a:	4603      	mov	r3, r0
 800255c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002560:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002564:	d122      	bne.n	80025ac <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002566:	69fb      	ldr	r3, [r7, #28]
 8002568:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800256c:	685b      	ldr	r3, [r3, #4]
 800256e:	69fa      	ldr	r2, [r7, #28]
 8002570:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002574:	f023 0301 	bic.w	r3, r3, #1
 8002578:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8002580:	2b01      	cmp	r3, #1
 8002582:	d108      	bne.n	8002596 <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	2200      	movs	r2, #0
 8002588:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800258c:	2100      	movs	r1, #0
 800258e:	6878      	ldr	r0, [r7, #4]
 8002590:	f000 fe78 	bl	8003284 <HAL_PCDEx_LPM_Callback>
 8002594:	e002      	b.n	800259c <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8002596:	6878      	ldr	r0, [r7, #4]
 8002598:	f006 fa12 	bl	80089c0 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	695a      	ldr	r2, [r3, #20]
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 80025aa:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	4618      	mov	r0, r3
 80025b2:	f004 f8ef 	bl	8006794 <USB_ReadInterrupts>
 80025b6:	4603      	mov	r3, r0
 80025b8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80025bc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80025c0:	d112      	bne.n	80025e8 <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80025c2:	69fb      	ldr	r3, [r7, #28]
 80025c4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80025c8:	689b      	ldr	r3, [r3, #8]
 80025ca:	f003 0301 	and.w	r3, r3, #1
 80025ce:	2b01      	cmp	r3, #1
 80025d0:	d102      	bne.n	80025d8 <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80025d2:	6878      	ldr	r0, [r7, #4]
 80025d4:	f006 f9ce 	bl	8008974 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	695a      	ldr	r2, [r3, #20]
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 80025e6:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	4618      	mov	r0, r3
 80025ee:	f004 f8d1 	bl	8006794 <USB_ReadInterrupts>
 80025f2:	4603      	mov	r3, r0
 80025f4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80025f8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80025fc:	d121      	bne.n	8002642 <HAL_PCD_IRQHandler+0x4b0>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	695a      	ldr	r2, [r3, #20]
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 800260c:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8002614:	2b00      	cmp	r3, #0
 8002616:	d111      	bne.n	800263c <HAL_PCD_IRQHandler+0x4aa>
      {
        hpcd->LPM_State = LPM_L1;
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	2201      	movs	r2, #1
 800261c:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002626:	089b      	lsrs	r3, r3, #2
 8002628:	f003 020f 	and.w	r2, r3, #15
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	f8c3 23f8 	str.w	r2, [r3, #1016]	; 0x3f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8002632:	2101      	movs	r1, #1
 8002634:	6878      	ldr	r0, [r7, #4]
 8002636:	f000 fe25 	bl	8003284 <HAL_PCDEx_LPM_Callback>
 800263a:	e002      	b.n	8002642 <HAL_PCD_IRQHandler+0x4b0>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800263c:	6878      	ldr	r0, [r7, #4]
 800263e:	f006 f999 	bl	8008974 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	4618      	mov	r0, r3
 8002648:	f004 f8a4 	bl	8006794 <USB_ReadInterrupts>
 800264c:	4603      	mov	r3, r0
 800264e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002652:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002656:	f040 80c7 	bne.w	80027e8 <HAL_PCD_IRQHandler+0x656>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800265a:	69fb      	ldr	r3, [r7, #28]
 800265c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002660:	685b      	ldr	r3, [r3, #4]
 8002662:	69fa      	ldr	r2, [r7, #28]
 8002664:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002668:	f023 0301 	bic.w	r3, r3, #1
 800266c:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	2110      	movs	r1, #16
 8002674:	4618      	mov	r0, r3
 8002676:	f003 f92d 	bl	80058d4 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800267a:	2300      	movs	r3, #0
 800267c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800267e:	e056      	b.n	800272e <HAL_PCD_IRQHandler+0x59c>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8002680:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002682:	015a      	lsls	r2, r3, #5
 8002684:	69fb      	ldr	r3, [r7, #28]
 8002686:	4413      	add	r3, r2
 8002688:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800268c:	461a      	mov	r2, r3
 800268e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002692:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8002694:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002696:	015a      	lsls	r2, r3, #5
 8002698:	69fb      	ldr	r3, [r7, #28]
 800269a:	4413      	add	r3, r2
 800269c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80026a4:	0151      	lsls	r1, r2, #5
 80026a6:	69fa      	ldr	r2, [r7, #28]
 80026a8:	440a      	add	r2, r1
 80026aa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80026ae:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80026b2:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80026b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026b6:	015a      	lsls	r2, r3, #5
 80026b8:	69fb      	ldr	r3, [r7, #28]
 80026ba:	4413      	add	r3, r2
 80026bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80026c4:	0151      	lsls	r1, r2, #5
 80026c6:	69fa      	ldr	r2, [r7, #28]
 80026c8:	440a      	add	r2, r1
 80026ca:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80026ce:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80026d2:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80026d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026d6:	015a      	lsls	r2, r3, #5
 80026d8:	69fb      	ldr	r3, [r7, #28]
 80026da:	4413      	add	r3, r2
 80026dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80026e0:	461a      	mov	r2, r3
 80026e2:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80026e6:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80026e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026ea:	015a      	lsls	r2, r3, #5
 80026ec:	69fb      	ldr	r3, [r7, #28]
 80026ee:	4413      	add	r3, r2
 80026f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80026f8:	0151      	lsls	r1, r2, #5
 80026fa:	69fa      	ldr	r2, [r7, #28]
 80026fc:	440a      	add	r2, r1
 80026fe:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002702:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002706:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8002708:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800270a:	015a      	lsls	r2, r3, #5
 800270c:	69fb      	ldr	r3, [r7, #28]
 800270e:	4413      	add	r3, r2
 8002710:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002718:	0151      	lsls	r1, r2, #5
 800271a:	69fa      	ldr	r2, [r7, #28]
 800271c:	440a      	add	r2, r1
 800271e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002722:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8002726:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002728:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800272a:	3301      	adds	r3, #1
 800272c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	685b      	ldr	r3, [r3, #4]
 8002732:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002734:	429a      	cmp	r2, r3
 8002736:	d3a3      	bcc.n	8002680 <HAL_PCD_IRQHandler+0x4ee>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8002738:	69fb      	ldr	r3, [r7, #28]
 800273a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800273e:	69db      	ldr	r3, [r3, #28]
 8002740:	69fa      	ldr	r2, [r7, #28]
 8002742:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002746:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 800274a:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002750:	2b00      	cmp	r3, #0
 8002752:	d016      	beq.n	8002782 <HAL_PCD_IRQHandler+0x5f0>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8002754:	69fb      	ldr	r3, [r7, #28]
 8002756:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800275a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800275e:	69fa      	ldr	r2, [r7, #28]
 8002760:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002764:	f043 030b 	orr.w	r3, r3, #11
 8002768:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800276c:	69fb      	ldr	r3, [r7, #28]
 800276e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002772:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002774:	69fa      	ldr	r2, [r7, #28]
 8002776:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800277a:	f043 030b 	orr.w	r3, r3, #11
 800277e:	6453      	str	r3, [r2, #68]	; 0x44
 8002780:	e015      	b.n	80027ae <HAL_PCD_IRQHandler+0x61c>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8002782:	69fb      	ldr	r3, [r7, #28]
 8002784:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002788:	695a      	ldr	r2, [r3, #20]
 800278a:	69fb      	ldr	r3, [r7, #28]
 800278c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002790:	4619      	mov	r1, r3
 8002792:	f242 032b 	movw	r3, #8235	; 0x202b
 8002796:	4313      	orrs	r3, r2
 8002798:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800279a:	69fb      	ldr	r3, [r7, #28]
 800279c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80027a0:	691b      	ldr	r3, [r3, #16]
 80027a2:	69fa      	ldr	r2, [r7, #28]
 80027a4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80027a8:	f043 030b 	orr.w	r3, r3, #11
 80027ac:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80027ae:	69fb      	ldr	r3, [r7, #28]
 80027b0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	69fa      	ldr	r2, [r7, #28]
 80027b8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80027bc:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80027c0:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	6818      	ldr	r0, [r3, #0]
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	691b      	ldr	r3, [r3, #16]
 80027ca:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80027d2:	461a      	mov	r2, r3
 80027d4:	f004 f8a4 	bl	8006920 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	695a      	ldr	r2, [r3, #20]
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80027e6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	4618      	mov	r0, r3
 80027ee:	f003 ffd1 	bl	8006794 <USB_ReadInterrupts>
 80027f2:	4603      	mov	r3, r0
 80027f4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80027f8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80027fc:	d124      	bne.n	8002848 <HAL_PCD_IRQHandler+0x6b6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	4618      	mov	r0, r3
 8002804:	f004 f868 	bl	80068d8 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	4618      	mov	r0, r3
 800280e:	f003 f8c2 	bl	8005996 <USB_GetDevSpeed>
 8002812:	4603      	mov	r3, r0
 8002814:	461a      	mov	r2, r3
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681c      	ldr	r4, [r3, #0]
 800281e:	f001 fcc5 	bl	80041ac <HAL_RCC_GetHCLKFreq>
 8002822:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002828:	b2db      	uxtb	r3, r3
 800282a:	461a      	mov	r2, r3
 800282c:	4620      	mov	r0, r4
 800282e:	f002 fe05 	bl	800543c <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8002832:	6878      	ldr	r0, [r7, #4]
 8002834:	f006 f875 	bl	8008922 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	695a      	ldr	r2, [r3, #20]
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8002846:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	4618      	mov	r0, r3
 800284e:	f003 ffa1 	bl	8006794 <USB_ReadInterrupts>
 8002852:	4603      	mov	r3, r0
 8002854:	f003 0308 	and.w	r3, r3, #8
 8002858:	2b08      	cmp	r3, #8
 800285a:	d10a      	bne.n	8002872 <HAL_PCD_IRQHandler+0x6e0>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800285c:	6878      	ldr	r0, [r7, #4]
 800285e:	f006 f852 	bl	8008906 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	695a      	ldr	r2, [r3, #20]
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	f002 0208 	and.w	r2, r2, #8
 8002870:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	4618      	mov	r0, r3
 8002878:	f003 ff8c 	bl	8006794 <USB_ReadInterrupts>
 800287c:	4603      	mov	r3, r0
 800287e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002882:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002886:	d10f      	bne.n	80028a8 <HAL_PCD_IRQHandler+0x716>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8002888:	2300      	movs	r3, #0
 800288a:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800288c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800288e:	b2db      	uxtb	r3, r3
 8002890:	4619      	mov	r1, r3
 8002892:	6878      	ldr	r0, [r7, #4]
 8002894:	f006 f8b4 	bl	8008a00 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	695a      	ldr	r2, [r3, #20]
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 80028a6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	4618      	mov	r0, r3
 80028ae:	f003 ff71 	bl	8006794 <USB_ReadInterrupts>
 80028b2:	4603      	mov	r3, r0
 80028b4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80028b8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80028bc:	d10f      	bne.n	80028de <HAL_PCD_IRQHandler+0x74c>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 80028be:	2300      	movs	r3, #0
 80028c0:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80028c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028c4:	b2db      	uxtb	r3, r3
 80028c6:	4619      	mov	r1, r3
 80028c8:	6878      	ldr	r0, [r7, #4]
 80028ca:	f006 f887 	bl	80089dc <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	695a      	ldr	r2, [r3, #20]
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 80028dc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	4618      	mov	r0, r3
 80028e4:	f003 ff56 	bl	8006794 <USB_ReadInterrupts>
 80028e8:	4603      	mov	r3, r0
 80028ea:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80028ee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80028f2:	d10a      	bne.n	800290a <HAL_PCD_IRQHandler+0x778>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80028f4:	6878      	ldr	r0, [r7, #4]
 80028f6:	f006 f895 	bl	8008a24 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	695a      	ldr	r2, [r3, #20]
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8002908:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	4618      	mov	r0, r3
 8002910:	f003 ff40 	bl	8006794 <USB_ReadInterrupts>
 8002914:	4603      	mov	r3, r0
 8002916:	f003 0304 	and.w	r3, r3, #4
 800291a:	2b04      	cmp	r3, #4
 800291c:	d115      	bne.n	800294a <HAL_PCD_IRQHandler+0x7b8>
    {
      temp = hpcd->Instance->GOTGINT;
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	685b      	ldr	r3, [r3, #4]
 8002924:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8002926:	69bb      	ldr	r3, [r7, #24]
 8002928:	f003 0304 	and.w	r3, r3, #4
 800292c:	2b00      	cmp	r3, #0
 800292e:	d002      	beq.n	8002936 <HAL_PCD_IRQHandler+0x7a4>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8002930:	6878      	ldr	r0, [r7, #4]
 8002932:	f006 f885 	bl	8008a40 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	6859      	ldr	r1, [r3, #4]
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	69ba      	ldr	r2, [r7, #24]
 8002942:	430a      	orrs	r2, r1
 8002944:	605a      	str	r2, [r3, #4]
 8002946:	e000      	b.n	800294a <HAL_PCD_IRQHandler+0x7b8>
      return;
 8002948:	bf00      	nop
    }
  }
}
 800294a:	3734      	adds	r7, #52	; 0x34
 800294c:	46bd      	mov	sp, r7
 800294e:	bd90      	pop	{r4, r7, pc}

08002950 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002950:	b580      	push	{r7, lr}
 8002952:	b082      	sub	sp, #8
 8002954:	af00      	add	r7, sp, #0
 8002956:	6078      	str	r0, [r7, #4]
 8002958:	460b      	mov	r3, r1
 800295a:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002962:	2b01      	cmp	r3, #1
 8002964:	d101      	bne.n	800296a <HAL_PCD_SetAddress+0x1a>
 8002966:	2302      	movs	r3, #2
 8002968:	e013      	b.n	8002992 <HAL_PCD_SetAddress+0x42>
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	2201      	movs	r2, #1
 800296e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	78fa      	ldrb	r2, [r7, #3]
 8002976:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	78fa      	ldrb	r2, [r7, #3]
 8002980:	4611      	mov	r1, r2
 8002982:	4618      	mov	r0, r3
 8002984:	f003 fe9e 	bl	80066c4 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	2200      	movs	r2, #0
 800298c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8002990:	2300      	movs	r3, #0
}
 8002992:	4618      	mov	r0, r3
 8002994:	3708      	adds	r7, #8
 8002996:	46bd      	mov	sp, r7
 8002998:	bd80      	pop	{r7, pc}

0800299a <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800299a:	b580      	push	{r7, lr}
 800299c:	b084      	sub	sp, #16
 800299e:	af00      	add	r7, sp, #0
 80029a0:	6078      	str	r0, [r7, #4]
 80029a2:	4608      	mov	r0, r1
 80029a4:	4611      	mov	r1, r2
 80029a6:	461a      	mov	r2, r3
 80029a8:	4603      	mov	r3, r0
 80029aa:	70fb      	strb	r3, [r7, #3]
 80029ac:	460b      	mov	r3, r1
 80029ae:	803b      	strh	r3, [r7, #0]
 80029b0:	4613      	mov	r3, r2
 80029b2:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80029b4:	2300      	movs	r3, #0
 80029b6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80029b8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80029bc:	2b00      	cmp	r3, #0
 80029be:	da0f      	bge.n	80029e0 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80029c0:	78fb      	ldrb	r3, [r7, #3]
 80029c2:	f003 020f 	and.w	r2, r3, #15
 80029c6:	4613      	mov	r3, r2
 80029c8:	00db      	lsls	r3, r3, #3
 80029ca:	1a9b      	subs	r3, r3, r2
 80029cc:	009b      	lsls	r3, r3, #2
 80029ce:	3338      	adds	r3, #56	; 0x38
 80029d0:	687a      	ldr	r2, [r7, #4]
 80029d2:	4413      	add	r3, r2
 80029d4:	3304      	adds	r3, #4
 80029d6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	2201      	movs	r2, #1
 80029dc:	705a      	strb	r2, [r3, #1]
 80029de:	e00f      	b.n	8002a00 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80029e0:	78fb      	ldrb	r3, [r7, #3]
 80029e2:	f003 020f 	and.w	r2, r3, #15
 80029e6:	4613      	mov	r3, r2
 80029e8:	00db      	lsls	r3, r3, #3
 80029ea:	1a9b      	subs	r3, r3, r2
 80029ec:	009b      	lsls	r3, r3, #2
 80029ee:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80029f2:	687a      	ldr	r2, [r7, #4]
 80029f4:	4413      	add	r3, r2
 80029f6:	3304      	adds	r3, #4
 80029f8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	2200      	movs	r2, #0
 80029fe:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002a00:	78fb      	ldrb	r3, [r7, #3]
 8002a02:	f003 030f 	and.w	r3, r3, #15
 8002a06:	b2da      	uxtb	r2, r3
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8002a0c:	883a      	ldrh	r2, [r7, #0]
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	78ba      	ldrb	r2, [r7, #2]
 8002a16:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	785b      	ldrb	r3, [r3, #1]
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d004      	beq.n	8002a2a <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	781b      	ldrb	r3, [r3, #0]
 8002a24:	b29a      	uxth	r2, r3
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002a2a:	78bb      	ldrb	r3, [r7, #2]
 8002a2c:	2b02      	cmp	r3, #2
 8002a2e:	d102      	bne.n	8002a36 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	2200      	movs	r2, #0
 8002a34:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002a3c:	2b01      	cmp	r3, #1
 8002a3e:	d101      	bne.n	8002a44 <HAL_PCD_EP_Open+0xaa>
 8002a40:	2302      	movs	r3, #2
 8002a42:	e00e      	b.n	8002a62 <HAL_PCD_EP_Open+0xc8>
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	2201      	movs	r2, #1
 8002a48:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	68f9      	ldr	r1, [r7, #12]
 8002a52:	4618      	mov	r0, r3
 8002a54:	f002 ffc4 	bl	80059e0 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	2200      	movs	r2, #0
 8002a5c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8002a60:	7afb      	ldrb	r3, [r7, #11]
}
 8002a62:	4618      	mov	r0, r3
 8002a64:	3710      	adds	r7, #16
 8002a66:	46bd      	mov	sp, r7
 8002a68:	bd80      	pop	{r7, pc}

08002a6a <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002a6a:	b580      	push	{r7, lr}
 8002a6c:	b084      	sub	sp, #16
 8002a6e:	af00      	add	r7, sp, #0
 8002a70:	6078      	str	r0, [r7, #4]
 8002a72:	460b      	mov	r3, r1
 8002a74:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002a76:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	da0f      	bge.n	8002a9e <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002a7e:	78fb      	ldrb	r3, [r7, #3]
 8002a80:	f003 020f 	and.w	r2, r3, #15
 8002a84:	4613      	mov	r3, r2
 8002a86:	00db      	lsls	r3, r3, #3
 8002a88:	1a9b      	subs	r3, r3, r2
 8002a8a:	009b      	lsls	r3, r3, #2
 8002a8c:	3338      	adds	r3, #56	; 0x38
 8002a8e:	687a      	ldr	r2, [r7, #4]
 8002a90:	4413      	add	r3, r2
 8002a92:	3304      	adds	r3, #4
 8002a94:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	2201      	movs	r2, #1
 8002a9a:	705a      	strb	r2, [r3, #1]
 8002a9c:	e00f      	b.n	8002abe <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002a9e:	78fb      	ldrb	r3, [r7, #3]
 8002aa0:	f003 020f 	and.w	r2, r3, #15
 8002aa4:	4613      	mov	r3, r2
 8002aa6:	00db      	lsls	r3, r3, #3
 8002aa8:	1a9b      	subs	r3, r3, r2
 8002aaa:	009b      	lsls	r3, r3, #2
 8002aac:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002ab0:	687a      	ldr	r2, [r7, #4]
 8002ab2:	4413      	add	r3, r2
 8002ab4:	3304      	adds	r3, #4
 8002ab6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	2200      	movs	r2, #0
 8002abc:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8002abe:	78fb      	ldrb	r3, [r7, #3]
 8002ac0:	f003 030f 	and.w	r3, r3, #15
 8002ac4:	b2da      	uxtb	r2, r3
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002ad0:	2b01      	cmp	r3, #1
 8002ad2:	d101      	bne.n	8002ad8 <HAL_PCD_EP_Close+0x6e>
 8002ad4:	2302      	movs	r3, #2
 8002ad6:	e00e      	b.n	8002af6 <HAL_PCD_EP_Close+0x8c>
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	2201      	movs	r2, #1
 8002adc:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	68f9      	ldr	r1, [r7, #12]
 8002ae6:	4618      	mov	r0, r3
 8002ae8:	f003 f802 	bl	8005af0 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	2200      	movs	r2, #0
 8002af0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8002af4:	2300      	movs	r3, #0
}
 8002af6:	4618      	mov	r0, r3
 8002af8:	3710      	adds	r7, #16
 8002afa:	46bd      	mov	sp, r7
 8002afc:	bd80      	pop	{r7, pc}

08002afe <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002afe:	b580      	push	{r7, lr}
 8002b00:	b086      	sub	sp, #24
 8002b02:	af00      	add	r7, sp, #0
 8002b04:	60f8      	str	r0, [r7, #12]
 8002b06:	607a      	str	r2, [r7, #4]
 8002b08:	603b      	str	r3, [r7, #0]
 8002b0a:	460b      	mov	r3, r1
 8002b0c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002b0e:	7afb      	ldrb	r3, [r7, #11]
 8002b10:	f003 020f 	and.w	r2, r3, #15
 8002b14:	4613      	mov	r3, r2
 8002b16:	00db      	lsls	r3, r3, #3
 8002b18:	1a9b      	subs	r3, r3, r2
 8002b1a:	009b      	lsls	r3, r3, #2
 8002b1c:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002b20:	68fa      	ldr	r2, [r7, #12]
 8002b22:	4413      	add	r3, r2
 8002b24:	3304      	adds	r3, #4
 8002b26:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002b28:	697b      	ldr	r3, [r7, #20]
 8002b2a:	687a      	ldr	r2, [r7, #4]
 8002b2c:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8002b2e:	697b      	ldr	r3, [r7, #20]
 8002b30:	683a      	ldr	r2, [r7, #0]
 8002b32:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8002b34:	697b      	ldr	r3, [r7, #20]
 8002b36:	2200      	movs	r2, #0
 8002b38:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8002b3a:	697b      	ldr	r3, [r7, #20]
 8002b3c:	2200      	movs	r2, #0
 8002b3e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002b40:	7afb      	ldrb	r3, [r7, #11]
 8002b42:	f003 030f 	and.w	r3, r3, #15
 8002b46:	b2da      	uxtb	r2, r3
 8002b48:	697b      	ldr	r3, [r7, #20]
 8002b4a:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	691b      	ldr	r3, [r3, #16]
 8002b50:	2b01      	cmp	r3, #1
 8002b52:	d102      	bne.n	8002b5a <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002b54:	687a      	ldr	r2, [r7, #4]
 8002b56:	697b      	ldr	r3, [r7, #20]
 8002b58:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002b5a:	7afb      	ldrb	r3, [r7, #11]
 8002b5c:	f003 030f 	and.w	r3, r3, #15
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d109      	bne.n	8002b78 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	6818      	ldr	r0, [r3, #0]
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	691b      	ldr	r3, [r3, #16]
 8002b6c:	b2db      	uxtb	r3, r3
 8002b6e:	461a      	mov	r2, r3
 8002b70:	6979      	ldr	r1, [r7, #20]
 8002b72:	f003 fae5 	bl	8006140 <USB_EP0StartXfer>
 8002b76:	e008      	b.n	8002b8a <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	6818      	ldr	r0, [r3, #0]
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	691b      	ldr	r3, [r3, #16]
 8002b80:	b2db      	uxtb	r3, r3
 8002b82:	461a      	mov	r2, r3
 8002b84:	6979      	ldr	r1, [r7, #20]
 8002b86:	f003 f88f 	bl	8005ca8 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002b8a:	2300      	movs	r3, #0
}
 8002b8c:	4618      	mov	r0, r3
 8002b8e:	3718      	adds	r7, #24
 8002b90:	46bd      	mov	sp, r7
 8002b92:	bd80      	pop	{r7, pc}

08002b94 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002b94:	b480      	push	{r7}
 8002b96:	b083      	sub	sp, #12
 8002b98:	af00      	add	r7, sp, #0
 8002b9a:	6078      	str	r0, [r7, #4]
 8002b9c:	460b      	mov	r3, r1
 8002b9e:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8002ba0:	78fb      	ldrb	r3, [r7, #3]
 8002ba2:	f003 020f 	and.w	r2, r3, #15
 8002ba6:	6879      	ldr	r1, [r7, #4]
 8002ba8:	4613      	mov	r3, r2
 8002baa:	00db      	lsls	r3, r3, #3
 8002bac:	1a9b      	subs	r3, r3, r2
 8002bae:	009b      	lsls	r3, r3, #2
 8002bb0:	440b      	add	r3, r1
 8002bb2:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8002bb6:	681b      	ldr	r3, [r3, #0]
}
 8002bb8:	4618      	mov	r0, r3
 8002bba:	370c      	adds	r7, #12
 8002bbc:	46bd      	mov	sp, r7
 8002bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc2:	4770      	bx	lr

08002bc4 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002bc4:	b580      	push	{r7, lr}
 8002bc6:	b086      	sub	sp, #24
 8002bc8:	af00      	add	r7, sp, #0
 8002bca:	60f8      	str	r0, [r7, #12]
 8002bcc:	607a      	str	r2, [r7, #4]
 8002bce:	603b      	str	r3, [r7, #0]
 8002bd0:	460b      	mov	r3, r1
 8002bd2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002bd4:	7afb      	ldrb	r3, [r7, #11]
 8002bd6:	f003 020f 	and.w	r2, r3, #15
 8002bda:	4613      	mov	r3, r2
 8002bdc:	00db      	lsls	r3, r3, #3
 8002bde:	1a9b      	subs	r3, r3, r2
 8002be0:	009b      	lsls	r3, r3, #2
 8002be2:	3338      	adds	r3, #56	; 0x38
 8002be4:	68fa      	ldr	r2, [r7, #12]
 8002be6:	4413      	add	r3, r2
 8002be8:	3304      	adds	r3, #4
 8002bea:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002bec:	697b      	ldr	r3, [r7, #20]
 8002bee:	687a      	ldr	r2, [r7, #4]
 8002bf0:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8002bf2:	697b      	ldr	r3, [r7, #20]
 8002bf4:	683a      	ldr	r2, [r7, #0]
 8002bf6:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8002bf8:	697b      	ldr	r3, [r7, #20]
 8002bfa:	2200      	movs	r2, #0
 8002bfc:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8002bfe:	697b      	ldr	r3, [r7, #20]
 8002c00:	2201      	movs	r2, #1
 8002c02:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002c04:	7afb      	ldrb	r3, [r7, #11]
 8002c06:	f003 030f 	and.w	r3, r3, #15
 8002c0a:	b2da      	uxtb	r2, r3
 8002c0c:	697b      	ldr	r3, [r7, #20]
 8002c0e:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	691b      	ldr	r3, [r3, #16]
 8002c14:	2b01      	cmp	r3, #1
 8002c16:	d102      	bne.n	8002c1e <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002c18:	687a      	ldr	r2, [r7, #4]
 8002c1a:	697b      	ldr	r3, [r7, #20]
 8002c1c:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002c1e:	7afb      	ldrb	r3, [r7, #11]
 8002c20:	f003 030f 	and.w	r3, r3, #15
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d109      	bne.n	8002c3c <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	6818      	ldr	r0, [r3, #0]
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	691b      	ldr	r3, [r3, #16]
 8002c30:	b2db      	uxtb	r3, r3
 8002c32:	461a      	mov	r2, r3
 8002c34:	6979      	ldr	r1, [r7, #20]
 8002c36:	f003 fa83 	bl	8006140 <USB_EP0StartXfer>
 8002c3a:	e008      	b.n	8002c4e <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	6818      	ldr	r0, [r3, #0]
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	691b      	ldr	r3, [r3, #16]
 8002c44:	b2db      	uxtb	r3, r3
 8002c46:	461a      	mov	r2, r3
 8002c48:	6979      	ldr	r1, [r7, #20]
 8002c4a:	f003 f82d 	bl	8005ca8 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002c4e:	2300      	movs	r3, #0
}
 8002c50:	4618      	mov	r0, r3
 8002c52:	3718      	adds	r7, #24
 8002c54:	46bd      	mov	sp, r7
 8002c56:	bd80      	pop	{r7, pc}

08002c58 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002c58:	b580      	push	{r7, lr}
 8002c5a:	b084      	sub	sp, #16
 8002c5c:	af00      	add	r7, sp, #0
 8002c5e:	6078      	str	r0, [r7, #4]
 8002c60:	460b      	mov	r3, r1
 8002c62:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002c64:	78fb      	ldrb	r3, [r7, #3]
 8002c66:	f003 020f 	and.w	r2, r3, #15
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	685b      	ldr	r3, [r3, #4]
 8002c6e:	429a      	cmp	r2, r3
 8002c70:	d901      	bls.n	8002c76 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002c72:	2301      	movs	r3, #1
 8002c74:	e050      	b.n	8002d18 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002c76:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	da0f      	bge.n	8002c9e <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002c7e:	78fb      	ldrb	r3, [r7, #3]
 8002c80:	f003 020f 	and.w	r2, r3, #15
 8002c84:	4613      	mov	r3, r2
 8002c86:	00db      	lsls	r3, r3, #3
 8002c88:	1a9b      	subs	r3, r3, r2
 8002c8a:	009b      	lsls	r3, r3, #2
 8002c8c:	3338      	adds	r3, #56	; 0x38
 8002c8e:	687a      	ldr	r2, [r7, #4]
 8002c90:	4413      	add	r3, r2
 8002c92:	3304      	adds	r3, #4
 8002c94:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	2201      	movs	r2, #1
 8002c9a:	705a      	strb	r2, [r3, #1]
 8002c9c:	e00d      	b.n	8002cba <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002c9e:	78fa      	ldrb	r2, [r7, #3]
 8002ca0:	4613      	mov	r3, r2
 8002ca2:	00db      	lsls	r3, r3, #3
 8002ca4:	1a9b      	subs	r3, r3, r2
 8002ca6:	009b      	lsls	r3, r3, #2
 8002ca8:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002cac:	687a      	ldr	r2, [r7, #4]
 8002cae:	4413      	add	r3, r2
 8002cb0:	3304      	adds	r3, #4
 8002cb2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	2200      	movs	r2, #0
 8002cb8:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	2201      	movs	r2, #1
 8002cbe:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002cc0:	78fb      	ldrb	r3, [r7, #3]
 8002cc2:	f003 030f 	and.w	r3, r3, #15
 8002cc6:	b2da      	uxtb	r2, r3
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002cd2:	2b01      	cmp	r3, #1
 8002cd4:	d101      	bne.n	8002cda <HAL_PCD_EP_SetStall+0x82>
 8002cd6:	2302      	movs	r3, #2
 8002cd8:	e01e      	b.n	8002d18 <HAL_PCD_EP_SetStall+0xc0>
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	2201      	movs	r2, #1
 8002cde:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	68f9      	ldr	r1, [r7, #12]
 8002ce8:	4618      	mov	r0, r3
 8002cea:	f003 fc17 	bl	800651c <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002cee:	78fb      	ldrb	r3, [r7, #3]
 8002cf0:	f003 030f 	and.w	r3, r3, #15
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d10a      	bne.n	8002d0e <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	6818      	ldr	r0, [r3, #0]
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	691b      	ldr	r3, [r3, #16]
 8002d00:	b2d9      	uxtb	r1, r3
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002d08:	461a      	mov	r2, r3
 8002d0a:	f003 fe09 	bl	8006920 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	2200      	movs	r2, #0
 8002d12:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8002d16:	2300      	movs	r3, #0
}
 8002d18:	4618      	mov	r0, r3
 8002d1a:	3710      	adds	r7, #16
 8002d1c:	46bd      	mov	sp, r7
 8002d1e:	bd80      	pop	{r7, pc}

08002d20 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002d20:	b580      	push	{r7, lr}
 8002d22:	b084      	sub	sp, #16
 8002d24:	af00      	add	r7, sp, #0
 8002d26:	6078      	str	r0, [r7, #4]
 8002d28:	460b      	mov	r3, r1
 8002d2a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002d2c:	78fb      	ldrb	r3, [r7, #3]
 8002d2e:	f003 020f 	and.w	r2, r3, #15
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	685b      	ldr	r3, [r3, #4]
 8002d36:	429a      	cmp	r2, r3
 8002d38:	d901      	bls.n	8002d3e <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002d3a:	2301      	movs	r3, #1
 8002d3c:	e042      	b.n	8002dc4 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002d3e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	da0f      	bge.n	8002d66 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002d46:	78fb      	ldrb	r3, [r7, #3]
 8002d48:	f003 020f 	and.w	r2, r3, #15
 8002d4c:	4613      	mov	r3, r2
 8002d4e:	00db      	lsls	r3, r3, #3
 8002d50:	1a9b      	subs	r3, r3, r2
 8002d52:	009b      	lsls	r3, r3, #2
 8002d54:	3338      	adds	r3, #56	; 0x38
 8002d56:	687a      	ldr	r2, [r7, #4]
 8002d58:	4413      	add	r3, r2
 8002d5a:	3304      	adds	r3, #4
 8002d5c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	2201      	movs	r2, #1
 8002d62:	705a      	strb	r2, [r3, #1]
 8002d64:	e00f      	b.n	8002d86 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002d66:	78fb      	ldrb	r3, [r7, #3]
 8002d68:	f003 020f 	and.w	r2, r3, #15
 8002d6c:	4613      	mov	r3, r2
 8002d6e:	00db      	lsls	r3, r3, #3
 8002d70:	1a9b      	subs	r3, r3, r2
 8002d72:	009b      	lsls	r3, r3, #2
 8002d74:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002d78:	687a      	ldr	r2, [r7, #4]
 8002d7a:	4413      	add	r3, r2
 8002d7c:	3304      	adds	r3, #4
 8002d7e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	2200      	movs	r2, #0
 8002d84:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	2200      	movs	r2, #0
 8002d8a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002d8c:	78fb      	ldrb	r3, [r7, #3]
 8002d8e:	f003 030f 	and.w	r3, r3, #15
 8002d92:	b2da      	uxtb	r2, r3
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002d9e:	2b01      	cmp	r3, #1
 8002da0:	d101      	bne.n	8002da6 <HAL_PCD_EP_ClrStall+0x86>
 8002da2:	2302      	movs	r3, #2
 8002da4:	e00e      	b.n	8002dc4 <HAL_PCD_EP_ClrStall+0xa4>
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	2201      	movs	r2, #1
 8002daa:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	68f9      	ldr	r1, [r7, #12]
 8002db4:	4618      	mov	r0, r3
 8002db6:	f003 fc1f 	bl	80065f8 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	2200      	movs	r2, #0
 8002dbe:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8002dc2:	2300      	movs	r3, #0
}
 8002dc4:	4618      	mov	r0, r3
 8002dc6:	3710      	adds	r7, #16
 8002dc8:	46bd      	mov	sp, r7
 8002dca:	bd80      	pop	{r7, pc}

08002dcc <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002dcc:	b580      	push	{r7, lr}
 8002dce:	b08a      	sub	sp, #40	; 0x28
 8002dd0:	af02      	add	r7, sp, #8
 8002dd2:	6078      	str	r0, [r7, #4]
 8002dd4:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002ddc:	697b      	ldr	r3, [r7, #20]
 8002dde:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8002de0:	683a      	ldr	r2, [r7, #0]
 8002de2:	4613      	mov	r3, r2
 8002de4:	00db      	lsls	r3, r3, #3
 8002de6:	1a9b      	subs	r3, r3, r2
 8002de8:	009b      	lsls	r3, r3, #2
 8002dea:	3338      	adds	r3, #56	; 0x38
 8002dec:	687a      	ldr	r2, [r7, #4]
 8002dee:	4413      	add	r3, r2
 8002df0:	3304      	adds	r3, #4
 8002df2:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	699a      	ldr	r2, [r3, #24]
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	695b      	ldr	r3, [r3, #20]
 8002dfc:	429a      	cmp	r2, r3
 8002dfe:	d901      	bls.n	8002e04 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8002e00:	2301      	movs	r3, #1
 8002e02:	e06c      	b.n	8002ede <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	695a      	ldr	r2, [r3, #20]
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	699b      	ldr	r3, [r3, #24]
 8002e0c:	1ad3      	subs	r3, r2, r3
 8002e0e:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	689b      	ldr	r3, [r3, #8]
 8002e14:	69fa      	ldr	r2, [r7, #28]
 8002e16:	429a      	cmp	r2, r3
 8002e18:	d902      	bls.n	8002e20 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	689b      	ldr	r3, [r3, #8]
 8002e1e:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8002e20:	69fb      	ldr	r3, [r7, #28]
 8002e22:	3303      	adds	r3, #3
 8002e24:	089b      	lsrs	r3, r3, #2
 8002e26:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002e28:	e02b      	b.n	8002e82 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	695a      	ldr	r2, [r3, #20]
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	699b      	ldr	r3, [r3, #24]
 8002e32:	1ad3      	subs	r3, r2, r3
 8002e34:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	689b      	ldr	r3, [r3, #8]
 8002e3a:	69fa      	ldr	r2, [r7, #28]
 8002e3c:	429a      	cmp	r2, r3
 8002e3e:	d902      	bls.n	8002e46 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	689b      	ldr	r3, [r3, #8]
 8002e44:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8002e46:	69fb      	ldr	r3, [r7, #28]
 8002e48:	3303      	adds	r3, #3
 8002e4a:	089b      	lsrs	r3, r3, #2
 8002e4c:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	68d9      	ldr	r1, [r3, #12]
 8002e52:	683b      	ldr	r3, [r7, #0]
 8002e54:	b2da      	uxtb	r2, r3
 8002e56:	69fb      	ldr	r3, [r7, #28]
 8002e58:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002e5e:	b2db      	uxtb	r3, r3
 8002e60:	9300      	str	r3, [sp, #0]
 8002e62:	4603      	mov	r3, r0
 8002e64:	6978      	ldr	r0, [r7, #20]
 8002e66:	f003 fac3 	bl	80063f0 <USB_WritePacket>

    ep->xfer_buff  += len;
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	68da      	ldr	r2, [r3, #12]
 8002e6e:	69fb      	ldr	r3, [r7, #28]
 8002e70:	441a      	add	r2, r3
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	699a      	ldr	r2, [r3, #24]
 8002e7a:	69fb      	ldr	r3, [r7, #28]
 8002e7c:	441a      	add	r2, r3
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002e82:	683b      	ldr	r3, [r7, #0]
 8002e84:	015a      	lsls	r2, r3, #5
 8002e86:	693b      	ldr	r3, [r7, #16]
 8002e88:	4413      	add	r3, r2
 8002e8a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002e8e:	699b      	ldr	r3, [r3, #24]
 8002e90:	b29b      	uxth	r3, r3
 8002e92:	69ba      	ldr	r2, [r7, #24]
 8002e94:	429a      	cmp	r2, r3
 8002e96:	d809      	bhi.n	8002eac <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	699a      	ldr	r2, [r3, #24]
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002ea0:	429a      	cmp	r2, r3
 8002ea2:	d203      	bcs.n	8002eac <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	695b      	ldr	r3, [r3, #20]
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d1be      	bne.n	8002e2a <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	695a      	ldr	r2, [r3, #20]
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	699b      	ldr	r3, [r3, #24]
 8002eb4:	429a      	cmp	r2, r3
 8002eb6:	d811      	bhi.n	8002edc <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002eb8:	683b      	ldr	r3, [r7, #0]
 8002eba:	f003 030f 	and.w	r3, r3, #15
 8002ebe:	2201      	movs	r2, #1
 8002ec0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ec4:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002ec6:	693b      	ldr	r3, [r7, #16]
 8002ec8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002ecc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002ece:	68bb      	ldr	r3, [r7, #8]
 8002ed0:	43db      	mvns	r3, r3
 8002ed2:	6939      	ldr	r1, [r7, #16]
 8002ed4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002ed8:	4013      	ands	r3, r2
 8002eda:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8002edc:	2300      	movs	r3, #0
}
 8002ede:	4618      	mov	r0, r3
 8002ee0:	3720      	adds	r7, #32
 8002ee2:	46bd      	mov	sp, r7
 8002ee4:	bd80      	pop	{r7, pc}
	...

08002ee8 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002ee8:	b580      	push	{r7, lr}
 8002eea:	b086      	sub	sp, #24
 8002eec:	af00      	add	r7, sp, #0
 8002eee:	6078      	str	r0, [r7, #4]
 8002ef0:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002ef8:	697b      	ldr	r3, [r7, #20]
 8002efa:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002efc:	697b      	ldr	r3, [r7, #20]
 8002efe:	333c      	adds	r3, #60	; 0x3c
 8002f00:	3304      	adds	r3, #4
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002f06:	683b      	ldr	r3, [r7, #0]
 8002f08:	015a      	lsls	r2, r3, #5
 8002f0a:	693b      	ldr	r3, [r7, #16]
 8002f0c:	4413      	add	r3, r2
 8002f0e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002f12:	689b      	ldr	r3, [r3, #8]
 8002f14:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	691b      	ldr	r3, [r3, #16]
 8002f1a:	2b01      	cmp	r3, #1
 8002f1c:	f040 80a0 	bne.w	8003060 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8002f20:	68bb      	ldr	r3, [r7, #8]
 8002f22:	f003 0308 	and.w	r3, r3, #8
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d015      	beq.n	8002f56 <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	4a72      	ldr	r2, [pc, #456]	; (80030f8 <PCD_EP_OutXfrComplete_int+0x210>)
 8002f2e:	4293      	cmp	r3, r2
 8002f30:	f240 80dd 	bls.w	80030ee <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002f34:	68bb      	ldr	r3, [r7, #8]
 8002f36:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	f000 80d7 	beq.w	80030ee <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002f40:	683b      	ldr	r3, [r7, #0]
 8002f42:	015a      	lsls	r2, r3, #5
 8002f44:	693b      	ldr	r3, [r7, #16]
 8002f46:	4413      	add	r3, r2
 8002f48:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002f4c:	461a      	mov	r2, r3
 8002f4e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002f52:	6093      	str	r3, [r2, #8]
 8002f54:	e0cb      	b.n	80030ee <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8002f56:	68bb      	ldr	r3, [r7, #8]
 8002f58:	f003 0320 	and.w	r3, r3, #32
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d009      	beq.n	8002f74 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002f60:	683b      	ldr	r3, [r7, #0]
 8002f62:	015a      	lsls	r2, r3, #5
 8002f64:	693b      	ldr	r3, [r7, #16]
 8002f66:	4413      	add	r3, r2
 8002f68:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002f6c:	461a      	mov	r2, r3
 8002f6e:	2320      	movs	r3, #32
 8002f70:	6093      	str	r3, [r2, #8]
 8002f72:	e0bc      	b.n	80030ee <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8002f74:	68bb      	ldr	r3, [r7, #8]
 8002f76:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	f040 80b7 	bne.w	80030ee <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	4a5d      	ldr	r2, [pc, #372]	; (80030f8 <PCD_EP_OutXfrComplete_int+0x210>)
 8002f84:	4293      	cmp	r3, r2
 8002f86:	d90f      	bls.n	8002fa8 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002f88:	68bb      	ldr	r3, [r7, #8]
 8002f8a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d00a      	beq.n	8002fa8 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002f92:	683b      	ldr	r3, [r7, #0]
 8002f94:	015a      	lsls	r2, r3, #5
 8002f96:	693b      	ldr	r3, [r7, #16]
 8002f98:	4413      	add	r3, r2
 8002f9a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002f9e:	461a      	mov	r2, r3
 8002fa0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002fa4:	6093      	str	r3, [r2, #8]
 8002fa6:	e0a2      	b.n	80030ee <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 8002fa8:	6879      	ldr	r1, [r7, #4]
 8002faa:	683a      	ldr	r2, [r7, #0]
 8002fac:	4613      	mov	r3, r2
 8002fae:	00db      	lsls	r3, r3, #3
 8002fb0:	1a9b      	subs	r3, r3, r2
 8002fb2:	009b      	lsls	r3, r3, #2
 8002fb4:	440b      	add	r3, r1
 8002fb6:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8002fba:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8002fbc:	683b      	ldr	r3, [r7, #0]
 8002fbe:	0159      	lsls	r1, r3, #5
 8002fc0:	693b      	ldr	r3, [r7, #16]
 8002fc2:	440b      	add	r3, r1
 8002fc4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002fc8:	691b      	ldr	r3, [r3, #16]
 8002fca:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 8002fce:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 8002fd0:	6878      	ldr	r0, [r7, #4]
 8002fd2:	683a      	ldr	r2, [r7, #0]
 8002fd4:	4613      	mov	r3, r2
 8002fd6:	00db      	lsls	r3, r3, #3
 8002fd8:	1a9b      	subs	r3, r3, r2
 8002fda:	009b      	lsls	r3, r3, #2
 8002fdc:	4403      	add	r3, r0
 8002fde:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8002fe2:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8002fe4:	6879      	ldr	r1, [r7, #4]
 8002fe6:	683a      	ldr	r2, [r7, #0]
 8002fe8:	4613      	mov	r3, r2
 8002fea:	00db      	lsls	r3, r3, #3
 8002fec:	1a9b      	subs	r3, r3, r2
 8002fee:	009b      	lsls	r3, r3, #2
 8002ff0:	440b      	add	r3, r1
 8002ff2:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002ff6:	6819      	ldr	r1, [r3, #0]
 8002ff8:	6878      	ldr	r0, [r7, #4]
 8002ffa:	683a      	ldr	r2, [r7, #0]
 8002ffc:	4613      	mov	r3, r2
 8002ffe:	00db      	lsls	r3, r3, #3
 8003000:	1a9b      	subs	r3, r3, r2
 8003002:	009b      	lsls	r3, r3, #2
 8003004:	4403      	add	r3, r0
 8003006:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	4419      	add	r1, r3
 800300e:	6878      	ldr	r0, [r7, #4]
 8003010:	683a      	ldr	r2, [r7, #0]
 8003012:	4613      	mov	r3, r2
 8003014:	00db      	lsls	r3, r3, #3
 8003016:	1a9b      	subs	r3, r3, r2
 8003018:	009b      	lsls	r3, r3, #2
 800301a:	4403      	add	r3, r0
 800301c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003020:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8003022:	683b      	ldr	r3, [r7, #0]
 8003024:	2b00      	cmp	r3, #0
 8003026:	d114      	bne.n	8003052 <PCD_EP_OutXfrComplete_int+0x16a>
 8003028:	6879      	ldr	r1, [r7, #4]
 800302a:	683a      	ldr	r2, [r7, #0]
 800302c:	4613      	mov	r3, r2
 800302e:	00db      	lsls	r3, r3, #3
 8003030:	1a9b      	subs	r3, r3, r2
 8003032:	009b      	lsls	r3, r3, #2
 8003034:	440b      	add	r3, r1
 8003036:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	2b00      	cmp	r3, #0
 800303e:	d108      	bne.n	8003052 <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	6818      	ldr	r0, [r3, #0]
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800304a:	461a      	mov	r2, r3
 800304c:	2101      	movs	r1, #1
 800304e:	f003 fc67 	bl	8006920 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003052:	683b      	ldr	r3, [r7, #0]
 8003054:	b2db      	uxtb	r3, r3
 8003056:	4619      	mov	r1, r3
 8003058:	6878      	ldr	r0, [r7, #4]
 800305a:	f005 fc1f 	bl	800889c <HAL_PCD_DataOutStageCallback>
 800305e:	e046      	b.n	80030ee <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	4a26      	ldr	r2, [pc, #152]	; (80030fc <PCD_EP_OutXfrComplete_int+0x214>)
 8003064:	4293      	cmp	r3, r2
 8003066:	d124      	bne.n	80030b2 <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8003068:	68bb      	ldr	r3, [r7, #8]
 800306a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800306e:	2b00      	cmp	r3, #0
 8003070:	d00a      	beq.n	8003088 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003072:	683b      	ldr	r3, [r7, #0]
 8003074:	015a      	lsls	r2, r3, #5
 8003076:	693b      	ldr	r3, [r7, #16]
 8003078:	4413      	add	r3, r2
 800307a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800307e:	461a      	mov	r2, r3
 8003080:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003084:	6093      	str	r3, [r2, #8]
 8003086:	e032      	b.n	80030ee <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003088:	68bb      	ldr	r3, [r7, #8]
 800308a:	f003 0320 	and.w	r3, r3, #32
 800308e:	2b00      	cmp	r3, #0
 8003090:	d008      	beq.n	80030a4 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003092:	683b      	ldr	r3, [r7, #0]
 8003094:	015a      	lsls	r2, r3, #5
 8003096:	693b      	ldr	r3, [r7, #16]
 8003098:	4413      	add	r3, r2
 800309a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800309e:	461a      	mov	r2, r3
 80030a0:	2320      	movs	r3, #32
 80030a2:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80030a4:	683b      	ldr	r3, [r7, #0]
 80030a6:	b2db      	uxtb	r3, r3
 80030a8:	4619      	mov	r1, r3
 80030aa:	6878      	ldr	r0, [r7, #4]
 80030ac:	f005 fbf6 	bl	800889c <HAL_PCD_DataOutStageCallback>
 80030b0:	e01d      	b.n	80030ee <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80030b2:	683b      	ldr	r3, [r7, #0]
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d114      	bne.n	80030e2 <PCD_EP_OutXfrComplete_int+0x1fa>
 80030b8:	6879      	ldr	r1, [r7, #4]
 80030ba:	683a      	ldr	r2, [r7, #0]
 80030bc:	4613      	mov	r3, r2
 80030be:	00db      	lsls	r3, r3, #3
 80030c0:	1a9b      	subs	r3, r3, r2
 80030c2:	009b      	lsls	r3, r3, #2
 80030c4:	440b      	add	r3, r1
 80030c6:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d108      	bne.n	80030e2 <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	6818      	ldr	r0, [r3, #0]
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80030da:	461a      	mov	r2, r3
 80030dc:	2100      	movs	r1, #0
 80030de:	f003 fc1f 	bl	8006920 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80030e2:	683b      	ldr	r3, [r7, #0]
 80030e4:	b2db      	uxtb	r3, r3
 80030e6:	4619      	mov	r1, r3
 80030e8:	6878      	ldr	r0, [r7, #4]
 80030ea:	f005 fbd7 	bl	800889c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80030ee:	2300      	movs	r3, #0
}
 80030f0:	4618      	mov	r0, r3
 80030f2:	3718      	adds	r7, #24
 80030f4:	46bd      	mov	sp, r7
 80030f6:	bd80      	pop	{r7, pc}
 80030f8:	4f54300a 	.word	0x4f54300a
 80030fc:	4f54310a 	.word	0x4f54310a

08003100 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003100:	b580      	push	{r7, lr}
 8003102:	b086      	sub	sp, #24
 8003104:	af00      	add	r7, sp, #0
 8003106:	6078      	str	r0, [r7, #4]
 8003108:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003110:	697b      	ldr	r3, [r7, #20]
 8003112:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003114:	697b      	ldr	r3, [r7, #20]
 8003116:	333c      	adds	r3, #60	; 0x3c
 8003118:	3304      	adds	r3, #4
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800311e:	683b      	ldr	r3, [r7, #0]
 8003120:	015a      	lsls	r2, r3, #5
 8003122:	693b      	ldr	r3, [r7, #16]
 8003124:	4413      	add	r3, r2
 8003126:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800312a:	689b      	ldr	r3, [r3, #8]
 800312c:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	4a15      	ldr	r2, [pc, #84]	; (8003188 <PCD_EP_OutSetupPacket_int+0x88>)
 8003132:	4293      	cmp	r3, r2
 8003134:	d90e      	bls.n	8003154 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003136:	68bb      	ldr	r3, [r7, #8]
 8003138:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800313c:	2b00      	cmp	r3, #0
 800313e:	d009      	beq.n	8003154 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003140:	683b      	ldr	r3, [r7, #0]
 8003142:	015a      	lsls	r2, r3, #5
 8003144:	693b      	ldr	r3, [r7, #16]
 8003146:	4413      	add	r3, r2
 8003148:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800314c:	461a      	mov	r2, r3
 800314e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003152:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8003154:	6878      	ldr	r0, [r7, #4]
 8003156:	f005 fb8f 	bl	8008878 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	4a0a      	ldr	r2, [pc, #40]	; (8003188 <PCD_EP_OutSetupPacket_int+0x88>)
 800315e:	4293      	cmp	r3, r2
 8003160:	d90c      	bls.n	800317c <PCD_EP_OutSetupPacket_int+0x7c>
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	691b      	ldr	r3, [r3, #16]
 8003166:	2b01      	cmp	r3, #1
 8003168:	d108      	bne.n	800317c <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	6818      	ldr	r0, [r3, #0]
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003174:	461a      	mov	r2, r3
 8003176:	2101      	movs	r1, #1
 8003178:	f003 fbd2 	bl	8006920 <USB_EP0_OutStart>
  }

  return HAL_OK;
 800317c:	2300      	movs	r3, #0
}
 800317e:	4618      	mov	r0, r3
 8003180:	3718      	adds	r7, #24
 8003182:	46bd      	mov	sp, r7
 8003184:	bd80      	pop	{r7, pc}
 8003186:	bf00      	nop
 8003188:	4f54300a 	.word	0x4f54300a

0800318c <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 800318c:	b480      	push	{r7}
 800318e:	b085      	sub	sp, #20
 8003190:	af00      	add	r7, sp, #0
 8003192:	6078      	str	r0, [r7, #4]
 8003194:	460b      	mov	r3, r1
 8003196:	70fb      	strb	r3, [r7, #3]
 8003198:	4613      	mov	r3, r2
 800319a:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031a2:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80031a4:	78fb      	ldrb	r3, [r7, #3]
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d107      	bne.n	80031ba <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80031aa:	883b      	ldrh	r3, [r7, #0]
 80031ac:	0419      	lsls	r1, r3, #16
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	68ba      	ldr	r2, [r7, #8]
 80031b4:	430a      	orrs	r2, r1
 80031b6:	629a      	str	r2, [r3, #40]	; 0x28
 80031b8:	e028      	b.n	800320c <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031c0:	0c1b      	lsrs	r3, r3, #16
 80031c2:	68ba      	ldr	r2, [r7, #8]
 80031c4:	4413      	add	r3, r2
 80031c6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80031c8:	2300      	movs	r3, #0
 80031ca:	73fb      	strb	r3, [r7, #15]
 80031cc:	e00d      	b.n	80031ea <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681a      	ldr	r2, [r3, #0]
 80031d2:	7bfb      	ldrb	r3, [r7, #15]
 80031d4:	3340      	adds	r3, #64	; 0x40
 80031d6:	009b      	lsls	r3, r3, #2
 80031d8:	4413      	add	r3, r2
 80031da:	685b      	ldr	r3, [r3, #4]
 80031dc:	0c1b      	lsrs	r3, r3, #16
 80031de:	68ba      	ldr	r2, [r7, #8]
 80031e0:	4413      	add	r3, r2
 80031e2:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80031e4:	7bfb      	ldrb	r3, [r7, #15]
 80031e6:	3301      	adds	r3, #1
 80031e8:	73fb      	strb	r3, [r7, #15]
 80031ea:	7bfa      	ldrb	r2, [r7, #15]
 80031ec:	78fb      	ldrb	r3, [r7, #3]
 80031ee:	3b01      	subs	r3, #1
 80031f0:	429a      	cmp	r2, r3
 80031f2:	d3ec      	bcc.n	80031ce <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80031f4:	883b      	ldrh	r3, [r7, #0]
 80031f6:	0418      	lsls	r0, r3, #16
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	6819      	ldr	r1, [r3, #0]
 80031fc:	78fb      	ldrb	r3, [r7, #3]
 80031fe:	3b01      	subs	r3, #1
 8003200:	68ba      	ldr	r2, [r7, #8]
 8003202:	4302      	orrs	r2, r0
 8003204:	3340      	adds	r3, #64	; 0x40
 8003206:	009b      	lsls	r3, r3, #2
 8003208:	440b      	add	r3, r1
 800320a:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 800320c:	2300      	movs	r3, #0
}
 800320e:	4618      	mov	r0, r3
 8003210:	3714      	adds	r7, #20
 8003212:	46bd      	mov	sp, r7
 8003214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003218:	4770      	bx	lr

0800321a <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800321a:	b480      	push	{r7}
 800321c:	b083      	sub	sp, #12
 800321e:	af00      	add	r7, sp, #0
 8003220:	6078      	str	r0, [r7, #4]
 8003222:	460b      	mov	r3, r1
 8003224:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	887a      	ldrh	r2, [r7, #2]
 800322c:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800322e:	2300      	movs	r3, #0
}
 8003230:	4618      	mov	r0, r3
 8003232:	370c      	adds	r7, #12
 8003234:	46bd      	mov	sp, r7
 8003236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800323a:	4770      	bx	lr

0800323c <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800323c:	b480      	push	{r7}
 800323e:	b085      	sub	sp, #20
 8003240:	af00      	add	r7, sp, #0
 8003242:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	2201      	movs	r2, #1
 800324e:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	2200      	movs	r2, #0
 8003256:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	699b      	ldr	r3, [r3, #24]
 800325e:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800326a:	4b05      	ldr	r3, [pc, #20]	; (8003280 <HAL_PCDEx_ActivateLPM+0x44>)
 800326c:	4313      	orrs	r3, r2
 800326e:	68fa      	ldr	r2, [r7, #12]
 8003270:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8003272:	2300      	movs	r3, #0
}
 8003274:	4618      	mov	r0, r3
 8003276:	3714      	adds	r7, #20
 8003278:	46bd      	mov	sp, r7
 800327a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800327e:	4770      	bx	lr
 8003280:	10000003 	.word	0x10000003

08003284 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8003284:	b480      	push	{r7}
 8003286:	b083      	sub	sp, #12
 8003288:	af00      	add	r7, sp, #0
 800328a:	6078      	str	r0, [r7, #4]
 800328c:	460b      	mov	r3, r1
 800328e:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8003290:	bf00      	nop
 8003292:	370c      	adds	r7, #12
 8003294:	46bd      	mov	sp, r7
 8003296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800329a:	4770      	bx	lr

0800329c <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800329c:	b580      	push	{r7, lr}
 800329e:	b084      	sub	sp, #16
 80032a0:	af00      	add	r7, sp, #0
 80032a2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 80032a4:	4b19      	ldr	r3, [pc, #100]	; (800330c <HAL_PWREx_ConfigSupply+0x70>)
 80032a6:	68db      	ldr	r3, [r3, #12]
 80032a8:	f003 0304 	and.w	r3, r3, #4
 80032ac:	2b04      	cmp	r3, #4
 80032ae:	d00a      	beq.n	80032c6 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80032b0:	4b16      	ldr	r3, [pc, #88]	; (800330c <HAL_PWREx_ConfigSupply+0x70>)
 80032b2:	68db      	ldr	r3, [r3, #12]
 80032b4:	f003 0307 	and.w	r3, r3, #7
 80032b8:	687a      	ldr	r2, [r7, #4]
 80032ba:	429a      	cmp	r2, r3
 80032bc:	d001      	beq.n	80032c2 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80032be:	2301      	movs	r3, #1
 80032c0:	e01f      	b.n	8003302 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80032c2:	2300      	movs	r3, #0
 80032c4:	e01d      	b.n	8003302 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80032c6:	4b11      	ldr	r3, [pc, #68]	; (800330c <HAL_PWREx_ConfigSupply+0x70>)
 80032c8:	68db      	ldr	r3, [r3, #12]
 80032ca:	f023 0207 	bic.w	r2, r3, #7
 80032ce:	490f      	ldr	r1, [pc, #60]	; (800330c <HAL_PWREx_ConfigSupply+0x70>)
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	4313      	orrs	r3, r2
 80032d4:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80032d6:	f7fd fc6b 	bl	8000bb0 <HAL_GetTick>
 80032da:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80032dc:	e009      	b.n	80032f2 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80032de:	f7fd fc67 	bl	8000bb0 <HAL_GetTick>
 80032e2:	4602      	mov	r2, r0
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	1ad3      	subs	r3, r2, r3
 80032e8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80032ec:	d901      	bls.n	80032f2 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80032ee:	2301      	movs	r3, #1
 80032f0:	e007      	b.n	8003302 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80032f2:	4b06      	ldr	r3, [pc, #24]	; (800330c <HAL_PWREx_ConfigSupply+0x70>)
 80032f4:	685b      	ldr	r3, [r3, #4]
 80032f6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80032fa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80032fe:	d1ee      	bne.n	80032de <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8003300:	2300      	movs	r3, #0
}
 8003302:	4618      	mov	r0, r3
 8003304:	3710      	adds	r7, #16
 8003306:	46bd      	mov	sp, r7
 8003308:	bd80      	pop	{r7, pc}
 800330a:	bf00      	nop
 800330c:	58024800 	.word	0x58024800

08003310 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 8003310:	b480      	push	{r7}
 8003312:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8003314:	4b05      	ldr	r3, [pc, #20]	; (800332c <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8003316:	68db      	ldr	r3, [r3, #12]
 8003318:	4a04      	ldr	r2, [pc, #16]	; (800332c <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 800331a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800331e:	60d3      	str	r3, [r2, #12]
}
 8003320:	bf00      	nop
 8003322:	46bd      	mov	sp, r7
 8003324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003328:	4770      	bx	lr
 800332a:	bf00      	nop
 800332c:	58024800 	.word	0x58024800

08003330 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003330:	b580      	push	{r7, lr}
 8003332:	b08c      	sub	sp, #48	; 0x30
 8003334:	af00      	add	r7, sp, #0
 8003336:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	2b00      	cmp	r3, #0
 800333c:	d101      	bne.n	8003342 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800333e:	2301      	movs	r3, #1
 8003340:	e3fd      	b.n	8003b3e <HAL_RCC_OscConfig+0x80e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	f003 0301 	and.w	r3, r3, #1
 800334a:	2b00      	cmp	r3, #0
 800334c:	f000 8087 	beq.w	800345e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003350:	4b99      	ldr	r3, [pc, #612]	; (80035b8 <HAL_RCC_OscConfig+0x288>)
 8003352:	691b      	ldr	r3, [r3, #16]
 8003354:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003358:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800335a:	4b97      	ldr	r3, [pc, #604]	; (80035b8 <HAL_RCC_OscConfig+0x288>)
 800335c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800335e:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8003360:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003362:	2b10      	cmp	r3, #16
 8003364:	d007      	beq.n	8003376 <HAL_RCC_OscConfig+0x46>
 8003366:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003368:	2b18      	cmp	r3, #24
 800336a:	d110      	bne.n	800338e <HAL_RCC_OscConfig+0x5e>
 800336c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800336e:	f003 0303 	and.w	r3, r3, #3
 8003372:	2b02      	cmp	r3, #2
 8003374:	d10b      	bne.n	800338e <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003376:	4b90      	ldr	r3, [pc, #576]	; (80035b8 <HAL_RCC_OscConfig+0x288>)
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800337e:	2b00      	cmp	r3, #0
 8003380:	d06c      	beq.n	800345c <HAL_RCC_OscConfig+0x12c>
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	685b      	ldr	r3, [r3, #4]
 8003386:	2b00      	cmp	r3, #0
 8003388:	d168      	bne.n	800345c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800338a:	2301      	movs	r3, #1
 800338c:	e3d7      	b.n	8003b3e <HAL_RCC_OscConfig+0x80e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	685b      	ldr	r3, [r3, #4]
 8003392:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003396:	d106      	bne.n	80033a6 <HAL_RCC_OscConfig+0x76>
 8003398:	4b87      	ldr	r3, [pc, #540]	; (80035b8 <HAL_RCC_OscConfig+0x288>)
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	4a86      	ldr	r2, [pc, #536]	; (80035b8 <HAL_RCC_OscConfig+0x288>)
 800339e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80033a2:	6013      	str	r3, [r2, #0]
 80033a4:	e02e      	b.n	8003404 <HAL_RCC_OscConfig+0xd4>
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	685b      	ldr	r3, [r3, #4]
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d10c      	bne.n	80033c8 <HAL_RCC_OscConfig+0x98>
 80033ae:	4b82      	ldr	r3, [pc, #520]	; (80035b8 <HAL_RCC_OscConfig+0x288>)
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	4a81      	ldr	r2, [pc, #516]	; (80035b8 <HAL_RCC_OscConfig+0x288>)
 80033b4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80033b8:	6013      	str	r3, [r2, #0]
 80033ba:	4b7f      	ldr	r3, [pc, #508]	; (80035b8 <HAL_RCC_OscConfig+0x288>)
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	4a7e      	ldr	r2, [pc, #504]	; (80035b8 <HAL_RCC_OscConfig+0x288>)
 80033c0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80033c4:	6013      	str	r3, [r2, #0]
 80033c6:	e01d      	b.n	8003404 <HAL_RCC_OscConfig+0xd4>
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	685b      	ldr	r3, [r3, #4]
 80033cc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80033d0:	d10c      	bne.n	80033ec <HAL_RCC_OscConfig+0xbc>
 80033d2:	4b79      	ldr	r3, [pc, #484]	; (80035b8 <HAL_RCC_OscConfig+0x288>)
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	4a78      	ldr	r2, [pc, #480]	; (80035b8 <HAL_RCC_OscConfig+0x288>)
 80033d8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80033dc:	6013      	str	r3, [r2, #0]
 80033de:	4b76      	ldr	r3, [pc, #472]	; (80035b8 <HAL_RCC_OscConfig+0x288>)
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	4a75      	ldr	r2, [pc, #468]	; (80035b8 <HAL_RCC_OscConfig+0x288>)
 80033e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80033e8:	6013      	str	r3, [r2, #0]
 80033ea:	e00b      	b.n	8003404 <HAL_RCC_OscConfig+0xd4>
 80033ec:	4b72      	ldr	r3, [pc, #456]	; (80035b8 <HAL_RCC_OscConfig+0x288>)
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	4a71      	ldr	r2, [pc, #452]	; (80035b8 <HAL_RCC_OscConfig+0x288>)
 80033f2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80033f6:	6013      	str	r3, [r2, #0]
 80033f8:	4b6f      	ldr	r3, [pc, #444]	; (80035b8 <HAL_RCC_OscConfig+0x288>)
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	4a6e      	ldr	r2, [pc, #440]	; (80035b8 <HAL_RCC_OscConfig+0x288>)
 80033fe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003402:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	685b      	ldr	r3, [r3, #4]
 8003408:	2b00      	cmp	r3, #0
 800340a:	d013      	beq.n	8003434 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800340c:	f7fd fbd0 	bl	8000bb0 <HAL_GetTick>
 8003410:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003412:	e008      	b.n	8003426 <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003414:	f7fd fbcc 	bl	8000bb0 <HAL_GetTick>
 8003418:	4602      	mov	r2, r0
 800341a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800341c:	1ad3      	subs	r3, r2, r3
 800341e:	2b64      	cmp	r3, #100	; 0x64
 8003420:	d901      	bls.n	8003426 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003422:	2303      	movs	r3, #3
 8003424:	e38b      	b.n	8003b3e <HAL_RCC_OscConfig+0x80e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003426:	4b64      	ldr	r3, [pc, #400]	; (80035b8 <HAL_RCC_OscConfig+0x288>)
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800342e:	2b00      	cmp	r3, #0
 8003430:	d0f0      	beq.n	8003414 <HAL_RCC_OscConfig+0xe4>
 8003432:	e014      	b.n	800345e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003434:	f7fd fbbc 	bl	8000bb0 <HAL_GetTick>
 8003438:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800343a:	e008      	b.n	800344e <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800343c:	f7fd fbb8 	bl	8000bb0 <HAL_GetTick>
 8003440:	4602      	mov	r2, r0
 8003442:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003444:	1ad3      	subs	r3, r2, r3
 8003446:	2b64      	cmp	r3, #100	; 0x64
 8003448:	d901      	bls.n	800344e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800344a:	2303      	movs	r3, #3
 800344c:	e377      	b.n	8003b3e <HAL_RCC_OscConfig+0x80e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800344e:	4b5a      	ldr	r3, [pc, #360]	; (80035b8 <HAL_RCC_OscConfig+0x288>)
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003456:	2b00      	cmp	r3, #0
 8003458:	d1f0      	bne.n	800343c <HAL_RCC_OscConfig+0x10c>
 800345a:	e000      	b.n	800345e <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800345c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	f003 0302 	and.w	r3, r3, #2
 8003466:	2b00      	cmp	r3, #0
 8003468:	f000 80ae 	beq.w	80035c8 <HAL_RCC_OscConfig+0x298>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800346c:	4b52      	ldr	r3, [pc, #328]	; (80035b8 <HAL_RCC_OscConfig+0x288>)
 800346e:	691b      	ldr	r3, [r3, #16]
 8003470:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003474:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003476:	4b50      	ldr	r3, [pc, #320]	; (80035b8 <HAL_RCC_OscConfig+0x288>)
 8003478:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800347a:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800347c:	6a3b      	ldr	r3, [r7, #32]
 800347e:	2b00      	cmp	r3, #0
 8003480:	d007      	beq.n	8003492 <HAL_RCC_OscConfig+0x162>
 8003482:	6a3b      	ldr	r3, [r7, #32]
 8003484:	2b18      	cmp	r3, #24
 8003486:	d13a      	bne.n	80034fe <HAL_RCC_OscConfig+0x1ce>
 8003488:	69fb      	ldr	r3, [r7, #28]
 800348a:	f003 0303 	and.w	r3, r3, #3
 800348e:	2b00      	cmp	r3, #0
 8003490:	d135      	bne.n	80034fe <HAL_RCC_OscConfig+0x1ce>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003492:	4b49      	ldr	r3, [pc, #292]	; (80035b8 <HAL_RCC_OscConfig+0x288>)
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	f003 0304 	and.w	r3, r3, #4
 800349a:	2b00      	cmp	r3, #0
 800349c:	d005      	beq.n	80034aa <HAL_RCC_OscConfig+0x17a>
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	68db      	ldr	r3, [r3, #12]
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d101      	bne.n	80034aa <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80034a6:	2301      	movs	r3, #1
 80034a8:	e349      	b.n	8003b3e <HAL_RCC_OscConfig+0x80e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80034aa:	f7fd fbb1 	bl	8000c10 <HAL_GetREVID>
 80034ae:	4603      	mov	r3, r0
 80034b0:	f241 0203 	movw	r2, #4099	; 0x1003
 80034b4:	4293      	cmp	r3, r2
 80034b6:	d817      	bhi.n	80034e8 <HAL_RCC_OscConfig+0x1b8>
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	691b      	ldr	r3, [r3, #16]
 80034bc:	2b40      	cmp	r3, #64	; 0x40
 80034be:	d108      	bne.n	80034d2 <HAL_RCC_OscConfig+0x1a2>
 80034c0:	4b3d      	ldr	r3, [pc, #244]	; (80035b8 <HAL_RCC_OscConfig+0x288>)
 80034c2:	685b      	ldr	r3, [r3, #4]
 80034c4:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80034c8:	4a3b      	ldr	r2, [pc, #236]	; (80035b8 <HAL_RCC_OscConfig+0x288>)
 80034ca:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80034ce:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80034d0:	e07a      	b.n	80035c8 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80034d2:	4b39      	ldr	r3, [pc, #228]	; (80035b8 <HAL_RCC_OscConfig+0x288>)
 80034d4:	685b      	ldr	r3, [r3, #4]
 80034d6:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	691b      	ldr	r3, [r3, #16]
 80034de:	031b      	lsls	r3, r3, #12
 80034e0:	4935      	ldr	r1, [pc, #212]	; (80035b8 <HAL_RCC_OscConfig+0x288>)
 80034e2:	4313      	orrs	r3, r2
 80034e4:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80034e6:	e06f      	b.n	80035c8 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80034e8:	4b33      	ldr	r3, [pc, #204]	; (80035b8 <HAL_RCC_OscConfig+0x288>)
 80034ea:	685b      	ldr	r3, [r3, #4]
 80034ec:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	691b      	ldr	r3, [r3, #16]
 80034f4:	061b      	lsls	r3, r3, #24
 80034f6:	4930      	ldr	r1, [pc, #192]	; (80035b8 <HAL_RCC_OscConfig+0x288>)
 80034f8:	4313      	orrs	r3, r2
 80034fa:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80034fc:	e064      	b.n	80035c8 <HAL_RCC_OscConfig+0x298>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	68db      	ldr	r3, [r3, #12]
 8003502:	2b00      	cmp	r3, #0
 8003504:	d045      	beq.n	8003592 <HAL_RCC_OscConfig+0x262>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8003506:	4b2c      	ldr	r3, [pc, #176]	; (80035b8 <HAL_RCC_OscConfig+0x288>)
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	f023 0219 	bic.w	r2, r3, #25
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	68db      	ldr	r3, [r3, #12]
 8003512:	4929      	ldr	r1, [pc, #164]	; (80035b8 <HAL_RCC_OscConfig+0x288>)
 8003514:	4313      	orrs	r3, r2
 8003516:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003518:	f7fd fb4a 	bl	8000bb0 <HAL_GetTick>
 800351c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800351e:	e008      	b.n	8003532 <HAL_RCC_OscConfig+0x202>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003520:	f7fd fb46 	bl	8000bb0 <HAL_GetTick>
 8003524:	4602      	mov	r2, r0
 8003526:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003528:	1ad3      	subs	r3, r2, r3
 800352a:	2b02      	cmp	r3, #2
 800352c:	d901      	bls.n	8003532 <HAL_RCC_OscConfig+0x202>
          {
            return HAL_TIMEOUT;
 800352e:	2303      	movs	r3, #3
 8003530:	e305      	b.n	8003b3e <HAL_RCC_OscConfig+0x80e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003532:	4b21      	ldr	r3, [pc, #132]	; (80035b8 <HAL_RCC_OscConfig+0x288>)
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	f003 0304 	and.w	r3, r3, #4
 800353a:	2b00      	cmp	r3, #0
 800353c:	d0f0      	beq.n	8003520 <HAL_RCC_OscConfig+0x1f0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800353e:	f7fd fb67 	bl	8000c10 <HAL_GetREVID>
 8003542:	4603      	mov	r3, r0
 8003544:	f241 0203 	movw	r2, #4099	; 0x1003
 8003548:	4293      	cmp	r3, r2
 800354a:	d817      	bhi.n	800357c <HAL_RCC_OscConfig+0x24c>
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	691b      	ldr	r3, [r3, #16]
 8003550:	2b40      	cmp	r3, #64	; 0x40
 8003552:	d108      	bne.n	8003566 <HAL_RCC_OscConfig+0x236>
 8003554:	4b18      	ldr	r3, [pc, #96]	; (80035b8 <HAL_RCC_OscConfig+0x288>)
 8003556:	685b      	ldr	r3, [r3, #4]
 8003558:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800355c:	4a16      	ldr	r2, [pc, #88]	; (80035b8 <HAL_RCC_OscConfig+0x288>)
 800355e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003562:	6053      	str	r3, [r2, #4]
 8003564:	e030      	b.n	80035c8 <HAL_RCC_OscConfig+0x298>
 8003566:	4b14      	ldr	r3, [pc, #80]	; (80035b8 <HAL_RCC_OscConfig+0x288>)
 8003568:	685b      	ldr	r3, [r3, #4]
 800356a:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	691b      	ldr	r3, [r3, #16]
 8003572:	031b      	lsls	r3, r3, #12
 8003574:	4910      	ldr	r1, [pc, #64]	; (80035b8 <HAL_RCC_OscConfig+0x288>)
 8003576:	4313      	orrs	r3, r2
 8003578:	604b      	str	r3, [r1, #4]
 800357a:	e025      	b.n	80035c8 <HAL_RCC_OscConfig+0x298>
 800357c:	4b0e      	ldr	r3, [pc, #56]	; (80035b8 <HAL_RCC_OscConfig+0x288>)
 800357e:	685b      	ldr	r3, [r3, #4]
 8003580:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	691b      	ldr	r3, [r3, #16]
 8003588:	061b      	lsls	r3, r3, #24
 800358a:	490b      	ldr	r1, [pc, #44]	; (80035b8 <HAL_RCC_OscConfig+0x288>)
 800358c:	4313      	orrs	r3, r2
 800358e:	604b      	str	r3, [r1, #4]
 8003590:	e01a      	b.n	80035c8 <HAL_RCC_OscConfig+0x298>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003592:	4b09      	ldr	r3, [pc, #36]	; (80035b8 <HAL_RCC_OscConfig+0x288>)
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	4a08      	ldr	r2, [pc, #32]	; (80035b8 <HAL_RCC_OscConfig+0x288>)
 8003598:	f023 0301 	bic.w	r3, r3, #1
 800359c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800359e:	f7fd fb07 	bl	8000bb0 <HAL_GetTick>
 80035a2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80035a4:	e00a      	b.n	80035bc <HAL_RCC_OscConfig+0x28c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80035a6:	f7fd fb03 	bl	8000bb0 <HAL_GetTick>
 80035aa:	4602      	mov	r2, r0
 80035ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035ae:	1ad3      	subs	r3, r2, r3
 80035b0:	2b02      	cmp	r3, #2
 80035b2:	d903      	bls.n	80035bc <HAL_RCC_OscConfig+0x28c>
          {
            return HAL_TIMEOUT;
 80035b4:	2303      	movs	r3, #3
 80035b6:	e2c2      	b.n	8003b3e <HAL_RCC_OscConfig+0x80e>
 80035b8:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80035bc:	4b94      	ldr	r3, [pc, #592]	; (8003810 <HAL_RCC_OscConfig+0x4e0>)
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	f003 0304 	and.w	r3, r3, #4
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d1ee      	bne.n	80035a6 <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	f003 0310 	and.w	r3, r3, #16
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	f000 80a9 	beq.w	8003728 <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80035d6:	4b8e      	ldr	r3, [pc, #568]	; (8003810 <HAL_RCC_OscConfig+0x4e0>)
 80035d8:	691b      	ldr	r3, [r3, #16]
 80035da:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80035de:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80035e0:	4b8b      	ldr	r3, [pc, #556]	; (8003810 <HAL_RCC_OscConfig+0x4e0>)
 80035e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035e4:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80035e6:	69bb      	ldr	r3, [r7, #24]
 80035e8:	2b08      	cmp	r3, #8
 80035ea:	d007      	beq.n	80035fc <HAL_RCC_OscConfig+0x2cc>
 80035ec:	69bb      	ldr	r3, [r7, #24]
 80035ee:	2b18      	cmp	r3, #24
 80035f0:	d13a      	bne.n	8003668 <HAL_RCC_OscConfig+0x338>
 80035f2:	697b      	ldr	r3, [r7, #20]
 80035f4:	f003 0303 	and.w	r3, r3, #3
 80035f8:	2b01      	cmp	r3, #1
 80035fa:	d135      	bne.n	8003668 <HAL_RCC_OscConfig+0x338>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80035fc:	4b84      	ldr	r3, [pc, #528]	; (8003810 <HAL_RCC_OscConfig+0x4e0>)
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003604:	2b00      	cmp	r3, #0
 8003606:	d005      	beq.n	8003614 <HAL_RCC_OscConfig+0x2e4>
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	69db      	ldr	r3, [r3, #28]
 800360c:	2b80      	cmp	r3, #128	; 0x80
 800360e:	d001      	beq.n	8003614 <HAL_RCC_OscConfig+0x2e4>
      {
        return HAL_ERROR;
 8003610:	2301      	movs	r3, #1
 8003612:	e294      	b.n	8003b3e <HAL_RCC_OscConfig+0x80e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003614:	f7fd fafc 	bl	8000c10 <HAL_GetREVID>
 8003618:	4603      	mov	r3, r0
 800361a:	f241 0203 	movw	r2, #4099	; 0x1003
 800361e:	4293      	cmp	r3, r2
 8003620:	d817      	bhi.n	8003652 <HAL_RCC_OscConfig+0x322>
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	6a1b      	ldr	r3, [r3, #32]
 8003626:	2b20      	cmp	r3, #32
 8003628:	d108      	bne.n	800363c <HAL_RCC_OscConfig+0x30c>
 800362a:	4b79      	ldr	r3, [pc, #484]	; (8003810 <HAL_RCC_OscConfig+0x4e0>)
 800362c:	685b      	ldr	r3, [r3, #4]
 800362e:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8003632:	4a77      	ldr	r2, [pc, #476]	; (8003810 <HAL_RCC_OscConfig+0x4e0>)
 8003634:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003638:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800363a:	e075      	b.n	8003728 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800363c:	4b74      	ldr	r3, [pc, #464]	; (8003810 <HAL_RCC_OscConfig+0x4e0>)
 800363e:	685b      	ldr	r3, [r3, #4]
 8003640:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	6a1b      	ldr	r3, [r3, #32]
 8003648:	069b      	lsls	r3, r3, #26
 800364a:	4971      	ldr	r1, [pc, #452]	; (8003810 <HAL_RCC_OscConfig+0x4e0>)
 800364c:	4313      	orrs	r3, r2
 800364e:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003650:	e06a      	b.n	8003728 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003652:	4b6f      	ldr	r3, [pc, #444]	; (8003810 <HAL_RCC_OscConfig+0x4e0>)
 8003654:	68db      	ldr	r3, [r3, #12]
 8003656:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	6a1b      	ldr	r3, [r3, #32]
 800365e:	061b      	lsls	r3, r3, #24
 8003660:	496b      	ldr	r1, [pc, #428]	; (8003810 <HAL_RCC_OscConfig+0x4e0>)
 8003662:	4313      	orrs	r3, r2
 8003664:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003666:	e05f      	b.n	8003728 <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	69db      	ldr	r3, [r3, #28]
 800366c:	2b00      	cmp	r3, #0
 800366e:	d042      	beq.n	80036f6 <HAL_RCC_OscConfig+0x3c6>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8003670:	4b67      	ldr	r3, [pc, #412]	; (8003810 <HAL_RCC_OscConfig+0x4e0>)
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	4a66      	ldr	r2, [pc, #408]	; (8003810 <HAL_RCC_OscConfig+0x4e0>)
 8003676:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800367a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800367c:	f7fd fa98 	bl	8000bb0 <HAL_GetTick>
 8003680:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003682:	e008      	b.n	8003696 <HAL_RCC_OscConfig+0x366>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8003684:	f7fd fa94 	bl	8000bb0 <HAL_GetTick>
 8003688:	4602      	mov	r2, r0
 800368a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800368c:	1ad3      	subs	r3, r2, r3
 800368e:	2b02      	cmp	r3, #2
 8003690:	d901      	bls.n	8003696 <HAL_RCC_OscConfig+0x366>
          {
            return HAL_TIMEOUT;
 8003692:	2303      	movs	r3, #3
 8003694:	e253      	b.n	8003b3e <HAL_RCC_OscConfig+0x80e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003696:	4b5e      	ldr	r3, [pc, #376]	; (8003810 <HAL_RCC_OscConfig+0x4e0>)
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d0f0      	beq.n	8003684 <HAL_RCC_OscConfig+0x354>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80036a2:	f7fd fab5 	bl	8000c10 <HAL_GetREVID>
 80036a6:	4603      	mov	r3, r0
 80036a8:	f241 0203 	movw	r2, #4099	; 0x1003
 80036ac:	4293      	cmp	r3, r2
 80036ae:	d817      	bhi.n	80036e0 <HAL_RCC_OscConfig+0x3b0>
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	6a1b      	ldr	r3, [r3, #32]
 80036b4:	2b20      	cmp	r3, #32
 80036b6:	d108      	bne.n	80036ca <HAL_RCC_OscConfig+0x39a>
 80036b8:	4b55      	ldr	r3, [pc, #340]	; (8003810 <HAL_RCC_OscConfig+0x4e0>)
 80036ba:	685b      	ldr	r3, [r3, #4]
 80036bc:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80036c0:	4a53      	ldr	r2, [pc, #332]	; (8003810 <HAL_RCC_OscConfig+0x4e0>)
 80036c2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80036c6:	6053      	str	r3, [r2, #4]
 80036c8:	e02e      	b.n	8003728 <HAL_RCC_OscConfig+0x3f8>
 80036ca:	4b51      	ldr	r3, [pc, #324]	; (8003810 <HAL_RCC_OscConfig+0x4e0>)
 80036cc:	685b      	ldr	r3, [r3, #4]
 80036ce:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	6a1b      	ldr	r3, [r3, #32]
 80036d6:	069b      	lsls	r3, r3, #26
 80036d8:	494d      	ldr	r1, [pc, #308]	; (8003810 <HAL_RCC_OscConfig+0x4e0>)
 80036da:	4313      	orrs	r3, r2
 80036dc:	604b      	str	r3, [r1, #4]
 80036de:	e023      	b.n	8003728 <HAL_RCC_OscConfig+0x3f8>
 80036e0:	4b4b      	ldr	r3, [pc, #300]	; (8003810 <HAL_RCC_OscConfig+0x4e0>)
 80036e2:	68db      	ldr	r3, [r3, #12]
 80036e4:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	6a1b      	ldr	r3, [r3, #32]
 80036ec:	061b      	lsls	r3, r3, #24
 80036ee:	4948      	ldr	r1, [pc, #288]	; (8003810 <HAL_RCC_OscConfig+0x4e0>)
 80036f0:	4313      	orrs	r3, r2
 80036f2:	60cb      	str	r3, [r1, #12]
 80036f4:	e018      	b.n	8003728 <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80036f6:	4b46      	ldr	r3, [pc, #280]	; (8003810 <HAL_RCC_OscConfig+0x4e0>)
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	4a45      	ldr	r2, [pc, #276]	; (8003810 <HAL_RCC_OscConfig+0x4e0>)
 80036fc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003700:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003702:	f7fd fa55 	bl	8000bb0 <HAL_GetTick>
 8003706:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003708:	e008      	b.n	800371c <HAL_RCC_OscConfig+0x3ec>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800370a:	f7fd fa51 	bl	8000bb0 <HAL_GetTick>
 800370e:	4602      	mov	r2, r0
 8003710:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003712:	1ad3      	subs	r3, r2, r3
 8003714:	2b02      	cmp	r3, #2
 8003716:	d901      	bls.n	800371c <HAL_RCC_OscConfig+0x3ec>
          {
            return HAL_TIMEOUT;
 8003718:	2303      	movs	r3, #3
 800371a:	e210      	b.n	8003b3e <HAL_RCC_OscConfig+0x80e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800371c:	4b3c      	ldr	r3, [pc, #240]	; (8003810 <HAL_RCC_OscConfig+0x4e0>)
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003724:	2b00      	cmp	r3, #0
 8003726:	d1f0      	bne.n	800370a <HAL_RCC_OscConfig+0x3da>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	f003 0308 	and.w	r3, r3, #8
 8003730:	2b00      	cmp	r3, #0
 8003732:	d036      	beq.n	80037a2 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	695b      	ldr	r3, [r3, #20]
 8003738:	2b00      	cmp	r3, #0
 800373a:	d019      	beq.n	8003770 <HAL_RCC_OscConfig+0x440>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800373c:	4b34      	ldr	r3, [pc, #208]	; (8003810 <HAL_RCC_OscConfig+0x4e0>)
 800373e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003740:	4a33      	ldr	r2, [pc, #204]	; (8003810 <HAL_RCC_OscConfig+0x4e0>)
 8003742:	f043 0301 	orr.w	r3, r3, #1
 8003746:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003748:	f7fd fa32 	bl	8000bb0 <HAL_GetTick>
 800374c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800374e:	e008      	b.n	8003762 <HAL_RCC_OscConfig+0x432>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003750:	f7fd fa2e 	bl	8000bb0 <HAL_GetTick>
 8003754:	4602      	mov	r2, r0
 8003756:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003758:	1ad3      	subs	r3, r2, r3
 800375a:	2b02      	cmp	r3, #2
 800375c:	d901      	bls.n	8003762 <HAL_RCC_OscConfig+0x432>
        {
          return HAL_TIMEOUT;
 800375e:	2303      	movs	r3, #3
 8003760:	e1ed      	b.n	8003b3e <HAL_RCC_OscConfig+0x80e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003762:	4b2b      	ldr	r3, [pc, #172]	; (8003810 <HAL_RCC_OscConfig+0x4e0>)
 8003764:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003766:	f003 0302 	and.w	r3, r3, #2
 800376a:	2b00      	cmp	r3, #0
 800376c:	d0f0      	beq.n	8003750 <HAL_RCC_OscConfig+0x420>
 800376e:	e018      	b.n	80037a2 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003770:	4b27      	ldr	r3, [pc, #156]	; (8003810 <HAL_RCC_OscConfig+0x4e0>)
 8003772:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003774:	4a26      	ldr	r2, [pc, #152]	; (8003810 <HAL_RCC_OscConfig+0x4e0>)
 8003776:	f023 0301 	bic.w	r3, r3, #1
 800377a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800377c:	f7fd fa18 	bl	8000bb0 <HAL_GetTick>
 8003780:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003782:	e008      	b.n	8003796 <HAL_RCC_OscConfig+0x466>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003784:	f7fd fa14 	bl	8000bb0 <HAL_GetTick>
 8003788:	4602      	mov	r2, r0
 800378a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800378c:	1ad3      	subs	r3, r2, r3
 800378e:	2b02      	cmp	r3, #2
 8003790:	d901      	bls.n	8003796 <HAL_RCC_OscConfig+0x466>
        {
          return HAL_TIMEOUT;
 8003792:	2303      	movs	r3, #3
 8003794:	e1d3      	b.n	8003b3e <HAL_RCC_OscConfig+0x80e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003796:	4b1e      	ldr	r3, [pc, #120]	; (8003810 <HAL_RCC_OscConfig+0x4e0>)
 8003798:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800379a:	f003 0302 	and.w	r3, r3, #2
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d1f0      	bne.n	8003784 <HAL_RCC_OscConfig+0x454>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	f003 0320 	and.w	r3, r3, #32
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d038      	beq.n	8003820 <HAL_RCC_OscConfig+0x4f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	699b      	ldr	r3, [r3, #24]
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d019      	beq.n	80037ea <HAL_RCC_OscConfig+0x4ba>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80037b6:	4b16      	ldr	r3, [pc, #88]	; (8003810 <HAL_RCC_OscConfig+0x4e0>)
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	4a15      	ldr	r2, [pc, #84]	; (8003810 <HAL_RCC_OscConfig+0x4e0>)
 80037bc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80037c0:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80037c2:	f7fd f9f5 	bl	8000bb0 <HAL_GetTick>
 80037c6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80037c8:	e008      	b.n	80037dc <HAL_RCC_OscConfig+0x4ac>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80037ca:	f7fd f9f1 	bl	8000bb0 <HAL_GetTick>
 80037ce:	4602      	mov	r2, r0
 80037d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037d2:	1ad3      	subs	r3, r2, r3
 80037d4:	2b02      	cmp	r3, #2
 80037d6:	d901      	bls.n	80037dc <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 80037d8:	2303      	movs	r3, #3
 80037da:	e1b0      	b.n	8003b3e <HAL_RCC_OscConfig+0x80e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80037dc:	4b0c      	ldr	r3, [pc, #48]	; (8003810 <HAL_RCC_OscConfig+0x4e0>)
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d0f0      	beq.n	80037ca <HAL_RCC_OscConfig+0x49a>
 80037e8:	e01a      	b.n	8003820 <HAL_RCC_OscConfig+0x4f0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80037ea:	4b09      	ldr	r3, [pc, #36]	; (8003810 <HAL_RCC_OscConfig+0x4e0>)
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	4a08      	ldr	r2, [pc, #32]	; (8003810 <HAL_RCC_OscConfig+0x4e0>)
 80037f0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80037f4:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80037f6:	f7fd f9db 	bl	8000bb0 <HAL_GetTick>
 80037fa:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80037fc:	e00a      	b.n	8003814 <HAL_RCC_OscConfig+0x4e4>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80037fe:	f7fd f9d7 	bl	8000bb0 <HAL_GetTick>
 8003802:	4602      	mov	r2, r0
 8003804:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003806:	1ad3      	subs	r3, r2, r3
 8003808:	2b02      	cmp	r3, #2
 800380a:	d903      	bls.n	8003814 <HAL_RCC_OscConfig+0x4e4>
        {
          return HAL_TIMEOUT;
 800380c:	2303      	movs	r3, #3
 800380e:	e196      	b.n	8003b3e <HAL_RCC_OscConfig+0x80e>
 8003810:	58024400 	.word	0x58024400
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003814:	4b99      	ldr	r3, [pc, #612]	; (8003a7c <HAL_RCC_OscConfig+0x74c>)
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800381c:	2b00      	cmp	r3, #0
 800381e:	d1ee      	bne.n	80037fe <HAL_RCC_OscConfig+0x4ce>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	f003 0304 	and.w	r3, r3, #4
 8003828:	2b00      	cmp	r3, #0
 800382a:	f000 8081 	beq.w	8003930 <HAL_RCC_OscConfig+0x600>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800382e:	4b94      	ldr	r3, [pc, #592]	; (8003a80 <HAL_RCC_OscConfig+0x750>)
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	4a93      	ldr	r2, [pc, #588]	; (8003a80 <HAL_RCC_OscConfig+0x750>)
 8003834:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003838:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800383a:	f7fd f9b9 	bl	8000bb0 <HAL_GetTick>
 800383e:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003840:	e008      	b.n	8003854 <HAL_RCC_OscConfig+0x524>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8003842:	f7fd f9b5 	bl	8000bb0 <HAL_GetTick>
 8003846:	4602      	mov	r2, r0
 8003848:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800384a:	1ad3      	subs	r3, r2, r3
 800384c:	2b64      	cmp	r3, #100	; 0x64
 800384e:	d901      	bls.n	8003854 <HAL_RCC_OscConfig+0x524>
      {
        return HAL_TIMEOUT;
 8003850:	2303      	movs	r3, #3
 8003852:	e174      	b.n	8003b3e <HAL_RCC_OscConfig+0x80e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003854:	4b8a      	ldr	r3, [pc, #552]	; (8003a80 <HAL_RCC_OscConfig+0x750>)
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800385c:	2b00      	cmp	r3, #0
 800385e:	d0f0      	beq.n	8003842 <HAL_RCC_OscConfig+0x512>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	689b      	ldr	r3, [r3, #8]
 8003864:	2b01      	cmp	r3, #1
 8003866:	d106      	bne.n	8003876 <HAL_RCC_OscConfig+0x546>
 8003868:	4b84      	ldr	r3, [pc, #528]	; (8003a7c <HAL_RCC_OscConfig+0x74c>)
 800386a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800386c:	4a83      	ldr	r2, [pc, #524]	; (8003a7c <HAL_RCC_OscConfig+0x74c>)
 800386e:	f043 0301 	orr.w	r3, r3, #1
 8003872:	6713      	str	r3, [r2, #112]	; 0x70
 8003874:	e02d      	b.n	80038d2 <HAL_RCC_OscConfig+0x5a2>
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	689b      	ldr	r3, [r3, #8]
 800387a:	2b00      	cmp	r3, #0
 800387c:	d10c      	bne.n	8003898 <HAL_RCC_OscConfig+0x568>
 800387e:	4b7f      	ldr	r3, [pc, #508]	; (8003a7c <HAL_RCC_OscConfig+0x74c>)
 8003880:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003882:	4a7e      	ldr	r2, [pc, #504]	; (8003a7c <HAL_RCC_OscConfig+0x74c>)
 8003884:	f023 0301 	bic.w	r3, r3, #1
 8003888:	6713      	str	r3, [r2, #112]	; 0x70
 800388a:	4b7c      	ldr	r3, [pc, #496]	; (8003a7c <HAL_RCC_OscConfig+0x74c>)
 800388c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800388e:	4a7b      	ldr	r2, [pc, #492]	; (8003a7c <HAL_RCC_OscConfig+0x74c>)
 8003890:	f023 0304 	bic.w	r3, r3, #4
 8003894:	6713      	str	r3, [r2, #112]	; 0x70
 8003896:	e01c      	b.n	80038d2 <HAL_RCC_OscConfig+0x5a2>
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	689b      	ldr	r3, [r3, #8]
 800389c:	2b05      	cmp	r3, #5
 800389e:	d10c      	bne.n	80038ba <HAL_RCC_OscConfig+0x58a>
 80038a0:	4b76      	ldr	r3, [pc, #472]	; (8003a7c <HAL_RCC_OscConfig+0x74c>)
 80038a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038a4:	4a75      	ldr	r2, [pc, #468]	; (8003a7c <HAL_RCC_OscConfig+0x74c>)
 80038a6:	f043 0304 	orr.w	r3, r3, #4
 80038aa:	6713      	str	r3, [r2, #112]	; 0x70
 80038ac:	4b73      	ldr	r3, [pc, #460]	; (8003a7c <HAL_RCC_OscConfig+0x74c>)
 80038ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038b0:	4a72      	ldr	r2, [pc, #456]	; (8003a7c <HAL_RCC_OscConfig+0x74c>)
 80038b2:	f043 0301 	orr.w	r3, r3, #1
 80038b6:	6713      	str	r3, [r2, #112]	; 0x70
 80038b8:	e00b      	b.n	80038d2 <HAL_RCC_OscConfig+0x5a2>
 80038ba:	4b70      	ldr	r3, [pc, #448]	; (8003a7c <HAL_RCC_OscConfig+0x74c>)
 80038bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038be:	4a6f      	ldr	r2, [pc, #444]	; (8003a7c <HAL_RCC_OscConfig+0x74c>)
 80038c0:	f023 0301 	bic.w	r3, r3, #1
 80038c4:	6713      	str	r3, [r2, #112]	; 0x70
 80038c6:	4b6d      	ldr	r3, [pc, #436]	; (8003a7c <HAL_RCC_OscConfig+0x74c>)
 80038c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038ca:	4a6c      	ldr	r2, [pc, #432]	; (8003a7c <HAL_RCC_OscConfig+0x74c>)
 80038cc:	f023 0304 	bic.w	r3, r3, #4
 80038d0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	689b      	ldr	r3, [r3, #8]
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d015      	beq.n	8003906 <HAL_RCC_OscConfig+0x5d6>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80038da:	f7fd f969 	bl	8000bb0 <HAL_GetTick>
 80038de:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80038e0:	e00a      	b.n	80038f8 <HAL_RCC_OscConfig+0x5c8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80038e2:	f7fd f965 	bl	8000bb0 <HAL_GetTick>
 80038e6:	4602      	mov	r2, r0
 80038e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038ea:	1ad3      	subs	r3, r2, r3
 80038ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80038f0:	4293      	cmp	r3, r2
 80038f2:	d901      	bls.n	80038f8 <HAL_RCC_OscConfig+0x5c8>
        {
          return HAL_TIMEOUT;
 80038f4:	2303      	movs	r3, #3
 80038f6:	e122      	b.n	8003b3e <HAL_RCC_OscConfig+0x80e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80038f8:	4b60      	ldr	r3, [pc, #384]	; (8003a7c <HAL_RCC_OscConfig+0x74c>)
 80038fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038fc:	f003 0302 	and.w	r3, r3, #2
 8003900:	2b00      	cmp	r3, #0
 8003902:	d0ee      	beq.n	80038e2 <HAL_RCC_OscConfig+0x5b2>
 8003904:	e014      	b.n	8003930 <HAL_RCC_OscConfig+0x600>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003906:	f7fd f953 	bl	8000bb0 <HAL_GetTick>
 800390a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800390c:	e00a      	b.n	8003924 <HAL_RCC_OscConfig+0x5f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800390e:	f7fd f94f 	bl	8000bb0 <HAL_GetTick>
 8003912:	4602      	mov	r2, r0
 8003914:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003916:	1ad3      	subs	r3, r2, r3
 8003918:	f241 3288 	movw	r2, #5000	; 0x1388
 800391c:	4293      	cmp	r3, r2
 800391e:	d901      	bls.n	8003924 <HAL_RCC_OscConfig+0x5f4>
        {
          return HAL_TIMEOUT;
 8003920:	2303      	movs	r3, #3
 8003922:	e10c      	b.n	8003b3e <HAL_RCC_OscConfig+0x80e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003924:	4b55      	ldr	r3, [pc, #340]	; (8003a7c <HAL_RCC_OscConfig+0x74c>)
 8003926:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003928:	f003 0302 	and.w	r3, r3, #2
 800392c:	2b00      	cmp	r3, #0
 800392e:	d1ee      	bne.n	800390e <HAL_RCC_OscConfig+0x5de>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003934:	2b00      	cmp	r3, #0
 8003936:	f000 8101 	beq.w	8003b3c <HAL_RCC_OscConfig+0x80c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800393a:	4b50      	ldr	r3, [pc, #320]	; (8003a7c <HAL_RCC_OscConfig+0x74c>)
 800393c:	691b      	ldr	r3, [r3, #16]
 800393e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003942:	2b18      	cmp	r3, #24
 8003944:	f000 80bc 	beq.w	8003ac0 <HAL_RCC_OscConfig+0x790>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800394c:	2b02      	cmp	r3, #2
 800394e:	f040 809d 	bne.w	8003a8c <HAL_RCC_OscConfig+0x75c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003952:	4b4a      	ldr	r3, [pc, #296]	; (8003a7c <HAL_RCC_OscConfig+0x74c>)
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	4a49      	ldr	r2, [pc, #292]	; (8003a7c <HAL_RCC_OscConfig+0x74c>)
 8003958:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800395c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800395e:	f7fd f927 	bl	8000bb0 <HAL_GetTick>
 8003962:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003964:	e008      	b.n	8003978 <HAL_RCC_OscConfig+0x648>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003966:	f7fd f923 	bl	8000bb0 <HAL_GetTick>
 800396a:	4602      	mov	r2, r0
 800396c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800396e:	1ad3      	subs	r3, r2, r3
 8003970:	2b02      	cmp	r3, #2
 8003972:	d901      	bls.n	8003978 <HAL_RCC_OscConfig+0x648>
          {
            return HAL_TIMEOUT;
 8003974:	2303      	movs	r3, #3
 8003976:	e0e2      	b.n	8003b3e <HAL_RCC_OscConfig+0x80e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003978:	4b40      	ldr	r3, [pc, #256]	; (8003a7c <HAL_RCC_OscConfig+0x74c>)
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003980:	2b00      	cmp	r3, #0
 8003982:	d1f0      	bne.n	8003966 <HAL_RCC_OscConfig+0x636>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003984:	4b3d      	ldr	r3, [pc, #244]	; (8003a7c <HAL_RCC_OscConfig+0x74c>)
 8003986:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003988:	4b3e      	ldr	r3, [pc, #248]	; (8003a84 <HAL_RCC_OscConfig+0x754>)
 800398a:	4013      	ands	r3, r2
 800398c:	687a      	ldr	r2, [r7, #4]
 800398e:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8003990:	687a      	ldr	r2, [r7, #4]
 8003992:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8003994:	0112      	lsls	r2, r2, #4
 8003996:	430a      	orrs	r2, r1
 8003998:	4938      	ldr	r1, [pc, #224]	; (8003a7c <HAL_RCC_OscConfig+0x74c>)
 800399a:	4313      	orrs	r3, r2
 800399c:	628b      	str	r3, [r1, #40]	; 0x28
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039a2:	3b01      	subs	r3, #1
 80039a4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80039ac:	3b01      	subs	r3, #1
 80039ae:	025b      	lsls	r3, r3, #9
 80039b0:	b29b      	uxth	r3, r3
 80039b2:	431a      	orrs	r2, r3
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039b8:	3b01      	subs	r3, #1
 80039ba:	041b      	lsls	r3, r3, #16
 80039bc:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80039c0:	431a      	orrs	r2, r3
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039c6:	3b01      	subs	r3, #1
 80039c8:	061b      	lsls	r3, r3, #24
 80039ca:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80039ce:	492b      	ldr	r1, [pc, #172]	; (8003a7c <HAL_RCC_OscConfig+0x74c>)
 80039d0:	4313      	orrs	r3, r2
 80039d2:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 80039d4:	4b29      	ldr	r3, [pc, #164]	; (8003a7c <HAL_RCC_OscConfig+0x74c>)
 80039d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039d8:	4a28      	ldr	r2, [pc, #160]	; (8003a7c <HAL_RCC_OscConfig+0x74c>)
 80039da:	f023 0301 	bic.w	r3, r3, #1
 80039de:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80039e0:	4b26      	ldr	r3, [pc, #152]	; (8003a7c <HAL_RCC_OscConfig+0x74c>)
 80039e2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80039e4:	4b28      	ldr	r3, [pc, #160]	; (8003a88 <HAL_RCC_OscConfig+0x758>)
 80039e6:	4013      	ands	r3, r2
 80039e8:	687a      	ldr	r2, [r7, #4]
 80039ea:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80039ec:	00d2      	lsls	r2, r2, #3
 80039ee:	4923      	ldr	r1, [pc, #140]	; (8003a7c <HAL_RCC_OscConfig+0x74c>)
 80039f0:	4313      	orrs	r3, r2
 80039f2:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80039f4:	4b21      	ldr	r3, [pc, #132]	; (8003a7c <HAL_RCC_OscConfig+0x74c>)
 80039f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039f8:	f023 020c 	bic.w	r2, r3, #12
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a00:	491e      	ldr	r1, [pc, #120]	; (8003a7c <HAL_RCC_OscConfig+0x74c>)
 8003a02:	4313      	orrs	r3, r2
 8003a04:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8003a06:	4b1d      	ldr	r3, [pc, #116]	; (8003a7c <HAL_RCC_OscConfig+0x74c>)
 8003a08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a0a:	f023 0202 	bic.w	r2, r3, #2
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a12:	491a      	ldr	r1, [pc, #104]	; (8003a7c <HAL_RCC_OscConfig+0x74c>)
 8003a14:	4313      	orrs	r3, r2
 8003a16:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8003a18:	4b18      	ldr	r3, [pc, #96]	; (8003a7c <HAL_RCC_OscConfig+0x74c>)
 8003a1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a1c:	4a17      	ldr	r2, [pc, #92]	; (8003a7c <HAL_RCC_OscConfig+0x74c>)
 8003a1e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a22:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003a24:	4b15      	ldr	r3, [pc, #84]	; (8003a7c <HAL_RCC_OscConfig+0x74c>)
 8003a26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a28:	4a14      	ldr	r2, [pc, #80]	; (8003a7c <HAL_RCC_OscConfig+0x74c>)
 8003a2a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003a2e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8003a30:	4b12      	ldr	r3, [pc, #72]	; (8003a7c <HAL_RCC_OscConfig+0x74c>)
 8003a32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a34:	4a11      	ldr	r2, [pc, #68]	; (8003a7c <HAL_RCC_OscConfig+0x74c>)
 8003a36:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003a3a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8003a3c:	4b0f      	ldr	r3, [pc, #60]	; (8003a7c <HAL_RCC_OscConfig+0x74c>)
 8003a3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a40:	4a0e      	ldr	r2, [pc, #56]	; (8003a7c <HAL_RCC_OscConfig+0x74c>)
 8003a42:	f043 0301 	orr.w	r3, r3, #1
 8003a46:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003a48:	4b0c      	ldr	r3, [pc, #48]	; (8003a7c <HAL_RCC_OscConfig+0x74c>)
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	4a0b      	ldr	r2, [pc, #44]	; (8003a7c <HAL_RCC_OscConfig+0x74c>)
 8003a4e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003a52:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a54:	f7fd f8ac 	bl	8000bb0 <HAL_GetTick>
 8003a58:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003a5a:	e008      	b.n	8003a6e <HAL_RCC_OscConfig+0x73e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003a5c:	f7fd f8a8 	bl	8000bb0 <HAL_GetTick>
 8003a60:	4602      	mov	r2, r0
 8003a62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a64:	1ad3      	subs	r3, r2, r3
 8003a66:	2b02      	cmp	r3, #2
 8003a68:	d901      	bls.n	8003a6e <HAL_RCC_OscConfig+0x73e>
          {
            return HAL_TIMEOUT;
 8003a6a:	2303      	movs	r3, #3
 8003a6c:	e067      	b.n	8003b3e <HAL_RCC_OscConfig+0x80e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003a6e:	4b03      	ldr	r3, [pc, #12]	; (8003a7c <HAL_RCC_OscConfig+0x74c>)
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d0f0      	beq.n	8003a5c <HAL_RCC_OscConfig+0x72c>
 8003a7a:	e05f      	b.n	8003b3c <HAL_RCC_OscConfig+0x80c>
 8003a7c:	58024400 	.word	0x58024400
 8003a80:	58024800 	.word	0x58024800
 8003a84:	fffffc0c 	.word	0xfffffc0c
 8003a88:	ffff0007 	.word	0xffff0007
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003a8c:	4b2e      	ldr	r3, [pc, #184]	; (8003b48 <HAL_RCC_OscConfig+0x818>)
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	4a2d      	ldr	r2, [pc, #180]	; (8003b48 <HAL_RCC_OscConfig+0x818>)
 8003a92:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003a96:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a98:	f7fd f88a 	bl	8000bb0 <HAL_GetTick>
 8003a9c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003a9e:	e008      	b.n	8003ab2 <HAL_RCC_OscConfig+0x782>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003aa0:	f7fd f886 	bl	8000bb0 <HAL_GetTick>
 8003aa4:	4602      	mov	r2, r0
 8003aa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003aa8:	1ad3      	subs	r3, r2, r3
 8003aaa:	2b02      	cmp	r3, #2
 8003aac:	d901      	bls.n	8003ab2 <HAL_RCC_OscConfig+0x782>
          {
            return HAL_TIMEOUT;
 8003aae:	2303      	movs	r3, #3
 8003ab0:	e045      	b.n	8003b3e <HAL_RCC_OscConfig+0x80e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003ab2:	4b25      	ldr	r3, [pc, #148]	; (8003b48 <HAL_RCC_OscConfig+0x818>)
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d1f0      	bne.n	8003aa0 <HAL_RCC_OscConfig+0x770>
 8003abe:	e03d      	b.n	8003b3c <HAL_RCC_OscConfig+0x80c>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8003ac0:	4b21      	ldr	r3, [pc, #132]	; (8003b48 <HAL_RCC_OscConfig+0x818>)
 8003ac2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ac4:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8003ac6:	4b20      	ldr	r3, [pc, #128]	; (8003b48 <HAL_RCC_OscConfig+0x818>)
 8003ac8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003aca:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ad0:	2b01      	cmp	r3, #1
 8003ad2:	d031      	beq.n	8003b38 <HAL_RCC_OscConfig+0x808>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003ad4:	693b      	ldr	r3, [r7, #16]
 8003ad6:	f003 0203 	and.w	r2, r3, #3
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003ade:	429a      	cmp	r2, r3
 8003ae0:	d12a      	bne.n	8003b38 <HAL_RCC_OscConfig+0x808>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8003ae2:	693b      	ldr	r3, [r7, #16]
 8003ae4:	091b      	lsrs	r3, r3, #4
 8003ae6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003aee:	429a      	cmp	r2, r3
 8003af0:	d122      	bne.n	8003b38 <HAL_RCC_OscConfig+0x808>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003afc:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8003afe:	429a      	cmp	r2, r3
 8003b00:	d11a      	bne.n	8003b38 <HAL_RCC_OscConfig+0x808>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	0a5b      	lsrs	r3, r3, #9
 8003b06:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b0e:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003b10:	429a      	cmp	r2, r3
 8003b12:	d111      	bne.n	8003b38 <HAL_RCC_OscConfig+0x808>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	0c1b      	lsrs	r3, r3, #16
 8003b18:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b20:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003b22:	429a      	cmp	r2, r3
 8003b24:	d108      	bne.n	8003b38 <HAL_RCC_OscConfig+0x808>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	0e1b      	lsrs	r3, r3, #24
 8003b2a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b32:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003b34:	429a      	cmp	r2, r3
 8003b36:	d001      	beq.n	8003b3c <HAL_RCC_OscConfig+0x80c>
      {
        return HAL_ERROR;
 8003b38:	2301      	movs	r3, #1
 8003b3a:	e000      	b.n	8003b3e <HAL_RCC_OscConfig+0x80e>
      }
    }
  }
  return HAL_OK;
 8003b3c:	2300      	movs	r3, #0
}
 8003b3e:	4618      	mov	r0, r3
 8003b40:	3730      	adds	r7, #48	; 0x30
 8003b42:	46bd      	mov	sp, r7
 8003b44:	bd80      	pop	{r7, pc}
 8003b46:	bf00      	nop
 8003b48:	58024400 	.word	0x58024400

08003b4c <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003b4c:	b580      	push	{r7, lr}
 8003b4e:	b086      	sub	sp, #24
 8003b50:	af00      	add	r7, sp, #0
 8003b52:	6078      	str	r0, [r7, #4]
 8003b54:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d101      	bne.n	8003b60 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003b5c:	2301      	movs	r3, #1
 8003b5e:	e19c      	b.n	8003e9a <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003b60:	4b8a      	ldr	r3, [pc, #552]	; (8003d8c <HAL_RCC_ClockConfig+0x240>)
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	f003 030f 	and.w	r3, r3, #15
 8003b68:	683a      	ldr	r2, [r7, #0]
 8003b6a:	429a      	cmp	r2, r3
 8003b6c:	d910      	bls.n	8003b90 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b6e:	4b87      	ldr	r3, [pc, #540]	; (8003d8c <HAL_RCC_ClockConfig+0x240>)
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	f023 020f 	bic.w	r2, r3, #15
 8003b76:	4985      	ldr	r1, [pc, #532]	; (8003d8c <HAL_RCC_ClockConfig+0x240>)
 8003b78:	683b      	ldr	r3, [r7, #0]
 8003b7a:	4313      	orrs	r3, r2
 8003b7c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b7e:	4b83      	ldr	r3, [pc, #524]	; (8003d8c <HAL_RCC_ClockConfig+0x240>)
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	f003 030f 	and.w	r3, r3, #15
 8003b86:	683a      	ldr	r2, [r7, #0]
 8003b88:	429a      	cmp	r2, r3
 8003b8a:	d001      	beq.n	8003b90 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003b8c:	2301      	movs	r3, #1
 8003b8e:	e184      	b.n	8003e9a <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	f003 0304 	and.w	r3, r3, #4
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d010      	beq.n	8003bbe <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	691a      	ldr	r2, [r3, #16]
 8003ba0:	4b7b      	ldr	r3, [pc, #492]	; (8003d90 <HAL_RCC_ClockConfig+0x244>)
 8003ba2:	699b      	ldr	r3, [r3, #24]
 8003ba4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003ba8:	429a      	cmp	r2, r3
 8003baa:	d908      	bls.n	8003bbe <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003bac:	4b78      	ldr	r3, [pc, #480]	; (8003d90 <HAL_RCC_ClockConfig+0x244>)
 8003bae:	699b      	ldr	r3, [r3, #24]
 8003bb0:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	691b      	ldr	r3, [r3, #16]
 8003bb8:	4975      	ldr	r1, [pc, #468]	; (8003d90 <HAL_RCC_ClockConfig+0x244>)
 8003bba:	4313      	orrs	r3, r2
 8003bbc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	f003 0308 	and.w	r3, r3, #8
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d010      	beq.n	8003bec <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	695a      	ldr	r2, [r3, #20]
 8003bce:	4b70      	ldr	r3, [pc, #448]	; (8003d90 <HAL_RCC_ClockConfig+0x244>)
 8003bd0:	69db      	ldr	r3, [r3, #28]
 8003bd2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003bd6:	429a      	cmp	r2, r3
 8003bd8:	d908      	bls.n	8003bec <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8003bda:	4b6d      	ldr	r3, [pc, #436]	; (8003d90 <HAL_RCC_ClockConfig+0x244>)
 8003bdc:	69db      	ldr	r3, [r3, #28]
 8003bde:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	695b      	ldr	r3, [r3, #20]
 8003be6:	496a      	ldr	r1, [pc, #424]	; (8003d90 <HAL_RCC_ClockConfig+0x244>)
 8003be8:	4313      	orrs	r3, r2
 8003bea:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	f003 0310 	and.w	r3, r3, #16
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d010      	beq.n	8003c1a <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	699a      	ldr	r2, [r3, #24]
 8003bfc:	4b64      	ldr	r3, [pc, #400]	; (8003d90 <HAL_RCC_ClockConfig+0x244>)
 8003bfe:	69db      	ldr	r3, [r3, #28]
 8003c00:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003c04:	429a      	cmp	r2, r3
 8003c06:	d908      	bls.n	8003c1a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003c08:	4b61      	ldr	r3, [pc, #388]	; (8003d90 <HAL_RCC_ClockConfig+0x244>)
 8003c0a:	69db      	ldr	r3, [r3, #28]
 8003c0c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	699b      	ldr	r3, [r3, #24]
 8003c14:	495e      	ldr	r1, [pc, #376]	; (8003d90 <HAL_RCC_ClockConfig+0x244>)
 8003c16:	4313      	orrs	r3, r2
 8003c18:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	f003 0320 	and.w	r3, r3, #32
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d010      	beq.n	8003c48 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	69da      	ldr	r2, [r3, #28]
 8003c2a:	4b59      	ldr	r3, [pc, #356]	; (8003d90 <HAL_RCC_ClockConfig+0x244>)
 8003c2c:	6a1b      	ldr	r3, [r3, #32]
 8003c2e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003c32:	429a      	cmp	r2, r3
 8003c34:	d908      	bls.n	8003c48 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8003c36:	4b56      	ldr	r3, [pc, #344]	; (8003d90 <HAL_RCC_ClockConfig+0x244>)
 8003c38:	6a1b      	ldr	r3, [r3, #32]
 8003c3a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	69db      	ldr	r3, [r3, #28]
 8003c42:	4953      	ldr	r1, [pc, #332]	; (8003d90 <HAL_RCC_ClockConfig+0x244>)
 8003c44:	4313      	orrs	r3, r2
 8003c46:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	f003 0302 	and.w	r3, r3, #2
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d010      	beq.n	8003c76 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	68da      	ldr	r2, [r3, #12]
 8003c58:	4b4d      	ldr	r3, [pc, #308]	; (8003d90 <HAL_RCC_ClockConfig+0x244>)
 8003c5a:	699b      	ldr	r3, [r3, #24]
 8003c5c:	f003 030f 	and.w	r3, r3, #15
 8003c60:	429a      	cmp	r2, r3
 8003c62:	d908      	bls.n	8003c76 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003c64:	4b4a      	ldr	r3, [pc, #296]	; (8003d90 <HAL_RCC_ClockConfig+0x244>)
 8003c66:	699b      	ldr	r3, [r3, #24]
 8003c68:	f023 020f 	bic.w	r2, r3, #15
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	68db      	ldr	r3, [r3, #12]
 8003c70:	4947      	ldr	r1, [pc, #284]	; (8003d90 <HAL_RCC_ClockConfig+0x244>)
 8003c72:	4313      	orrs	r3, r2
 8003c74:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	f003 0301 	and.w	r3, r3, #1
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d055      	beq.n	8003d2e <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8003c82:	4b43      	ldr	r3, [pc, #268]	; (8003d90 <HAL_RCC_ClockConfig+0x244>)
 8003c84:	699b      	ldr	r3, [r3, #24]
 8003c86:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	689b      	ldr	r3, [r3, #8]
 8003c8e:	4940      	ldr	r1, [pc, #256]	; (8003d90 <HAL_RCC_ClockConfig+0x244>)
 8003c90:	4313      	orrs	r3, r2
 8003c92:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	685b      	ldr	r3, [r3, #4]
 8003c98:	2b02      	cmp	r3, #2
 8003c9a:	d107      	bne.n	8003cac <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003c9c:	4b3c      	ldr	r3, [pc, #240]	; (8003d90 <HAL_RCC_ClockConfig+0x244>)
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d121      	bne.n	8003cec <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8003ca8:	2301      	movs	r3, #1
 8003caa:	e0f6      	b.n	8003e9a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	685b      	ldr	r3, [r3, #4]
 8003cb0:	2b03      	cmp	r3, #3
 8003cb2:	d107      	bne.n	8003cc4 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003cb4:	4b36      	ldr	r3, [pc, #216]	; (8003d90 <HAL_RCC_ClockConfig+0x244>)
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d115      	bne.n	8003cec <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8003cc0:	2301      	movs	r3, #1
 8003cc2:	e0ea      	b.n	8003e9a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	685b      	ldr	r3, [r3, #4]
 8003cc8:	2b01      	cmp	r3, #1
 8003cca:	d107      	bne.n	8003cdc <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003ccc:	4b30      	ldr	r3, [pc, #192]	; (8003d90 <HAL_RCC_ClockConfig+0x244>)
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d109      	bne.n	8003cec <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8003cd8:	2301      	movs	r3, #1
 8003cda:	e0de      	b.n	8003e9a <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003cdc:	4b2c      	ldr	r3, [pc, #176]	; (8003d90 <HAL_RCC_ClockConfig+0x244>)
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	f003 0304 	and.w	r3, r3, #4
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d101      	bne.n	8003cec <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8003ce8:	2301      	movs	r3, #1
 8003cea:	e0d6      	b.n	8003e9a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003cec:	4b28      	ldr	r3, [pc, #160]	; (8003d90 <HAL_RCC_ClockConfig+0x244>)
 8003cee:	691b      	ldr	r3, [r3, #16]
 8003cf0:	f023 0207 	bic.w	r2, r3, #7
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	685b      	ldr	r3, [r3, #4]
 8003cf8:	4925      	ldr	r1, [pc, #148]	; (8003d90 <HAL_RCC_ClockConfig+0x244>)
 8003cfa:	4313      	orrs	r3, r2
 8003cfc:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003cfe:	f7fc ff57 	bl	8000bb0 <HAL_GetTick>
 8003d02:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d04:	e00a      	b.n	8003d1c <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003d06:	f7fc ff53 	bl	8000bb0 <HAL_GetTick>
 8003d0a:	4602      	mov	r2, r0
 8003d0c:	697b      	ldr	r3, [r7, #20]
 8003d0e:	1ad3      	subs	r3, r2, r3
 8003d10:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d14:	4293      	cmp	r3, r2
 8003d16:	d901      	bls.n	8003d1c <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8003d18:	2303      	movs	r3, #3
 8003d1a:	e0be      	b.n	8003e9a <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d1c:	4b1c      	ldr	r3, [pc, #112]	; (8003d90 <HAL_RCC_ClockConfig+0x244>)
 8003d1e:	691b      	ldr	r3, [r3, #16]
 8003d20:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	685b      	ldr	r3, [r3, #4]
 8003d28:	00db      	lsls	r3, r3, #3
 8003d2a:	429a      	cmp	r2, r3
 8003d2c:	d1eb      	bne.n	8003d06 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	f003 0302 	and.w	r3, r3, #2
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d010      	beq.n	8003d5c <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	68da      	ldr	r2, [r3, #12]
 8003d3e:	4b14      	ldr	r3, [pc, #80]	; (8003d90 <HAL_RCC_ClockConfig+0x244>)
 8003d40:	699b      	ldr	r3, [r3, #24]
 8003d42:	f003 030f 	and.w	r3, r3, #15
 8003d46:	429a      	cmp	r2, r3
 8003d48:	d208      	bcs.n	8003d5c <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003d4a:	4b11      	ldr	r3, [pc, #68]	; (8003d90 <HAL_RCC_ClockConfig+0x244>)
 8003d4c:	699b      	ldr	r3, [r3, #24]
 8003d4e:	f023 020f 	bic.w	r2, r3, #15
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	68db      	ldr	r3, [r3, #12]
 8003d56:	490e      	ldr	r1, [pc, #56]	; (8003d90 <HAL_RCC_ClockConfig+0x244>)
 8003d58:	4313      	orrs	r3, r2
 8003d5a:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003d5c:	4b0b      	ldr	r3, [pc, #44]	; (8003d8c <HAL_RCC_ClockConfig+0x240>)
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	f003 030f 	and.w	r3, r3, #15
 8003d64:	683a      	ldr	r2, [r7, #0]
 8003d66:	429a      	cmp	r2, r3
 8003d68:	d214      	bcs.n	8003d94 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d6a:	4b08      	ldr	r3, [pc, #32]	; (8003d8c <HAL_RCC_ClockConfig+0x240>)
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	f023 020f 	bic.w	r2, r3, #15
 8003d72:	4906      	ldr	r1, [pc, #24]	; (8003d8c <HAL_RCC_ClockConfig+0x240>)
 8003d74:	683b      	ldr	r3, [r7, #0]
 8003d76:	4313      	orrs	r3, r2
 8003d78:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d7a:	4b04      	ldr	r3, [pc, #16]	; (8003d8c <HAL_RCC_ClockConfig+0x240>)
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	f003 030f 	and.w	r3, r3, #15
 8003d82:	683a      	ldr	r2, [r7, #0]
 8003d84:	429a      	cmp	r2, r3
 8003d86:	d005      	beq.n	8003d94 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8003d88:	2301      	movs	r3, #1
 8003d8a:	e086      	b.n	8003e9a <HAL_RCC_ClockConfig+0x34e>
 8003d8c:	52002000 	.word	0x52002000
 8003d90:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	f003 0304 	and.w	r3, r3, #4
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d010      	beq.n	8003dc2 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	691a      	ldr	r2, [r3, #16]
 8003da4:	4b3f      	ldr	r3, [pc, #252]	; (8003ea4 <HAL_RCC_ClockConfig+0x358>)
 8003da6:	699b      	ldr	r3, [r3, #24]
 8003da8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003dac:	429a      	cmp	r2, r3
 8003dae:	d208      	bcs.n	8003dc2 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003db0:	4b3c      	ldr	r3, [pc, #240]	; (8003ea4 <HAL_RCC_ClockConfig+0x358>)
 8003db2:	699b      	ldr	r3, [r3, #24]
 8003db4:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	691b      	ldr	r3, [r3, #16]
 8003dbc:	4939      	ldr	r1, [pc, #228]	; (8003ea4 <HAL_RCC_ClockConfig+0x358>)
 8003dbe:	4313      	orrs	r3, r2
 8003dc0:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	f003 0308 	and.w	r3, r3, #8
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d010      	beq.n	8003df0 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	695a      	ldr	r2, [r3, #20]
 8003dd2:	4b34      	ldr	r3, [pc, #208]	; (8003ea4 <HAL_RCC_ClockConfig+0x358>)
 8003dd4:	69db      	ldr	r3, [r3, #28]
 8003dd6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003dda:	429a      	cmp	r2, r3
 8003ddc:	d208      	bcs.n	8003df0 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8003dde:	4b31      	ldr	r3, [pc, #196]	; (8003ea4 <HAL_RCC_ClockConfig+0x358>)
 8003de0:	69db      	ldr	r3, [r3, #28]
 8003de2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	695b      	ldr	r3, [r3, #20]
 8003dea:	492e      	ldr	r1, [pc, #184]	; (8003ea4 <HAL_RCC_ClockConfig+0x358>)
 8003dec:	4313      	orrs	r3, r2
 8003dee:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	f003 0310 	and.w	r3, r3, #16
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d010      	beq.n	8003e1e <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	699a      	ldr	r2, [r3, #24]
 8003e00:	4b28      	ldr	r3, [pc, #160]	; (8003ea4 <HAL_RCC_ClockConfig+0x358>)
 8003e02:	69db      	ldr	r3, [r3, #28]
 8003e04:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003e08:	429a      	cmp	r2, r3
 8003e0a:	d208      	bcs.n	8003e1e <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003e0c:	4b25      	ldr	r3, [pc, #148]	; (8003ea4 <HAL_RCC_ClockConfig+0x358>)
 8003e0e:	69db      	ldr	r3, [r3, #28]
 8003e10:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	699b      	ldr	r3, [r3, #24]
 8003e18:	4922      	ldr	r1, [pc, #136]	; (8003ea4 <HAL_RCC_ClockConfig+0x358>)
 8003e1a:	4313      	orrs	r3, r2
 8003e1c:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	f003 0320 	and.w	r3, r3, #32
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d010      	beq.n	8003e4c <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	69da      	ldr	r2, [r3, #28]
 8003e2e:	4b1d      	ldr	r3, [pc, #116]	; (8003ea4 <HAL_RCC_ClockConfig+0x358>)
 8003e30:	6a1b      	ldr	r3, [r3, #32]
 8003e32:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003e36:	429a      	cmp	r2, r3
 8003e38:	d208      	bcs.n	8003e4c <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8003e3a:	4b1a      	ldr	r3, [pc, #104]	; (8003ea4 <HAL_RCC_ClockConfig+0x358>)
 8003e3c:	6a1b      	ldr	r3, [r3, #32]
 8003e3e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	69db      	ldr	r3, [r3, #28]
 8003e46:	4917      	ldr	r1, [pc, #92]	; (8003ea4 <HAL_RCC_ClockConfig+0x358>)
 8003e48:	4313      	orrs	r3, r2
 8003e4a:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003e4c:	f000 f834 	bl	8003eb8 <HAL_RCC_GetSysClockFreq>
 8003e50:	4602      	mov	r2, r0
 8003e52:	4b14      	ldr	r3, [pc, #80]	; (8003ea4 <HAL_RCC_ClockConfig+0x358>)
 8003e54:	699b      	ldr	r3, [r3, #24]
 8003e56:	0a1b      	lsrs	r3, r3, #8
 8003e58:	f003 030f 	and.w	r3, r3, #15
 8003e5c:	4912      	ldr	r1, [pc, #72]	; (8003ea8 <HAL_RCC_ClockConfig+0x35c>)
 8003e5e:	5ccb      	ldrb	r3, [r1, r3]
 8003e60:	f003 031f 	and.w	r3, r3, #31
 8003e64:	fa22 f303 	lsr.w	r3, r2, r3
 8003e68:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003e6a:	4b0e      	ldr	r3, [pc, #56]	; (8003ea4 <HAL_RCC_ClockConfig+0x358>)
 8003e6c:	699b      	ldr	r3, [r3, #24]
 8003e6e:	f003 030f 	and.w	r3, r3, #15
 8003e72:	4a0d      	ldr	r2, [pc, #52]	; (8003ea8 <HAL_RCC_ClockConfig+0x35c>)
 8003e74:	5cd3      	ldrb	r3, [r2, r3]
 8003e76:	f003 031f 	and.w	r3, r3, #31
 8003e7a:	693a      	ldr	r2, [r7, #16]
 8003e7c:	fa22 f303 	lsr.w	r3, r2, r3
 8003e80:	4a0a      	ldr	r2, [pc, #40]	; (8003eac <HAL_RCC_ClockConfig+0x360>)
 8003e82:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003e84:	4a0a      	ldr	r2, [pc, #40]	; (8003eb0 <HAL_RCC_ClockConfig+0x364>)
 8003e86:	693b      	ldr	r3, [r7, #16]
 8003e88:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8003e8a:	4b0a      	ldr	r3, [pc, #40]	; (8003eb4 <HAL_RCC_ClockConfig+0x368>)
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	4618      	mov	r0, r3
 8003e90:	f7fc fe44 	bl	8000b1c <HAL_InitTick>
 8003e94:	4603      	mov	r3, r0
 8003e96:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8003e98:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e9a:	4618      	mov	r0, r3
 8003e9c:	3718      	adds	r7, #24
 8003e9e:	46bd      	mov	sp, r7
 8003ea0:	bd80      	pop	{r7, pc}
 8003ea2:	bf00      	nop
 8003ea4:	58024400 	.word	0x58024400
 8003ea8:	08008f2c 	.word	0x08008f2c
 8003eac:	24000010 	.word	0x24000010
 8003eb0:	2400000c 	.word	0x2400000c
 8003eb4:	24000014 	.word	0x24000014

08003eb8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003eb8:	b480      	push	{r7}
 8003eba:	b089      	sub	sp, #36	; 0x24
 8003ebc:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003ebe:	4bb3      	ldr	r3, [pc, #716]	; (800418c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003ec0:	691b      	ldr	r3, [r3, #16]
 8003ec2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003ec6:	2b18      	cmp	r3, #24
 8003ec8:	f200 8155 	bhi.w	8004176 <HAL_RCC_GetSysClockFreq+0x2be>
 8003ecc:	a201      	add	r2, pc, #4	; (adr r2, 8003ed4 <HAL_RCC_GetSysClockFreq+0x1c>)
 8003ece:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ed2:	bf00      	nop
 8003ed4:	08003f39 	.word	0x08003f39
 8003ed8:	08004177 	.word	0x08004177
 8003edc:	08004177 	.word	0x08004177
 8003ee0:	08004177 	.word	0x08004177
 8003ee4:	08004177 	.word	0x08004177
 8003ee8:	08004177 	.word	0x08004177
 8003eec:	08004177 	.word	0x08004177
 8003ef0:	08004177 	.word	0x08004177
 8003ef4:	08003f5f 	.word	0x08003f5f
 8003ef8:	08004177 	.word	0x08004177
 8003efc:	08004177 	.word	0x08004177
 8003f00:	08004177 	.word	0x08004177
 8003f04:	08004177 	.word	0x08004177
 8003f08:	08004177 	.word	0x08004177
 8003f0c:	08004177 	.word	0x08004177
 8003f10:	08004177 	.word	0x08004177
 8003f14:	08003f65 	.word	0x08003f65
 8003f18:	08004177 	.word	0x08004177
 8003f1c:	08004177 	.word	0x08004177
 8003f20:	08004177 	.word	0x08004177
 8003f24:	08004177 	.word	0x08004177
 8003f28:	08004177 	.word	0x08004177
 8003f2c:	08004177 	.word	0x08004177
 8003f30:	08004177 	.word	0x08004177
 8003f34:	08003f6b 	.word	0x08003f6b
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003f38:	4b94      	ldr	r3, [pc, #592]	; (800418c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	f003 0320 	and.w	r3, r3, #32
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d009      	beq.n	8003f58 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003f44:	4b91      	ldr	r3, [pc, #580]	; (800418c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	08db      	lsrs	r3, r3, #3
 8003f4a:	f003 0303 	and.w	r3, r3, #3
 8003f4e:	4a90      	ldr	r2, [pc, #576]	; (8004190 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003f50:	fa22 f303 	lsr.w	r3, r2, r3
 8003f54:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8003f56:	e111      	b.n	800417c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8003f58:	4b8d      	ldr	r3, [pc, #564]	; (8004190 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003f5a:	61bb      	str	r3, [r7, #24]
    break;
 8003f5c:	e10e      	b.n	800417c <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8003f5e:	4b8d      	ldr	r3, [pc, #564]	; (8004194 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003f60:	61bb      	str	r3, [r7, #24]
    break;
 8003f62:	e10b      	b.n	800417c <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8003f64:	4b8c      	ldr	r3, [pc, #560]	; (8004198 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8003f66:	61bb      	str	r3, [r7, #24]
    break;
 8003f68:	e108      	b.n	800417c <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003f6a:	4b88      	ldr	r3, [pc, #544]	; (800418c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003f6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f6e:	f003 0303 	and.w	r3, r3, #3
 8003f72:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8003f74:	4b85      	ldr	r3, [pc, #532]	; (800418c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003f76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f78:	091b      	lsrs	r3, r3, #4
 8003f7a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003f7e:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8003f80:	4b82      	ldr	r3, [pc, #520]	; (800418c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003f82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f84:	f003 0301 	and.w	r3, r3, #1
 8003f88:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8003f8a:	4b80      	ldr	r3, [pc, #512]	; (800418c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003f8c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f8e:	08db      	lsrs	r3, r3, #3
 8003f90:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003f94:	68fa      	ldr	r2, [r7, #12]
 8003f96:	fb02 f303 	mul.w	r3, r2, r3
 8003f9a:	ee07 3a90 	vmov	s15, r3
 8003f9e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003fa2:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8003fa6:	693b      	ldr	r3, [r7, #16]
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	f000 80e1 	beq.w	8004170 <HAL_RCC_GetSysClockFreq+0x2b8>
 8003fae:	697b      	ldr	r3, [r7, #20]
 8003fb0:	2b02      	cmp	r3, #2
 8003fb2:	f000 8083 	beq.w	80040bc <HAL_RCC_GetSysClockFreq+0x204>
 8003fb6:	697b      	ldr	r3, [r7, #20]
 8003fb8:	2b02      	cmp	r3, #2
 8003fba:	f200 80a1 	bhi.w	8004100 <HAL_RCC_GetSysClockFreq+0x248>
 8003fbe:	697b      	ldr	r3, [r7, #20]
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d003      	beq.n	8003fcc <HAL_RCC_GetSysClockFreq+0x114>
 8003fc4:	697b      	ldr	r3, [r7, #20]
 8003fc6:	2b01      	cmp	r3, #1
 8003fc8:	d056      	beq.n	8004078 <HAL_RCC_GetSysClockFreq+0x1c0>
 8003fca:	e099      	b.n	8004100 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003fcc:	4b6f      	ldr	r3, [pc, #444]	; (800418c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	f003 0320 	and.w	r3, r3, #32
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d02d      	beq.n	8004034 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003fd8:	4b6c      	ldr	r3, [pc, #432]	; (800418c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	08db      	lsrs	r3, r3, #3
 8003fde:	f003 0303 	and.w	r3, r3, #3
 8003fe2:	4a6b      	ldr	r2, [pc, #428]	; (8004190 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003fe4:	fa22 f303 	lsr.w	r3, r2, r3
 8003fe8:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	ee07 3a90 	vmov	s15, r3
 8003ff0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003ff4:	693b      	ldr	r3, [r7, #16]
 8003ff6:	ee07 3a90 	vmov	s15, r3
 8003ffa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003ffe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004002:	4b62      	ldr	r3, [pc, #392]	; (800418c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004004:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004006:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800400a:	ee07 3a90 	vmov	s15, r3
 800400e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004012:	ed97 6a02 	vldr	s12, [r7, #8]
 8004016:	eddf 5a61 	vldr	s11, [pc, #388]	; 800419c <HAL_RCC_GetSysClockFreq+0x2e4>
 800401a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800401e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004022:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004026:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800402a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800402e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8004032:	e087      	b.n	8004144 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004034:	693b      	ldr	r3, [r7, #16]
 8004036:	ee07 3a90 	vmov	s15, r3
 800403a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800403e:	eddf 6a58 	vldr	s13, [pc, #352]	; 80041a0 <HAL_RCC_GetSysClockFreq+0x2e8>
 8004042:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004046:	4b51      	ldr	r3, [pc, #324]	; (800418c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004048:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800404a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800404e:	ee07 3a90 	vmov	s15, r3
 8004052:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004056:	ed97 6a02 	vldr	s12, [r7, #8]
 800405a:	eddf 5a50 	vldr	s11, [pc, #320]	; 800419c <HAL_RCC_GetSysClockFreq+0x2e4>
 800405e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004062:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004066:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800406a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800406e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004072:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004076:	e065      	b.n	8004144 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004078:	693b      	ldr	r3, [r7, #16]
 800407a:	ee07 3a90 	vmov	s15, r3
 800407e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004082:	eddf 6a48 	vldr	s13, [pc, #288]	; 80041a4 <HAL_RCC_GetSysClockFreq+0x2ec>
 8004086:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800408a:	4b40      	ldr	r3, [pc, #256]	; (800418c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800408c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800408e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004092:	ee07 3a90 	vmov	s15, r3
 8004096:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800409a:	ed97 6a02 	vldr	s12, [r7, #8]
 800409e:	eddf 5a3f 	vldr	s11, [pc, #252]	; 800419c <HAL_RCC_GetSysClockFreq+0x2e4>
 80040a2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80040a6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80040aa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80040ae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80040b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80040b6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80040ba:	e043      	b.n	8004144 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80040bc:	693b      	ldr	r3, [r7, #16]
 80040be:	ee07 3a90 	vmov	s15, r3
 80040c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80040c6:	eddf 6a38 	vldr	s13, [pc, #224]	; 80041a8 <HAL_RCC_GetSysClockFreq+0x2f0>
 80040ca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80040ce:	4b2f      	ldr	r3, [pc, #188]	; (800418c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80040d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80040d6:	ee07 3a90 	vmov	s15, r3
 80040da:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80040de:	ed97 6a02 	vldr	s12, [r7, #8]
 80040e2:	eddf 5a2e 	vldr	s11, [pc, #184]	; 800419c <HAL_RCC_GetSysClockFreq+0x2e4>
 80040e6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80040ea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80040ee:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80040f2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80040f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80040fa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80040fe:	e021      	b.n	8004144 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004100:	693b      	ldr	r3, [r7, #16]
 8004102:	ee07 3a90 	vmov	s15, r3
 8004106:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800410a:	eddf 6a26 	vldr	s13, [pc, #152]	; 80041a4 <HAL_RCC_GetSysClockFreq+0x2ec>
 800410e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004112:	4b1e      	ldr	r3, [pc, #120]	; (800418c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004114:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004116:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800411a:	ee07 3a90 	vmov	s15, r3
 800411e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004122:	ed97 6a02 	vldr	s12, [r7, #8]
 8004126:	eddf 5a1d 	vldr	s11, [pc, #116]	; 800419c <HAL_RCC_GetSysClockFreq+0x2e4>
 800412a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800412e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004132:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004136:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800413a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800413e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004142:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8004144:	4b11      	ldr	r3, [pc, #68]	; (800418c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004146:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004148:	0a5b      	lsrs	r3, r3, #9
 800414a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800414e:	3301      	adds	r3, #1
 8004150:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8004152:	683b      	ldr	r3, [r7, #0]
 8004154:	ee07 3a90 	vmov	s15, r3
 8004158:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800415c:	edd7 6a07 	vldr	s13, [r7, #28]
 8004160:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004164:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004168:	ee17 3a90 	vmov	r3, s15
 800416c:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 800416e:	e005      	b.n	800417c <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8004170:	2300      	movs	r3, #0
 8004172:	61bb      	str	r3, [r7, #24]
    break;
 8004174:	e002      	b.n	800417c <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8004176:	4b07      	ldr	r3, [pc, #28]	; (8004194 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8004178:	61bb      	str	r3, [r7, #24]
    break;
 800417a:	bf00      	nop
  }

  return sysclockfreq;
 800417c:	69bb      	ldr	r3, [r7, #24]
}
 800417e:	4618      	mov	r0, r3
 8004180:	3724      	adds	r7, #36	; 0x24
 8004182:	46bd      	mov	sp, r7
 8004184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004188:	4770      	bx	lr
 800418a:	bf00      	nop
 800418c:	58024400 	.word	0x58024400
 8004190:	03d09000 	.word	0x03d09000
 8004194:	003d0900 	.word	0x003d0900
 8004198:	007a1200 	.word	0x007a1200
 800419c:	46000000 	.word	0x46000000
 80041a0:	4c742400 	.word	0x4c742400
 80041a4:	4a742400 	.word	0x4a742400
 80041a8:	4af42400 	.word	0x4af42400

080041ac <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80041ac:	b580      	push	{r7, lr}
 80041ae:	b082      	sub	sp, #8
 80041b0:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80041b2:	f7ff fe81 	bl	8003eb8 <HAL_RCC_GetSysClockFreq>
 80041b6:	4602      	mov	r2, r0
 80041b8:	4b10      	ldr	r3, [pc, #64]	; (80041fc <HAL_RCC_GetHCLKFreq+0x50>)
 80041ba:	699b      	ldr	r3, [r3, #24]
 80041bc:	0a1b      	lsrs	r3, r3, #8
 80041be:	f003 030f 	and.w	r3, r3, #15
 80041c2:	490f      	ldr	r1, [pc, #60]	; (8004200 <HAL_RCC_GetHCLKFreq+0x54>)
 80041c4:	5ccb      	ldrb	r3, [r1, r3]
 80041c6:	f003 031f 	and.w	r3, r3, #31
 80041ca:	fa22 f303 	lsr.w	r3, r2, r3
 80041ce:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80041d0:	4b0a      	ldr	r3, [pc, #40]	; (80041fc <HAL_RCC_GetHCLKFreq+0x50>)
 80041d2:	699b      	ldr	r3, [r3, #24]
 80041d4:	f003 030f 	and.w	r3, r3, #15
 80041d8:	4a09      	ldr	r2, [pc, #36]	; (8004200 <HAL_RCC_GetHCLKFreq+0x54>)
 80041da:	5cd3      	ldrb	r3, [r2, r3]
 80041dc:	f003 031f 	and.w	r3, r3, #31
 80041e0:	687a      	ldr	r2, [r7, #4]
 80041e2:	fa22 f303 	lsr.w	r3, r2, r3
 80041e6:	4a07      	ldr	r2, [pc, #28]	; (8004204 <HAL_RCC_GetHCLKFreq+0x58>)
 80041e8:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80041ea:	4a07      	ldr	r2, [pc, #28]	; (8004208 <HAL_RCC_GetHCLKFreq+0x5c>)
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80041f0:	4b04      	ldr	r3, [pc, #16]	; (8004204 <HAL_RCC_GetHCLKFreq+0x58>)
 80041f2:	681b      	ldr	r3, [r3, #0]
}
 80041f4:	4618      	mov	r0, r3
 80041f6:	3708      	adds	r7, #8
 80041f8:	46bd      	mov	sp, r7
 80041fa:	bd80      	pop	{r7, pc}
 80041fc:	58024400 	.word	0x58024400
 8004200:	08008f2c 	.word	0x08008f2c
 8004204:	24000010 	.word	0x24000010
 8004208:	2400000c 	.word	0x2400000c

0800420c <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800420c:	b580      	push	{r7, lr}
 800420e:	b086      	sub	sp, #24
 8004210:	af00      	add	r7, sp, #0
 8004212:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004214:	2300      	movs	r3, #0
 8004216:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004218:	2300      	movs	r3, #0
 800421a:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004224:	2b00      	cmp	r3, #0
 8004226:	d03f      	beq.n	80042a8 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800422c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004230:	d02a      	beq.n	8004288 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8004232:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004236:	d824      	bhi.n	8004282 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004238:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800423c:	d018      	beq.n	8004270 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800423e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004242:	d81e      	bhi.n	8004282 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004244:	2b00      	cmp	r3, #0
 8004246:	d003      	beq.n	8004250 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8004248:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800424c:	d007      	beq.n	800425e <HAL_RCCEx_PeriphCLKConfig+0x52>
 800424e:	e018      	b.n	8004282 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004250:	4ba3      	ldr	r3, [pc, #652]	; (80044e0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004252:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004254:	4aa2      	ldr	r2, [pc, #648]	; (80044e0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004256:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800425a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800425c:	e015      	b.n	800428a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	3304      	adds	r3, #4
 8004262:	2102      	movs	r1, #2
 8004264:	4618      	mov	r0, r3
 8004266:	f000 ff17 	bl	8005098 <RCCEx_PLL2_Config>
 800426a:	4603      	mov	r3, r0
 800426c:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800426e:	e00c      	b.n	800428a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	3324      	adds	r3, #36	; 0x24
 8004274:	2102      	movs	r1, #2
 8004276:	4618      	mov	r0, r3
 8004278:	f000 ffc0 	bl	80051fc <RCCEx_PLL3_Config>
 800427c:	4603      	mov	r3, r0
 800427e:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8004280:	e003      	b.n	800428a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004282:	2301      	movs	r3, #1
 8004284:	75fb      	strb	r3, [r7, #23]
      break;
 8004286:	e000      	b.n	800428a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8004288:	bf00      	nop
    }

    if(ret == HAL_OK)
 800428a:	7dfb      	ldrb	r3, [r7, #23]
 800428c:	2b00      	cmp	r3, #0
 800428e:	d109      	bne.n	80042a4 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8004290:	4b93      	ldr	r3, [pc, #588]	; (80044e0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004292:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004294:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800429c:	4990      	ldr	r1, [pc, #576]	; (80044e0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800429e:	4313      	orrs	r3, r2
 80042a0:	650b      	str	r3, [r1, #80]	; 0x50
 80042a2:	e001      	b.n	80042a8 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80042a4:	7dfb      	ldrb	r3, [r7, #23]
 80042a6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d03d      	beq.n	8004330 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042b8:	2b04      	cmp	r3, #4
 80042ba:	d826      	bhi.n	800430a <HAL_RCCEx_PeriphCLKConfig+0xfe>
 80042bc:	a201      	add	r2, pc, #4	; (adr r2, 80042c4 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 80042be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042c2:	bf00      	nop
 80042c4:	080042d9 	.word	0x080042d9
 80042c8:	080042e7 	.word	0x080042e7
 80042cc:	080042f9 	.word	0x080042f9
 80042d0:	08004311 	.word	0x08004311
 80042d4:	08004311 	.word	0x08004311
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80042d8:	4b81      	ldr	r3, [pc, #516]	; (80044e0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80042da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042dc:	4a80      	ldr	r2, [pc, #512]	; (80044e0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80042de:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80042e2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80042e4:	e015      	b.n	8004312 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	3304      	adds	r3, #4
 80042ea:	2100      	movs	r1, #0
 80042ec:	4618      	mov	r0, r3
 80042ee:	f000 fed3 	bl	8005098 <RCCEx_PLL2_Config>
 80042f2:	4603      	mov	r3, r0
 80042f4:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80042f6:	e00c      	b.n	8004312 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	3324      	adds	r3, #36	; 0x24
 80042fc:	2100      	movs	r1, #0
 80042fe:	4618      	mov	r0, r3
 8004300:	f000 ff7c 	bl	80051fc <RCCEx_PLL3_Config>
 8004304:	4603      	mov	r3, r0
 8004306:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004308:	e003      	b.n	8004312 <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800430a:	2301      	movs	r3, #1
 800430c:	75fb      	strb	r3, [r7, #23]
      break;
 800430e:	e000      	b.n	8004312 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8004310:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004312:	7dfb      	ldrb	r3, [r7, #23]
 8004314:	2b00      	cmp	r3, #0
 8004316:	d109      	bne.n	800432c <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004318:	4b71      	ldr	r3, [pc, #452]	; (80044e0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800431a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800431c:	f023 0207 	bic.w	r2, r3, #7
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004324:	496e      	ldr	r1, [pc, #440]	; (80044e0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004326:	4313      	orrs	r3, r2
 8004328:	650b      	str	r3, [r1, #80]	; 0x50
 800432a:	e001      	b.n	8004330 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800432c:	7dfb      	ldrb	r3, [r7, #23]
 800432e:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004338:	2b00      	cmp	r3, #0
 800433a:	d042      	beq.n	80043c2 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004340:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004344:	d02b      	beq.n	800439e <HAL_RCCEx_PeriphCLKConfig+0x192>
 8004346:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800434a:	d825      	bhi.n	8004398 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 800434c:	2bc0      	cmp	r3, #192	; 0xc0
 800434e:	d028      	beq.n	80043a2 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8004350:	2bc0      	cmp	r3, #192	; 0xc0
 8004352:	d821      	bhi.n	8004398 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8004354:	2b80      	cmp	r3, #128	; 0x80
 8004356:	d016      	beq.n	8004386 <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8004358:	2b80      	cmp	r3, #128	; 0x80
 800435a:	d81d      	bhi.n	8004398 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 800435c:	2b00      	cmp	r3, #0
 800435e:	d002      	beq.n	8004366 <HAL_RCCEx_PeriphCLKConfig+0x15a>
 8004360:	2b40      	cmp	r3, #64	; 0x40
 8004362:	d007      	beq.n	8004374 <HAL_RCCEx_PeriphCLKConfig+0x168>
 8004364:	e018      	b.n	8004398 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004366:	4b5e      	ldr	r3, [pc, #376]	; (80044e0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004368:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800436a:	4a5d      	ldr	r2, [pc, #372]	; (80044e0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800436c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004370:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8004372:	e017      	b.n	80043a4 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	3304      	adds	r3, #4
 8004378:	2100      	movs	r1, #0
 800437a:	4618      	mov	r0, r3
 800437c:	f000 fe8c 	bl	8005098 <RCCEx_PLL2_Config>
 8004380:	4603      	mov	r3, r0
 8004382:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8004384:	e00e      	b.n	80043a4 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	3324      	adds	r3, #36	; 0x24
 800438a:	2100      	movs	r1, #0
 800438c:	4618      	mov	r0, r3
 800438e:	f000 ff35 	bl	80051fc <RCCEx_PLL3_Config>
 8004392:	4603      	mov	r3, r0
 8004394:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8004396:	e005      	b.n	80043a4 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004398:	2301      	movs	r3, #1
 800439a:	75fb      	strb	r3, [r7, #23]
      break;
 800439c:	e002      	b.n	80043a4 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 800439e:	bf00      	nop
 80043a0:	e000      	b.n	80043a4 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 80043a2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80043a4:	7dfb      	ldrb	r3, [r7, #23]
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d109      	bne.n	80043be <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 80043aa:	4b4d      	ldr	r3, [pc, #308]	; (80044e0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80043ac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80043ae:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043b6:	494a      	ldr	r1, [pc, #296]	; (80044e0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80043b8:	4313      	orrs	r3, r2
 80043ba:	650b      	str	r3, [r1, #80]	; 0x50
 80043bc:	e001      	b.n	80043c2 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80043be:	7dfb      	ldrb	r3, [r7, #23]
 80043c0:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d049      	beq.n	8004462 <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80043d4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80043d8:	d030      	beq.n	800443c <HAL_RCCEx_PeriphCLKConfig+0x230>
 80043da:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80043de:	d82a      	bhi.n	8004436 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80043e0:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80043e4:	d02c      	beq.n	8004440 <HAL_RCCEx_PeriphCLKConfig+0x234>
 80043e6:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80043ea:	d824      	bhi.n	8004436 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80043ec:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80043f0:	d018      	beq.n	8004424 <HAL_RCCEx_PeriphCLKConfig+0x218>
 80043f2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80043f6:	d81e      	bhi.n	8004436 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d003      	beq.n	8004404 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 80043fc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004400:	d007      	beq.n	8004412 <HAL_RCCEx_PeriphCLKConfig+0x206>
 8004402:	e018      	b.n	8004436 <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004404:	4b36      	ldr	r3, [pc, #216]	; (80044e0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004406:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004408:	4a35      	ldr	r2, [pc, #212]	; (80044e0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800440a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800440e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004410:	e017      	b.n	8004442 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	3304      	adds	r3, #4
 8004416:	2100      	movs	r1, #0
 8004418:	4618      	mov	r0, r3
 800441a:	f000 fe3d 	bl	8005098 <RCCEx_PLL2_Config>
 800441e:	4603      	mov	r3, r0
 8004420:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8004422:	e00e      	b.n	8004442 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	3324      	adds	r3, #36	; 0x24
 8004428:	2100      	movs	r1, #0
 800442a:	4618      	mov	r0, r3
 800442c:	f000 fee6 	bl	80051fc <RCCEx_PLL3_Config>
 8004430:	4603      	mov	r3, r0
 8004432:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004434:	e005      	b.n	8004442 <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8004436:	2301      	movs	r3, #1
 8004438:	75fb      	strb	r3, [r7, #23]
      break;
 800443a:	e002      	b.n	8004442 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 800443c:	bf00      	nop
 800443e:	e000      	b.n	8004442 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8004440:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004442:	7dfb      	ldrb	r3, [r7, #23]
 8004444:	2b00      	cmp	r3, #0
 8004446:	d10a      	bne.n	800445e <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8004448:	4b25      	ldr	r3, [pc, #148]	; (80044e0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800444a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800444c:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8004456:	4922      	ldr	r1, [pc, #136]	; (80044e0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004458:	4313      	orrs	r3, r2
 800445a:	658b      	str	r3, [r1, #88]	; 0x58
 800445c:	e001      	b.n	8004462 <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800445e:	7dfb      	ldrb	r3, [r7, #23]
 8004460:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800446a:	2b00      	cmp	r3, #0
 800446c:	d04b      	beq.n	8004506 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8004474:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004478:	d030      	beq.n	80044dc <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 800447a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800447e:	d82a      	bhi.n	80044d6 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8004480:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004484:	d02e      	beq.n	80044e4 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
 8004486:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800448a:	d824      	bhi.n	80044d6 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 800448c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004490:	d018      	beq.n	80044c4 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 8004492:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004496:	d81e      	bhi.n	80044d6 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8004498:	2b00      	cmp	r3, #0
 800449a:	d003      	beq.n	80044a4 <HAL_RCCEx_PeriphCLKConfig+0x298>
 800449c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80044a0:	d007      	beq.n	80044b2 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 80044a2:	e018      	b.n	80044d6 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80044a4:	4b0e      	ldr	r3, [pc, #56]	; (80044e0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80044a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044a8:	4a0d      	ldr	r2, [pc, #52]	; (80044e0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80044aa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80044ae:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80044b0:	e019      	b.n	80044e6 <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	3304      	adds	r3, #4
 80044b6:	2100      	movs	r1, #0
 80044b8:	4618      	mov	r0, r3
 80044ba:	f000 fded 	bl	8005098 <RCCEx_PLL2_Config>
 80044be:	4603      	mov	r3, r0
 80044c0:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 80044c2:	e010      	b.n	80044e6 <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	3324      	adds	r3, #36	; 0x24
 80044c8:	2100      	movs	r1, #0
 80044ca:	4618      	mov	r0, r3
 80044cc:	f000 fe96 	bl	80051fc <RCCEx_PLL3_Config>
 80044d0:	4603      	mov	r3, r0
 80044d2:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80044d4:	e007      	b.n	80044e6 <HAL_RCCEx_PeriphCLKConfig+0x2da>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 80044d6:	2301      	movs	r3, #1
 80044d8:	75fb      	strb	r3, [r7, #23]
      break;
 80044da:	e004      	b.n	80044e6 <HAL_RCCEx_PeriphCLKConfig+0x2da>
      break;
 80044dc:	bf00      	nop
 80044de:	e002      	b.n	80044e6 <HAL_RCCEx_PeriphCLKConfig+0x2da>
 80044e0:	58024400 	.word	0x58024400
      break;
 80044e4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80044e6:	7dfb      	ldrb	r3, [r7, #23]
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d10a      	bne.n	8004502 <HAL_RCCEx_PeriphCLKConfig+0x2f6>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80044ec:	4b99      	ldr	r3, [pc, #612]	; (8004754 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80044ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80044f0:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80044fa:	4996      	ldr	r1, [pc, #600]	; (8004754 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80044fc:	4313      	orrs	r3, r2
 80044fe:	658b      	str	r3, [r1, #88]	; 0x58
 8004500:	e001      	b.n	8004506 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004502:	7dfb      	ldrb	r3, [r7, #23]
 8004504:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800450e:	2b00      	cmp	r3, #0
 8004510:	d032      	beq.n	8004578 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004516:	2b30      	cmp	r3, #48	; 0x30
 8004518:	d01c      	beq.n	8004554 <HAL_RCCEx_PeriphCLKConfig+0x348>
 800451a:	2b30      	cmp	r3, #48	; 0x30
 800451c:	d817      	bhi.n	800454e <HAL_RCCEx_PeriphCLKConfig+0x342>
 800451e:	2b20      	cmp	r3, #32
 8004520:	d00c      	beq.n	800453c <HAL_RCCEx_PeriphCLKConfig+0x330>
 8004522:	2b20      	cmp	r3, #32
 8004524:	d813      	bhi.n	800454e <HAL_RCCEx_PeriphCLKConfig+0x342>
 8004526:	2b00      	cmp	r3, #0
 8004528:	d016      	beq.n	8004558 <HAL_RCCEx_PeriphCLKConfig+0x34c>
 800452a:	2b10      	cmp	r3, #16
 800452c:	d10f      	bne.n	800454e <HAL_RCCEx_PeriphCLKConfig+0x342>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800452e:	4b89      	ldr	r3, [pc, #548]	; (8004754 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8004530:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004532:	4a88      	ldr	r2, [pc, #544]	; (8004754 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8004534:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004538:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 800453a:	e00e      	b.n	800455a <HAL_RCCEx_PeriphCLKConfig+0x34e>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	3304      	adds	r3, #4
 8004540:	2102      	movs	r1, #2
 8004542:	4618      	mov	r0, r3
 8004544:	f000 fda8 	bl	8005098 <RCCEx_PLL2_Config>
 8004548:	4603      	mov	r3, r0
 800454a:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 800454c:	e005      	b.n	800455a <HAL_RCCEx_PeriphCLKConfig+0x34e>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 800454e:	2301      	movs	r3, #1
 8004550:	75fb      	strb	r3, [r7, #23]
      break;
 8004552:	e002      	b.n	800455a <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 8004554:	bf00      	nop
 8004556:	e000      	b.n	800455a <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 8004558:	bf00      	nop
    }

    if(ret == HAL_OK)
 800455a:	7dfb      	ldrb	r3, [r7, #23]
 800455c:	2b00      	cmp	r3, #0
 800455e:	d109      	bne.n	8004574 <HAL_RCCEx_PeriphCLKConfig+0x368>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8004560:	4b7c      	ldr	r3, [pc, #496]	; (8004754 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8004562:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004564:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800456c:	4979      	ldr	r1, [pc, #484]	; (8004754 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800456e:	4313      	orrs	r3, r2
 8004570:	64cb      	str	r3, [r1, #76]	; 0x4c
 8004572:	e001      	b.n	8004578 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004574:	7dfb      	ldrb	r3, [r7, #23]
 8004576:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004580:	2b00      	cmp	r3, #0
 8004582:	d047      	beq.n	8004614 <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004588:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800458c:	d030      	beq.n	80045f0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 800458e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004592:	d82a      	bhi.n	80045ea <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8004594:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004598:	d02c      	beq.n	80045f4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 800459a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800459e:	d824      	bhi.n	80045ea <HAL_RCCEx_PeriphCLKConfig+0x3de>
 80045a0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80045a4:	d018      	beq.n	80045d8 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 80045a6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80045aa:	d81e      	bhi.n	80045ea <HAL_RCCEx_PeriphCLKConfig+0x3de>
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d003      	beq.n	80045b8 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
 80045b0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80045b4:	d007      	beq.n	80045c6 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
 80045b6:	e018      	b.n	80045ea <HAL_RCCEx_PeriphCLKConfig+0x3de>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80045b8:	4b66      	ldr	r3, [pc, #408]	; (8004754 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80045ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045bc:	4a65      	ldr	r2, [pc, #404]	; (8004754 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80045be:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80045c2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80045c4:	e017      	b.n	80045f6 <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	3304      	adds	r3, #4
 80045ca:	2100      	movs	r1, #0
 80045cc:	4618      	mov	r0, r3
 80045ce:	f000 fd63 	bl	8005098 <RCCEx_PLL2_Config>
 80045d2:	4603      	mov	r3, r0
 80045d4:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80045d6:	e00e      	b.n	80045f6 <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	3324      	adds	r3, #36	; 0x24
 80045dc:	2100      	movs	r1, #0
 80045de:	4618      	mov	r0, r3
 80045e0:	f000 fe0c 	bl	80051fc <RCCEx_PLL3_Config>
 80045e4:	4603      	mov	r3, r0
 80045e6:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80045e8:	e005      	b.n	80045f6 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80045ea:	2301      	movs	r3, #1
 80045ec:	75fb      	strb	r3, [r7, #23]
      break;
 80045ee:	e002      	b.n	80045f6 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 80045f0:	bf00      	nop
 80045f2:	e000      	b.n	80045f6 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 80045f4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80045f6:	7dfb      	ldrb	r3, [r7, #23]
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d109      	bne.n	8004610 <HAL_RCCEx_PeriphCLKConfig+0x404>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80045fc:	4b55      	ldr	r3, [pc, #340]	; (8004754 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80045fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004600:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004608:	4952      	ldr	r1, [pc, #328]	; (8004754 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800460a:	4313      	orrs	r3, r2
 800460c:	650b      	str	r3, [r1, #80]	; 0x50
 800460e:	e001      	b.n	8004614 <HAL_RCCEx_PeriphCLKConfig+0x408>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004610:	7dfb      	ldrb	r3, [r7, #23]
 8004612:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800461c:	2b00      	cmp	r3, #0
 800461e:	d049      	beq.n	80046b4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004624:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004628:	d02e      	beq.n	8004688 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 800462a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800462e:	d828      	bhi.n	8004682 <HAL_RCCEx_PeriphCLKConfig+0x476>
 8004630:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004634:	d02a      	beq.n	800468c <HAL_RCCEx_PeriphCLKConfig+0x480>
 8004636:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800463a:	d822      	bhi.n	8004682 <HAL_RCCEx_PeriphCLKConfig+0x476>
 800463c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004640:	d026      	beq.n	8004690 <HAL_RCCEx_PeriphCLKConfig+0x484>
 8004642:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004646:	d81c      	bhi.n	8004682 <HAL_RCCEx_PeriphCLKConfig+0x476>
 8004648:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800464c:	d010      	beq.n	8004670 <HAL_RCCEx_PeriphCLKConfig+0x464>
 800464e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004652:	d816      	bhi.n	8004682 <HAL_RCCEx_PeriphCLKConfig+0x476>
 8004654:	2b00      	cmp	r3, #0
 8004656:	d01d      	beq.n	8004694 <HAL_RCCEx_PeriphCLKConfig+0x488>
 8004658:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800465c:	d111      	bne.n	8004682 <HAL_RCCEx_PeriphCLKConfig+0x476>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	3304      	adds	r3, #4
 8004662:	2101      	movs	r1, #1
 8004664:	4618      	mov	r0, r3
 8004666:	f000 fd17 	bl	8005098 <RCCEx_PLL2_Config>
 800466a:	4603      	mov	r3, r0
 800466c:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800466e:	e012      	b.n	8004696 <HAL_RCCEx_PeriphCLKConfig+0x48a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	3324      	adds	r3, #36	; 0x24
 8004674:	2101      	movs	r1, #1
 8004676:	4618      	mov	r0, r3
 8004678:	f000 fdc0 	bl	80051fc <RCCEx_PLL3_Config>
 800467c:	4603      	mov	r3, r0
 800467e:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8004680:	e009      	b.n	8004696 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004682:	2301      	movs	r3, #1
 8004684:	75fb      	strb	r3, [r7, #23]
      break;
 8004686:	e006      	b.n	8004696 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8004688:	bf00      	nop
 800468a:	e004      	b.n	8004696 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 800468c:	bf00      	nop
 800468e:	e002      	b.n	8004696 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8004690:	bf00      	nop
 8004692:	e000      	b.n	8004696 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8004694:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004696:	7dfb      	ldrb	r3, [r7, #23]
 8004698:	2b00      	cmp	r3, #0
 800469a:	d109      	bne.n	80046b0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800469c:	4b2d      	ldr	r3, [pc, #180]	; (8004754 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800469e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80046a0:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80046a8:	492a      	ldr	r1, [pc, #168]	; (8004754 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80046aa:	4313      	orrs	r3, r2
 80046ac:	650b      	str	r3, [r1, #80]	; 0x50
 80046ae:	e001      	b.n	80046b4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80046b0:	7dfb      	ldrb	r3, [r7, #23]
 80046b2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d04d      	beq.n	800475c <HAL_RCCEx_PeriphCLKConfig+0x550>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80046c6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80046ca:	d02e      	beq.n	800472a <HAL_RCCEx_PeriphCLKConfig+0x51e>
 80046cc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80046d0:	d828      	bhi.n	8004724 <HAL_RCCEx_PeriphCLKConfig+0x518>
 80046d2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80046d6:	d02a      	beq.n	800472e <HAL_RCCEx_PeriphCLKConfig+0x522>
 80046d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80046dc:	d822      	bhi.n	8004724 <HAL_RCCEx_PeriphCLKConfig+0x518>
 80046de:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80046e2:	d026      	beq.n	8004732 <HAL_RCCEx_PeriphCLKConfig+0x526>
 80046e4:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80046e8:	d81c      	bhi.n	8004724 <HAL_RCCEx_PeriphCLKConfig+0x518>
 80046ea:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80046ee:	d010      	beq.n	8004712 <HAL_RCCEx_PeriphCLKConfig+0x506>
 80046f0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80046f4:	d816      	bhi.n	8004724 <HAL_RCCEx_PeriphCLKConfig+0x518>
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d01d      	beq.n	8004736 <HAL_RCCEx_PeriphCLKConfig+0x52a>
 80046fa:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80046fe:	d111      	bne.n	8004724 <HAL_RCCEx_PeriphCLKConfig+0x518>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	3304      	adds	r3, #4
 8004704:	2101      	movs	r1, #1
 8004706:	4618      	mov	r0, r3
 8004708:	f000 fcc6 	bl	8005098 <RCCEx_PLL2_Config>
 800470c:	4603      	mov	r3, r0
 800470e:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8004710:	e012      	b.n	8004738 <HAL_RCCEx_PeriphCLKConfig+0x52c>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	3324      	adds	r3, #36	; 0x24
 8004716:	2101      	movs	r1, #1
 8004718:	4618      	mov	r0, r3
 800471a:	f000 fd6f 	bl	80051fc <RCCEx_PLL3_Config>
 800471e:	4603      	mov	r3, r0
 8004720:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8004722:	e009      	b.n	8004738 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8004724:	2301      	movs	r3, #1
 8004726:	75fb      	strb	r3, [r7, #23]
      break;
 8004728:	e006      	b.n	8004738 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 800472a:	bf00      	nop
 800472c:	e004      	b.n	8004738 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 800472e:	bf00      	nop
 8004730:	e002      	b.n	8004738 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8004732:	bf00      	nop
 8004734:	e000      	b.n	8004738 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8004736:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004738:	7dfb      	ldrb	r3, [r7, #23]
 800473a:	2b00      	cmp	r3, #0
 800473c:	d10c      	bne.n	8004758 <HAL_RCCEx_PeriphCLKConfig+0x54c>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800473e:	4b05      	ldr	r3, [pc, #20]	; (8004754 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8004740:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004742:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800474c:	4901      	ldr	r1, [pc, #4]	; (8004754 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800474e:	4313      	orrs	r3, r2
 8004750:	658b      	str	r3, [r1, #88]	; 0x58
 8004752:	e003      	b.n	800475c <HAL_RCCEx_PeriphCLKConfig+0x550>
 8004754:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004758:	7dfb      	ldrb	r3, [r7, #23]
 800475a:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004764:	2b00      	cmp	r3, #0
 8004766:	d02f      	beq.n	80047c8 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800476c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004770:	d00e      	beq.n	8004790 <HAL_RCCEx_PeriphCLKConfig+0x584>
 8004772:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004776:	d814      	bhi.n	80047a2 <HAL_RCCEx_PeriphCLKConfig+0x596>
 8004778:	2b00      	cmp	r3, #0
 800477a:	d015      	beq.n	80047a8 <HAL_RCCEx_PeriphCLKConfig+0x59c>
 800477c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004780:	d10f      	bne.n	80047a2 <HAL_RCCEx_PeriphCLKConfig+0x596>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004782:	4baf      	ldr	r3, [pc, #700]	; (8004a40 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004784:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004786:	4aae      	ldr	r2, [pc, #696]	; (8004a40 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004788:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800478c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800478e:	e00c      	b.n	80047aa <HAL_RCCEx_PeriphCLKConfig+0x59e>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	3304      	adds	r3, #4
 8004794:	2101      	movs	r1, #1
 8004796:	4618      	mov	r0, r3
 8004798:	f000 fc7e 	bl	8005098 <RCCEx_PLL2_Config>
 800479c:	4603      	mov	r3, r0
 800479e:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 80047a0:	e003      	b.n	80047aa <HAL_RCCEx_PeriphCLKConfig+0x59e>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80047a2:	2301      	movs	r3, #1
 80047a4:	75fb      	strb	r3, [r7, #23]
      break;
 80047a6:	e000      	b.n	80047aa <HAL_RCCEx_PeriphCLKConfig+0x59e>
      break;
 80047a8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80047aa:	7dfb      	ldrb	r3, [r7, #23]
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d109      	bne.n	80047c4 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80047b0:	4ba3      	ldr	r3, [pc, #652]	; (8004a40 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80047b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80047b4:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80047bc:	49a0      	ldr	r1, [pc, #640]	; (8004a40 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80047be:	4313      	orrs	r3, r2
 80047c0:	650b      	str	r3, [r1, #80]	; 0x50
 80047c2:	e001      	b.n	80047c8 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80047c4:	7dfb      	ldrb	r3, [r7, #23]
 80047c6:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d032      	beq.n	800483a <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047d8:	2b03      	cmp	r3, #3
 80047da:	d81b      	bhi.n	8004814 <HAL_RCCEx_PeriphCLKConfig+0x608>
 80047dc:	a201      	add	r2, pc, #4	; (adr r2, 80047e4 <HAL_RCCEx_PeriphCLKConfig+0x5d8>)
 80047de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047e2:	bf00      	nop
 80047e4:	0800481b 	.word	0x0800481b
 80047e8:	080047f5 	.word	0x080047f5
 80047ec:	08004803 	.word	0x08004803
 80047f0:	0800481b 	.word	0x0800481b
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80047f4:	4b92      	ldr	r3, [pc, #584]	; (8004a40 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80047f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047f8:	4a91      	ldr	r2, [pc, #580]	; (8004a40 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80047fa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80047fe:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8004800:	e00c      	b.n	800481c <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	3304      	adds	r3, #4
 8004806:	2102      	movs	r1, #2
 8004808:	4618      	mov	r0, r3
 800480a:	f000 fc45 	bl	8005098 <RCCEx_PLL2_Config>
 800480e:	4603      	mov	r3, r0
 8004810:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8004812:	e003      	b.n	800481c <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8004814:	2301      	movs	r3, #1
 8004816:	75fb      	strb	r3, [r7, #23]
      break;
 8004818:	e000      	b.n	800481c <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 800481a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800481c:	7dfb      	ldrb	r3, [r7, #23]
 800481e:	2b00      	cmp	r3, #0
 8004820:	d109      	bne.n	8004836 <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8004822:	4b87      	ldr	r3, [pc, #540]	; (8004a40 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004824:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004826:	f023 0203 	bic.w	r2, r3, #3
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800482e:	4984      	ldr	r1, [pc, #528]	; (8004a40 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004830:	4313      	orrs	r3, r2
 8004832:	64cb      	str	r3, [r1, #76]	; 0x4c
 8004834:	e001      	b.n	800483a <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004836:	7dfb      	ldrb	r3, [r7, #23]
 8004838:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004842:	2b00      	cmp	r3, #0
 8004844:	f000 8086 	beq.w	8004954 <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004848:	4b7e      	ldr	r3, [pc, #504]	; (8004a44 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	4a7d      	ldr	r2, [pc, #500]	; (8004a44 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 800484e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004852:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004854:	f7fc f9ac 	bl	8000bb0 <HAL_GetTick>
 8004858:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800485a:	e009      	b.n	8004870 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800485c:	f7fc f9a8 	bl	8000bb0 <HAL_GetTick>
 8004860:	4602      	mov	r2, r0
 8004862:	693b      	ldr	r3, [r7, #16]
 8004864:	1ad3      	subs	r3, r2, r3
 8004866:	2b64      	cmp	r3, #100	; 0x64
 8004868:	d902      	bls.n	8004870 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 800486a:	2303      	movs	r3, #3
 800486c:	75fb      	strb	r3, [r7, #23]
        break;
 800486e:	e005      	b.n	800487c <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004870:	4b74      	ldr	r3, [pc, #464]	; (8004a44 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004878:	2b00      	cmp	r3, #0
 800487a:	d0ef      	beq.n	800485c <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 800487c:	7dfb      	ldrb	r3, [r7, #23]
 800487e:	2b00      	cmp	r3, #0
 8004880:	d166      	bne.n	8004950 <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8004882:	4b6f      	ldr	r3, [pc, #444]	; (8004a40 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004884:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800488c:	4053      	eors	r3, r2
 800488e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004892:	2b00      	cmp	r3, #0
 8004894:	d013      	beq.n	80048be <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004896:	4b6a      	ldr	r3, [pc, #424]	; (8004a40 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004898:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800489a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800489e:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80048a0:	4b67      	ldr	r3, [pc, #412]	; (8004a40 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80048a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80048a4:	4a66      	ldr	r2, [pc, #408]	; (8004a40 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80048a6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80048aa:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80048ac:	4b64      	ldr	r3, [pc, #400]	; (8004a40 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80048ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80048b0:	4a63      	ldr	r2, [pc, #396]	; (8004a40 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80048b2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80048b6:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80048b8:	4a61      	ldr	r2, [pc, #388]	; (8004a40 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80048c4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80048c8:	d115      	bne.n	80048f6 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80048ca:	f7fc f971 	bl	8000bb0 <HAL_GetTick>
 80048ce:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80048d0:	e00b      	b.n	80048ea <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80048d2:	f7fc f96d 	bl	8000bb0 <HAL_GetTick>
 80048d6:	4602      	mov	r2, r0
 80048d8:	693b      	ldr	r3, [r7, #16]
 80048da:	1ad3      	subs	r3, r2, r3
 80048dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80048e0:	4293      	cmp	r3, r2
 80048e2:	d902      	bls.n	80048ea <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 80048e4:	2303      	movs	r3, #3
 80048e6:	75fb      	strb	r3, [r7, #23]
            break;
 80048e8:	e005      	b.n	80048f6 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80048ea:	4b55      	ldr	r3, [pc, #340]	; (8004a40 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80048ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80048ee:	f003 0302 	and.w	r3, r3, #2
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d0ed      	beq.n	80048d2 <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 80048f6:	7dfb      	ldrb	r3, [r7, #23]
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d126      	bne.n	800494a <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004902:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004906:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800490a:	d10d      	bne.n	8004928 <HAL_RCCEx_PeriphCLKConfig+0x71c>
 800490c:	4b4c      	ldr	r3, [pc, #304]	; (8004a40 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800490e:	691b      	ldr	r3, [r3, #16]
 8004910:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800491a:	0919      	lsrs	r1, r3, #4
 800491c:	4b4a      	ldr	r3, [pc, #296]	; (8004a48 <HAL_RCCEx_PeriphCLKConfig+0x83c>)
 800491e:	400b      	ands	r3, r1
 8004920:	4947      	ldr	r1, [pc, #284]	; (8004a40 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004922:	4313      	orrs	r3, r2
 8004924:	610b      	str	r3, [r1, #16]
 8004926:	e005      	b.n	8004934 <HAL_RCCEx_PeriphCLKConfig+0x728>
 8004928:	4b45      	ldr	r3, [pc, #276]	; (8004a40 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800492a:	691b      	ldr	r3, [r3, #16]
 800492c:	4a44      	ldr	r2, [pc, #272]	; (8004a40 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800492e:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8004932:	6113      	str	r3, [r2, #16]
 8004934:	4b42      	ldr	r3, [pc, #264]	; (8004a40 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004936:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800493e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004942:	493f      	ldr	r1, [pc, #252]	; (8004a40 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004944:	4313      	orrs	r3, r2
 8004946:	670b      	str	r3, [r1, #112]	; 0x70
 8004948:	e004      	b.n	8004954 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800494a:	7dfb      	ldrb	r3, [r7, #23]
 800494c:	75bb      	strb	r3, [r7, #22]
 800494e:	e001      	b.n	8004954 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004950:	7dfb      	ldrb	r3, [r7, #23]
 8004952:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	f003 0301 	and.w	r3, r3, #1
 800495c:	2b00      	cmp	r3, #0
 800495e:	f000 8085 	beq.w	8004a6c <HAL_RCCEx_PeriphCLKConfig+0x860>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004966:	2b28      	cmp	r3, #40	; 0x28
 8004968:	d866      	bhi.n	8004a38 <HAL_RCCEx_PeriphCLKConfig+0x82c>
 800496a:	a201      	add	r2, pc, #4	; (adr r2, 8004970 <HAL_RCCEx_PeriphCLKConfig+0x764>)
 800496c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004970:	08004a4d 	.word	0x08004a4d
 8004974:	08004a39 	.word	0x08004a39
 8004978:	08004a39 	.word	0x08004a39
 800497c:	08004a39 	.word	0x08004a39
 8004980:	08004a39 	.word	0x08004a39
 8004984:	08004a39 	.word	0x08004a39
 8004988:	08004a39 	.word	0x08004a39
 800498c:	08004a39 	.word	0x08004a39
 8004990:	08004a15 	.word	0x08004a15
 8004994:	08004a39 	.word	0x08004a39
 8004998:	08004a39 	.word	0x08004a39
 800499c:	08004a39 	.word	0x08004a39
 80049a0:	08004a39 	.word	0x08004a39
 80049a4:	08004a39 	.word	0x08004a39
 80049a8:	08004a39 	.word	0x08004a39
 80049ac:	08004a39 	.word	0x08004a39
 80049b0:	08004a27 	.word	0x08004a27
 80049b4:	08004a39 	.word	0x08004a39
 80049b8:	08004a39 	.word	0x08004a39
 80049bc:	08004a39 	.word	0x08004a39
 80049c0:	08004a39 	.word	0x08004a39
 80049c4:	08004a39 	.word	0x08004a39
 80049c8:	08004a39 	.word	0x08004a39
 80049cc:	08004a39 	.word	0x08004a39
 80049d0:	08004a4d 	.word	0x08004a4d
 80049d4:	08004a39 	.word	0x08004a39
 80049d8:	08004a39 	.word	0x08004a39
 80049dc:	08004a39 	.word	0x08004a39
 80049e0:	08004a39 	.word	0x08004a39
 80049e4:	08004a39 	.word	0x08004a39
 80049e8:	08004a39 	.word	0x08004a39
 80049ec:	08004a39 	.word	0x08004a39
 80049f0:	08004a4d 	.word	0x08004a4d
 80049f4:	08004a39 	.word	0x08004a39
 80049f8:	08004a39 	.word	0x08004a39
 80049fc:	08004a39 	.word	0x08004a39
 8004a00:	08004a39 	.word	0x08004a39
 8004a04:	08004a39 	.word	0x08004a39
 8004a08:	08004a39 	.word	0x08004a39
 8004a0c:	08004a39 	.word	0x08004a39
 8004a10:	08004a4d 	.word	0x08004a4d
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	3304      	adds	r3, #4
 8004a18:	2101      	movs	r1, #1
 8004a1a:	4618      	mov	r0, r3
 8004a1c:	f000 fb3c 	bl	8005098 <RCCEx_PLL2_Config>
 8004a20:	4603      	mov	r3, r0
 8004a22:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8004a24:	e013      	b.n	8004a4e <HAL_RCCEx_PeriphCLKConfig+0x842>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	3324      	adds	r3, #36	; 0x24
 8004a2a:	2101      	movs	r1, #1
 8004a2c:	4618      	mov	r0, r3
 8004a2e:	f000 fbe5 	bl	80051fc <RCCEx_PLL3_Config>
 8004a32:	4603      	mov	r3, r0
 8004a34:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8004a36:	e00a      	b.n	8004a4e <HAL_RCCEx_PeriphCLKConfig+0x842>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004a38:	2301      	movs	r3, #1
 8004a3a:	75fb      	strb	r3, [r7, #23]
      break;
 8004a3c:	e007      	b.n	8004a4e <HAL_RCCEx_PeriphCLKConfig+0x842>
 8004a3e:	bf00      	nop
 8004a40:	58024400 	.word	0x58024400
 8004a44:	58024800 	.word	0x58024800
 8004a48:	00ffffcf 	.word	0x00ffffcf
      break;
 8004a4c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004a4e:	7dfb      	ldrb	r3, [r7, #23]
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d109      	bne.n	8004a68 <HAL_RCCEx_PeriphCLKConfig+0x85c>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8004a54:	4b96      	ldr	r3, [pc, #600]	; (8004cb0 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8004a56:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a58:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004a60:	4993      	ldr	r1, [pc, #588]	; (8004cb0 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8004a62:	4313      	orrs	r3, r2
 8004a64:	654b      	str	r3, [r1, #84]	; 0x54
 8004a66:	e001      	b.n	8004a6c <HAL_RCCEx_PeriphCLKConfig+0x860>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a68:	7dfb      	ldrb	r3, [r7, #23]
 8004a6a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	f003 0302 	and.w	r3, r3, #2
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d038      	beq.n	8004aea <HAL_RCCEx_PeriphCLKConfig+0x8de>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004a7c:	2b05      	cmp	r3, #5
 8004a7e:	d821      	bhi.n	8004ac4 <HAL_RCCEx_PeriphCLKConfig+0x8b8>
 8004a80:	a201      	add	r2, pc, #4	; (adr r2, 8004a88 <HAL_RCCEx_PeriphCLKConfig+0x87c>)
 8004a82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a86:	bf00      	nop
 8004a88:	08004acb 	.word	0x08004acb
 8004a8c:	08004aa1 	.word	0x08004aa1
 8004a90:	08004ab3 	.word	0x08004ab3
 8004a94:	08004acb 	.word	0x08004acb
 8004a98:	08004acb 	.word	0x08004acb
 8004a9c:	08004acb 	.word	0x08004acb
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	3304      	adds	r3, #4
 8004aa4:	2101      	movs	r1, #1
 8004aa6:	4618      	mov	r0, r3
 8004aa8:	f000 faf6 	bl	8005098 <RCCEx_PLL2_Config>
 8004aac:	4603      	mov	r3, r0
 8004aae:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8004ab0:	e00c      	b.n	8004acc <HAL_RCCEx_PeriphCLKConfig+0x8c0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	3324      	adds	r3, #36	; 0x24
 8004ab6:	2101      	movs	r1, #1
 8004ab8:	4618      	mov	r0, r3
 8004aba:	f000 fb9f 	bl	80051fc <RCCEx_PLL3_Config>
 8004abe:	4603      	mov	r3, r0
 8004ac0:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8004ac2:	e003      	b.n	8004acc <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004ac4:	2301      	movs	r3, #1
 8004ac6:	75fb      	strb	r3, [r7, #23]
      break;
 8004ac8:	e000      	b.n	8004acc <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      break;
 8004aca:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004acc:	7dfb      	ldrb	r3, [r7, #23]
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d109      	bne.n	8004ae6 <HAL_RCCEx_PeriphCLKConfig+0x8da>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8004ad2:	4b77      	ldr	r3, [pc, #476]	; (8004cb0 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8004ad4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ad6:	f023 0207 	bic.w	r2, r3, #7
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004ade:	4974      	ldr	r1, [pc, #464]	; (8004cb0 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8004ae0:	4313      	orrs	r3, r2
 8004ae2:	654b      	str	r3, [r1, #84]	; 0x54
 8004ae4:	e001      	b.n	8004aea <HAL_RCCEx_PeriphCLKConfig+0x8de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ae6:	7dfb      	ldrb	r3, [r7, #23]
 8004ae8:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	f003 0304 	and.w	r3, r3, #4
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d03a      	beq.n	8004b6c <HAL_RCCEx_PeriphCLKConfig+0x960>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004afc:	2b05      	cmp	r3, #5
 8004afe:	d821      	bhi.n	8004b44 <HAL_RCCEx_PeriphCLKConfig+0x938>
 8004b00:	a201      	add	r2, pc, #4	; (adr r2, 8004b08 <HAL_RCCEx_PeriphCLKConfig+0x8fc>)
 8004b02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b06:	bf00      	nop
 8004b08:	08004b4b 	.word	0x08004b4b
 8004b0c:	08004b21 	.word	0x08004b21
 8004b10:	08004b33 	.word	0x08004b33
 8004b14:	08004b4b 	.word	0x08004b4b
 8004b18:	08004b4b 	.word	0x08004b4b
 8004b1c:	08004b4b 	.word	0x08004b4b
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	3304      	adds	r3, #4
 8004b24:	2101      	movs	r1, #1
 8004b26:	4618      	mov	r0, r3
 8004b28:	f000 fab6 	bl	8005098 <RCCEx_PLL2_Config>
 8004b2c:	4603      	mov	r3, r0
 8004b2e:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8004b30:	e00c      	b.n	8004b4c <HAL_RCCEx_PeriphCLKConfig+0x940>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	3324      	adds	r3, #36	; 0x24
 8004b36:	2101      	movs	r1, #1
 8004b38:	4618      	mov	r0, r3
 8004b3a:	f000 fb5f 	bl	80051fc <RCCEx_PLL3_Config>
 8004b3e:	4603      	mov	r3, r0
 8004b40:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8004b42:	e003      	b.n	8004b4c <HAL_RCCEx_PeriphCLKConfig+0x940>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004b44:	2301      	movs	r3, #1
 8004b46:	75fb      	strb	r3, [r7, #23]
      break;
 8004b48:	e000      	b.n	8004b4c <HAL_RCCEx_PeriphCLKConfig+0x940>
      break;
 8004b4a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004b4c:	7dfb      	ldrb	r3, [r7, #23]
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d10a      	bne.n	8004b68 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004b52:	4b57      	ldr	r3, [pc, #348]	; (8004cb0 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8004b54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b56:	f023 0207 	bic.w	r2, r3, #7
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b60:	4953      	ldr	r1, [pc, #332]	; (8004cb0 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8004b62:	4313      	orrs	r3, r2
 8004b64:	658b      	str	r3, [r1, #88]	; 0x58
 8004b66:	e001      	b.n	8004b6c <HAL_RCCEx_PeriphCLKConfig+0x960>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b68:	7dfb      	ldrb	r3, [r7, #23]
 8004b6a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	f003 0320 	and.w	r3, r3, #32
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d04b      	beq.n	8004c10 <HAL_RCCEx_PeriphCLKConfig+0xa04>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004b7e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004b82:	d02e      	beq.n	8004be2 <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 8004b84:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004b88:	d828      	bhi.n	8004bdc <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8004b8a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004b8e:	d02a      	beq.n	8004be6 <HAL_RCCEx_PeriphCLKConfig+0x9da>
 8004b90:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004b94:	d822      	bhi.n	8004bdc <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8004b96:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004b9a:	d026      	beq.n	8004bea <HAL_RCCEx_PeriphCLKConfig+0x9de>
 8004b9c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004ba0:	d81c      	bhi.n	8004bdc <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8004ba2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004ba6:	d010      	beq.n	8004bca <HAL_RCCEx_PeriphCLKConfig+0x9be>
 8004ba8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004bac:	d816      	bhi.n	8004bdc <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d01d      	beq.n	8004bee <HAL_RCCEx_PeriphCLKConfig+0x9e2>
 8004bb2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004bb6:	d111      	bne.n	8004bdc <HAL_RCCEx_PeriphCLKConfig+0x9d0>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	3304      	adds	r3, #4
 8004bbc:	2100      	movs	r1, #0
 8004bbe:	4618      	mov	r0, r3
 8004bc0:	f000 fa6a 	bl	8005098 <RCCEx_PLL2_Config>
 8004bc4:	4603      	mov	r3, r0
 8004bc6:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8004bc8:	e012      	b.n	8004bf0 <HAL_RCCEx_PeriphCLKConfig+0x9e4>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	3324      	adds	r3, #36	; 0x24
 8004bce:	2102      	movs	r1, #2
 8004bd0:	4618      	mov	r0, r3
 8004bd2:	f000 fb13 	bl	80051fc <RCCEx_PLL3_Config>
 8004bd6:	4603      	mov	r3, r0
 8004bd8:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8004bda:	e009      	b.n	8004bf0 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004bdc:	2301      	movs	r3, #1
 8004bde:	75fb      	strb	r3, [r7, #23]
      break;
 8004be0:	e006      	b.n	8004bf0 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8004be2:	bf00      	nop
 8004be4:	e004      	b.n	8004bf0 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8004be6:	bf00      	nop
 8004be8:	e002      	b.n	8004bf0 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8004bea:	bf00      	nop
 8004bec:	e000      	b.n	8004bf0 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8004bee:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004bf0:	7dfb      	ldrb	r3, [r7, #23]
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d10a      	bne.n	8004c0c <HAL_RCCEx_PeriphCLKConfig+0xa00>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004bf6:	4b2e      	ldr	r3, [pc, #184]	; (8004cb0 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8004bf8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004bfa:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004c04:	492a      	ldr	r1, [pc, #168]	; (8004cb0 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8004c06:	4313      	orrs	r3, r2
 8004c08:	654b      	str	r3, [r1, #84]	; 0x54
 8004c0a:	e001      	b.n	8004c10 <HAL_RCCEx_PeriphCLKConfig+0xa04>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c0c:	7dfb      	ldrb	r3, [r7, #23]
 8004c0e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d04d      	beq.n	8004cb8 <HAL_RCCEx_PeriphCLKConfig+0xaac>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004c22:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8004c26:	d02e      	beq.n	8004c86 <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 8004c28:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8004c2c:	d828      	bhi.n	8004c80 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8004c2e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004c32:	d02a      	beq.n	8004c8a <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8004c34:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004c38:	d822      	bhi.n	8004c80 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8004c3a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004c3e:	d026      	beq.n	8004c8e <HAL_RCCEx_PeriphCLKConfig+0xa82>
 8004c40:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004c44:	d81c      	bhi.n	8004c80 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8004c46:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004c4a:	d010      	beq.n	8004c6e <HAL_RCCEx_PeriphCLKConfig+0xa62>
 8004c4c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004c50:	d816      	bhi.n	8004c80 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d01d      	beq.n	8004c92 <HAL_RCCEx_PeriphCLKConfig+0xa86>
 8004c56:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004c5a:	d111      	bne.n	8004c80 <HAL_RCCEx_PeriphCLKConfig+0xa74>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	3304      	adds	r3, #4
 8004c60:	2100      	movs	r1, #0
 8004c62:	4618      	mov	r0, r3
 8004c64:	f000 fa18 	bl	8005098 <RCCEx_PLL2_Config>
 8004c68:	4603      	mov	r3, r0
 8004c6a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8004c6c:	e012      	b.n	8004c94 <HAL_RCCEx_PeriphCLKConfig+0xa88>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	3324      	adds	r3, #36	; 0x24
 8004c72:	2102      	movs	r1, #2
 8004c74:	4618      	mov	r0, r3
 8004c76:	f000 fac1 	bl	80051fc <RCCEx_PLL3_Config>
 8004c7a:	4603      	mov	r3, r0
 8004c7c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8004c7e:	e009      	b.n	8004c94 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004c80:	2301      	movs	r3, #1
 8004c82:	75fb      	strb	r3, [r7, #23]
      break;
 8004c84:	e006      	b.n	8004c94 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8004c86:	bf00      	nop
 8004c88:	e004      	b.n	8004c94 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8004c8a:	bf00      	nop
 8004c8c:	e002      	b.n	8004c94 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8004c8e:	bf00      	nop
 8004c90:	e000      	b.n	8004c94 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8004c92:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004c94:	7dfb      	ldrb	r3, [r7, #23]
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d10c      	bne.n	8004cb4 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004c9a:	4b05      	ldr	r3, [pc, #20]	; (8004cb0 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8004c9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c9e:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004ca8:	4901      	ldr	r1, [pc, #4]	; (8004cb0 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8004caa:	4313      	orrs	r3, r2
 8004cac:	658b      	str	r3, [r1, #88]	; 0x58
 8004cae:	e003      	b.n	8004cb8 <HAL_RCCEx_PeriphCLKConfig+0xaac>
 8004cb0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004cb4:	7dfb      	ldrb	r3, [r7, #23]
 8004cb6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d04b      	beq.n	8004d5c <HAL_RCCEx_PeriphCLKConfig+0xb50>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004cca:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8004cce:	d02e      	beq.n	8004d2e <HAL_RCCEx_PeriphCLKConfig+0xb22>
 8004cd0:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8004cd4:	d828      	bhi.n	8004d28 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8004cd6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004cda:	d02a      	beq.n	8004d32 <HAL_RCCEx_PeriphCLKConfig+0xb26>
 8004cdc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004ce0:	d822      	bhi.n	8004d28 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8004ce2:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8004ce6:	d026      	beq.n	8004d36 <HAL_RCCEx_PeriphCLKConfig+0xb2a>
 8004ce8:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8004cec:	d81c      	bhi.n	8004d28 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8004cee:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004cf2:	d010      	beq.n	8004d16 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
 8004cf4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004cf8:	d816      	bhi.n	8004d28 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d01d      	beq.n	8004d3a <HAL_RCCEx_PeriphCLKConfig+0xb2e>
 8004cfe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004d02:	d111      	bne.n	8004d28 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	3304      	adds	r3, #4
 8004d08:	2100      	movs	r1, #0
 8004d0a:	4618      	mov	r0, r3
 8004d0c:	f000 f9c4 	bl	8005098 <RCCEx_PLL2_Config>
 8004d10:	4603      	mov	r3, r0
 8004d12:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8004d14:	e012      	b.n	8004d3c <HAL_RCCEx_PeriphCLKConfig+0xb30>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	3324      	adds	r3, #36	; 0x24
 8004d1a:	2102      	movs	r1, #2
 8004d1c:	4618      	mov	r0, r3
 8004d1e:	f000 fa6d 	bl	80051fc <RCCEx_PLL3_Config>
 8004d22:	4603      	mov	r3, r0
 8004d24:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8004d26:	e009      	b.n	8004d3c <HAL_RCCEx_PeriphCLKConfig+0xb30>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004d28:	2301      	movs	r3, #1
 8004d2a:	75fb      	strb	r3, [r7, #23]
      break;
 8004d2c:	e006      	b.n	8004d3c <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8004d2e:	bf00      	nop
 8004d30:	e004      	b.n	8004d3c <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8004d32:	bf00      	nop
 8004d34:	e002      	b.n	8004d3c <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8004d36:	bf00      	nop
 8004d38:	e000      	b.n	8004d3c <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8004d3a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004d3c:	7dfb      	ldrb	r3, [r7, #23]
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d10a      	bne.n	8004d58 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8004d42:	4b9d      	ldr	r3, [pc, #628]	; (8004fb8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004d44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d46:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004d50:	4999      	ldr	r1, [pc, #612]	; (8004fb8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004d52:	4313      	orrs	r3, r2
 8004d54:	658b      	str	r3, [r1, #88]	; 0x58
 8004d56:	e001      	b.n	8004d5c <HAL_RCCEx_PeriphCLKConfig+0xb50>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d58:	7dfb      	ldrb	r3, [r7, #23]
 8004d5a:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	f003 0308 	and.w	r3, r3, #8
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d01a      	beq.n	8004d9e <HAL_RCCEx_PeriphCLKConfig+0xb92>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004d6e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004d72:	d10a      	bne.n	8004d8a <HAL_RCCEx_PeriphCLKConfig+0xb7e>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	3324      	adds	r3, #36	; 0x24
 8004d78:	2102      	movs	r1, #2
 8004d7a:	4618      	mov	r0, r3
 8004d7c:	f000 fa3e 	bl	80051fc <RCCEx_PLL3_Config>
 8004d80:	4603      	mov	r3, r0
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d001      	beq.n	8004d8a <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        {
          status = HAL_ERROR;
 8004d86:	2301      	movs	r3, #1
 8004d88:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8004d8a:	4b8b      	ldr	r3, [pc, #556]	; (8004fb8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004d8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d8e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004d98:	4987      	ldr	r1, [pc, #540]	; (8004fb8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004d9a:	4313      	orrs	r3, r2
 8004d9c:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	f003 0310 	and.w	r3, r3, #16
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d01a      	beq.n	8004de0 <HAL_RCCEx_PeriphCLKConfig+0xbd4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004db0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004db4:	d10a      	bne.n	8004dcc <HAL_RCCEx_PeriphCLKConfig+0xbc0>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	3324      	adds	r3, #36	; 0x24
 8004dba:	2102      	movs	r1, #2
 8004dbc:	4618      	mov	r0, r3
 8004dbe:	f000 fa1d 	bl	80051fc <RCCEx_PLL3_Config>
 8004dc2:	4603      	mov	r3, r0
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d001      	beq.n	8004dcc <HAL_RCCEx_PeriphCLKConfig+0xbc0>
      {
        status = HAL_ERROR;
 8004dc8:	2301      	movs	r3, #1
 8004dca:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004dcc:	4b7a      	ldr	r3, [pc, #488]	; (8004fb8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004dce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004dd0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004dda:	4977      	ldr	r1, [pc, #476]	; (8004fb8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004ddc:	4313      	orrs	r3, r2
 8004dde:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d034      	beq.n	8004e56 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8004df2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004df6:	d01d      	beq.n	8004e34 <HAL_RCCEx_PeriphCLKConfig+0xc28>
 8004df8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004dfc:	d817      	bhi.n	8004e2e <HAL_RCCEx_PeriphCLKConfig+0xc22>
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d003      	beq.n	8004e0a <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 8004e02:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004e06:	d009      	beq.n	8004e1c <HAL_RCCEx_PeriphCLKConfig+0xc10>
 8004e08:	e011      	b.n	8004e2e <HAL_RCCEx_PeriphCLKConfig+0xc22>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	3304      	adds	r3, #4
 8004e0e:	2100      	movs	r1, #0
 8004e10:	4618      	mov	r0, r3
 8004e12:	f000 f941 	bl	8005098 <RCCEx_PLL2_Config>
 8004e16:	4603      	mov	r3, r0
 8004e18:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8004e1a:	e00c      	b.n	8004e36 <HAL_RCCEx_PeriphCLKConfig+0xc2a>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	3324      	adds	r3, #36	; 0x24
 8004e20:	2102      	movs	r1, #2
 8004e22:	4618      	mov	r0, r3
 8004e24:	f000 f9ea 	bl	80051fc <RCCEx_PLL3_Config>
 8004e28:	4603      	mov	r3, r0
 8004e2a:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8004e2c:	e003      	b.n	8004e36 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004e2e:	2301      	movs	r3, #1
 8004e30:	75fb      	strb	r3, [r7, #23]
      break;
 8004e32:	e000      	b.n	8004e36 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      break;
 8004e34:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004e36:	7dfb      	ldrb	r3, [r7, #23]
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d10a      	bne.n	8004e52 <HAL_RCCEx_PeriphCLKConfig+0xc46>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004e3c:	4b5e      	ldr	r3, [pc, #376]	; (8004fb8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004e3e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e40:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8004e4a:	495b      	ldr	r1, [pc, #364]	; (8004fb8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004e4c:	4313      	orrs	r3, r2
 8004e4e:	658b      	str	r3, [r1, #88]	; 0x58
 8004e50:	e001      	b.n	8004e56 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004e52:	7dfb      	ldrb	r3, [r7, #23]
 8004e54:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d033      	beq.n	8004eca <HAL_RCCEx_PeriphCLKConfig+0xcbe>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004e68:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004e6c:	d01c      	beq.n	8004ea8 <HAL_RCCEx_PeriphCLKConfig+0xc9c>
 8004e6e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004e72:	d816      	bhi.n	8004ea2 <HAL_RCCEx_PeriphCLKConfig+0xc96>
 8004e74:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004e78:	d003      	beq.n	8004e82 <HAL_RCCEx_PeriphCLKConfig+0xc76>
 8004e7a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004e7e:	d007      	beq.n	8004e90 <HAL_RCCEx_PeriphCLKConfig+0xc84>
 8004e80:	e00f      	b.n	8004ea2 <HAL_RCCEx_PeriphCLKConfig+0xc96>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004e82:	4b4d      	ldr	r3, [pc, #308]	; (8004fb8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004e84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e86:	4a4c      	ldr	r2, [pc, #304]	; (8004fb8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004e88:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004e8c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8004e8e:	e00c      	b.n	8004eaa <HAL_RCCEx_PeriphCLKConfig+0xc9e>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	3324      	adds	r3, #36	; 0x24
 8004e94:	2101      	movs	r1, #1
 8004e96:	4618      	mov	r0, r3
 8004e98:	f000 f9b0 	bl	80051fc <RCCEx_PLL3_Config>
 8004e9c:	4603      	mov	r3, r0
 8004e9e:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8004ea0:	e003      	b.n	8004eaa <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004ea2:	2301      	movs	r3, #1
 8004ea4:	75fb      	strb	r3, [r7, #23]
      break;
 8004ea6:	e000      	b.n	8004eaa <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      break;
 8004ea8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004eaa:	7dfb      	ldrb	r3, [r7, #23]
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d10a      	bne.n	8004ec6 <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004eb0:	4b41      	ldr	r3, [pc, #260]	; (8004fb8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004eb2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004eb4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004ebe:	493e      	ldr	r1, [pc, #248]	; (8004fb8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004ec0:	4313      	orrs	r3, r2
 8004ec2:	654b      	str	r3, [r1, #84]	; 0x54
 8004ec4:	e001      	b.n	8004eca <HAL_RCCEx_PeriphCLKConfig+0xcbe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ec6:	7dfb      	ldrb	r3, [r7, #23]
 8004ec8:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d029      	beq.n	8004f2a <HAL_RCCEx_PeriphCLKConfig+0xd1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d003      	beq.n	8004ee6 <HAL_RCCEx_PeriphCLKConfig+0xcda>
 8004ede:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004ee2:	d007      	beq.n	8004ef4 <HAL_RCCEx_PeriphCLKConfig+0xce8>
 8004ee4:	e00f      	b.n	8004f06 <HAL_RCCEx_PeriphCLKConfig+0xcfa>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004ee6:	4b34      	ldr	r3, [pc, #208]	; (8004fb8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004ee8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004eea:	4a33      	ldr	r2, [pc, #204]	; (8004fb8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004eec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004ef0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8004ef2:	e00b      	b.n	8004f0c <HAL_RCCEx_PeriphCLKConfig+0xd00>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	3304      	adds	r3, #4
 8004ef8:	2102      	movs	r1, #2
 8004efa:	4618      	mov	r0, r3
 8004efc:	f000 f8cc 	bl	8005098 <RCCEx_PLL2_Config>
 8004f00:	4603      	mov	r3, r0
 8004f02:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8004f04:	e002      	b.n	8004f0c <HAL_RCCEx_PeriphCLKConfig+0xd00>

    default:
      ret = HAL_ERROR;
 8004f06:	2301      	movs	r3, #1
 8004f08:	75fb      	strb	r3, [r7, #23]
      break;
 8004f0a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004f0c:	7dfb      	ldrb	r3, [r7, #23]
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d109      	bne.n	8004f26 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8004f12:	4b29      	ldr	r3, [pc, #164]	; (8004fb8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004f14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004f16:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004f1e:	4926      	ldr	r1, [pc, #152]	; (8004fb8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004f20:	4313      	orrs	r3, r2
 8004f22:	64cb      	str	r3, [r1, #76]	; 0x4c
 8004f24:	e001      	b.n	8004f2a <HAL_RCCEx_PeriphCLKConfig+0xd1e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f26:	7dfb      	ldrb	r3, [r7, #23]
 8004f28:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d00a      	beq.n	8004f4c <HAL_RCCEx_PeriphCLKConfig+0xd40>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	3324      	adds	r3, #36	; 0x24
 8004f3a:	2102      	movs	r1, #2
 8004f3c:	4618      	mov	r0, r3
 8004f3e:	f000 f95d 	bl	80051fc <RCCEx_PLL3_Config>
 8004f42:	4603      	mov	r3, r0
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d001      	beq.n	8004f4c <HAL_RCCEx_PeriphCLKConfig+0xd40>
    {
      status=HAL_ERROR;
 8004f48:	2301      	movs	r3, #1
 8004f4a:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d033      	beq.n	8004fc0 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
  {

    switch(PeriphClkInit->RngClockSelection)
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004f5c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004f60:	d017      	beq.n	8004f92 <HAL_RCCEx_PeriphCLKConfig+0xd86>
 8004f62:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004f66:	d811      	bhi.n	8004f8c <HAL_RCCEx_PeriphCLKConfig+0xd80>
 8004f68:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004f6c:	d013      	beq.n	8004f96 <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 8004f6e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004f72:	d80b      	bhi.n	8004f8c <HAL_RCCEx_PeriphCLKConfig+0xd80>
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d010      	beq.n	8004f9a <HAL_RCCEx_PeriphCLKConfig+0xd8e>
 8004f78:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004f7c:	d106      	bne.n	8004f8c <HAL_RCCEx_PeriphCLKConfig+0xd80>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004f7e:	4b0e      	ldr	r3, [pc, #56]	; (8004fb8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004f80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f82:	4a0d      	ldr	r2, [pc, #52]	; (8004fb8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004f84:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004f88:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8004f8a:	e007      	b.n	8004f9c <HAL_RCCEx_PeriphCLKConfig+0xd90>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004f8c:	2301      	movs	r3, #1
 8004f8e:	75fb      	strb	r3, [r7, #23]
      break;
 8004f90:	e004      	b.n	8004f9c <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8004f92:	bf00      	nop
 8004f94:	e002      	b.n	8004f9c <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8004f96:	bf00      	nop
 8004f98:	e000      	b.n	8004f9c <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8004f9a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004f9c:	7dfb      	ldrb	r3, [r7, #23]
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d10c      	bne.n	8004fbc <HAL_RCCEx_PeriphCLKConfig+0xdb0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004fa2:	4b05      	ldr	r3, [pc, #20]	; (8004fb8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004fa4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004fa6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004fae:	4902      	ldr	r1, [pc, #8]	; (8004fb8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004fb0:	4313      	orrs	r3, r2
 8004fb2:	654b      	str	r3, [r1, #84]	; 0x54
 8004fb4:	e004      	b.n	8004fc0 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
 8004fb6:	bf00      	nop
 8004fb8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004fbc:	7dfb      	ldrb	r3, [r7, #23]
 8004fbe:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d008      	beq.n	8004fde <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004fcc:	4b31      	ldr	r3, [pc, #196]	; (8005094 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8004fce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004fd0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004fd8:	492e      	ldr	r1, [pc, #184]	; (8005094 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8004fda:	4313      	orrs	r3, r2
 8004fdc:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d009      	beq.n	8004ffe <HAL_RCCEx_PeriphCLKConfig+0xdf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8004fea:	4b2a      	ldr	r3, [pc, #168]	; (8005094 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8004fec:	691b      	ldr	r3, [r3, #16]
 8004fee:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8004ff8:	4926      	ldr	r1, [pc, #152]	; (8005094 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8004ffa:	4313      	orrs	r3, r2
 8004ffc:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005006:	2b00      	cmp	r3, #0
 8005008:	d008      	beq.n	800501c <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800500a:	4b22      	ldr	r3, [pc, #136]	; (8005094 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800500c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800500e:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005016:	491f      	ldr	r1, [pc, #124]	; (8005094 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8005018:	4313      	orrs	r3, r2
 800501a:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8005024:	2b00      	cmp	r3, #0
 8005026:	d00d      	beq.n	8005044 <HAL_RCCEx_PeriphCLKConfig+0xe38>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005028:	4b1a      	ldr	r3, [pc, #104]	; (8005094 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800502a:	691b      	ldr	r3, [r3, #16]
 800502c:	4a19      	ldr	r2, [pc, #100]	; (8005094 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800502e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005032:	6113      	str	r3, [r2, #16]
 8005034:	4b17      	ldr	r3, [pc, #92]	; (8005094 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8005036:	691a      	ldr	r2, [r3, #16]
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800503e:	4915      	ldr	r1, [pc, #84]	; (8005094 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8005040:	4313      	orrs	r3, r2
 8005042:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	2b00      	cmp	r3, #0
 800504a:	da08      	bge.n	800505e <HAL_RCCEx_PeriphCLKConfig+0xe52>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800504c:	4b11      	ldr	r3, [pc, #68]	; (8005094 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800504e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005050:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005058:	490e      	ldr	r1, [pc, #56]	; (8005094 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800505a:	4313      	orrs	r3, r2
 800505c:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005066:	2b00      	cmp	r3, #0
 8005068:	d009      	beq.n	800507e <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800506a:	4b0a      	ldr	r3, [pc, #40]	; (8005094 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800506c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800506e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005078:	4906      	ldr	r1, [pc, #24]	; (8005094 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800507a:	4313      	orrs	r3, r2
 800507c:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 800507e:	7dbb      	ldrb	r3, [r7, #22]
 8005080:	2b00      	cmp	r3, #0
 8005082:	d101      	bne.n	8005088 <HAL_RCCEx_PeriphCLKConfig+0xe7c>
  {
    return HAL_OK;
 8005084:	2300      	movs	r3, #0
 8005086:	e000      	b.n	800508a <HAL_RCCEx_PeriphCLKConfig+0xe7e>
  }
  return HAL_ERROR;
 8005088:	2301      	movs	r3, #1
}
 800508a:	4618      	mov	r0, r3
 800508c:	3718      	adds	r7, #24
 800508e:	46bd      	mov	sp, r7
 8005090:	bd80      	pop	{r7, pc}
 8005092:	bf00      	nop
 8005094:	58024400 	.word	0x58024400

08005098 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8005098:	b580      	push	{r7, lr}
 800509a:	b084      	sub	sp, #16
 800509c:	af00      	add	r7, sp, #0
 800509e:	6078      	str	r0, [r7, #4]
 80050a0:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80050a2:	2300      	movs	r3, #0
 80050a4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80050a6:	4b53      	ldr	r3, [pc, #332]	; (80051f4 <RCCEx_PLL2_Config+0x15c>)
 80050a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050aa:	f003 0303 	and.w	r3, r3, #3
 80050ae:	2b03      	cmp	r3, #3
 80050b0:	d101      	bne.n	80050b6 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 80050b2:	2301      	movs	r3, #1
 80050b4:	e099      	b.n	80051ea <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80050b6:	4b4f      	ldr	r3, [pc, #316]	; (80051f4 <RCCEx_PLL2_Config+0x15c>)
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	4a4e      	ldr	r2, [pc, #312]	; (80051f4 <RCCEx_PLL2_Config+0x15c>)
 80050bc:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80050c0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80050c2:	f7fb fd75 	bl	8000bb0 <HAL_GetTick>
 80050c6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80050c8:	e008      	b.n	80050dc <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 80050ca:	f7fb fd71 	bl	8000bb0 <HAL_GetTick>
 80050ce:	4602      	mov	r2, r0
 80050d0:	68bb      	ldr	r3, [r7, #8]
 80050d2:	1ad3      	subs	r3, r2, r3
 80050d4:	2b02      	cmp	r3, #2
 80050d6:	d901      	bls.n	80050dc <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80050d8:	2303      	movs	r3, #3
 80050da:	e086      	b.n	80051ea <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80050dc:	4b45      	ldr	r3, [pc, #276]	; (80051f4 <RCCEx_PLL2_Config+0x15c>)
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d1f0      	bne.n	80050ca <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80050e8:	4b42      	ldr	r3, [pc, #264]	; (80051f4 <RCCEx_PLL2_Config+0x15c>)
 80050ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050ec:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	031b      	lsls	r3, r3, #12
 80050f6:	493f      	ldr	r1, [pc, #252]	; (80051f4 <RCCEx_PLL2_Config+0x15c>)
 80050f8:	4313      	orrs	r3, r2
 80050fa:	628b      	str	r3, [r1, #40]	; 0x28
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	685b      	ldr	r3, [r3, #4]
 8005100:	3b01      	subs	r3, #1
 8005102:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	689b      	ldr	r3, [r3, #8]
 800510a:	3b01      	subs	r3, #1
 800510c:	025b      	lsls	r3, r3, #9
 800510e:	b29b      	uxth	r3, r3
 8005110:	431a      	orrs	r2, r3
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	68db      	ldr	r3, [r3, #12]
 8005116:	3b01      	subs	r3, #1
 8005118:	041b      	lsls	r3, r3, #16
 800511a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800511e:	431a      	orrs	r2, r3
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	691b      	ldr	r3, [r3, #16]
 8005124:	3b01      	subs	r3, #1
 8005126:	061b      	lsls	r3, r3, #24
 8005128:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800512c:	4931      	ldr	r1, [pc, #196]	; (80051f4 <RCCEx_PLL2_Config+0x15c>)
 800512e:	4313      	orrs	r3, r2
 8005130:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8005132:	4b30      	ldr	r3, [pc, #192]	; (80051f4 <RCCEx_PLL2_Config+0x15c>)
 8005134:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005136:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	695b      	ldr	r3, [r3, #20]
 800513e:	492d      	ldr	r1, [pc, #180]	; (80051f4 <RCCEx_PLL2_Config+0x15c>)
 8005140:	4313      	orrs	r3, r2
 8005142:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8005144:	4b2b      	ldr	r3, [pc, #172]	; (80051f4 <RCCEx_PLL2_Config+0x15c>)
 8005146:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005148:	f023 0220 	bic.w	r2, r3, #32
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	699b      	ldr	r3, [r3, #24]
 8005150:	4928      	ldr	r1, [pc, #160]	; (80051f4 <RCCEx_PLL2_Config+0x15c>)
 8005152:	4313      	orrs	r3, r2
 8005154:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8005156:	4b27      	ldr	r3, [pc, #156]	; (80051f4 <RCCEx_PLL2_Config+0x15c>)
 8005158:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800515a:	4a26      	ldr	r2, [pc, #152]	; (80051f4 <RCCEx_PLL2_Config+0x15c>)
 800515c:	f023 0310 	bic.w	r3, r3, #16
 8005160:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8005162:	4b24      	ldr	r3, [pc, #144]	; (80051f4 <RCCEx_PLL2_Config+0x15c>)
 8005164:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005166:	4b24      	ldr	r3, [pc, #144]	; (80051f8 <RCCEx_PLL2_Config+0x160>)
 8005168:	4013      	ands	r3, r2
 800516a:	687a      	ldr	r2, [r7, #4]
 800516c:	69d2      	ldr	r2, [r2, #28]
 800516e:	00d2      	lsls	r2, r2, #3
 8005170:	4920      	ldr	r1, [pc, #128]	; (80051f4 <RCCEx_PLL2_Config+0x15c>)
 8005172:	4313      	orrs	r3, r2
 8005174:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8005176:	4b1f      	ldr	r3, [pc, #124]	; (80051f4 <RCCEx_PLL2_Config+0x15c>)
 8005178:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800517a:	4a1e      	ldr	r2, [pc, #120]	; (80051f4 <RCCEx_PLL2_Config+0x15c>)
 800517c:	f043 0310 	orr.w	r3, r3, #16
 8005180:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8005182:	683b      	ldr	r3, [r7, #0]
 8005184:	2b00      	cmp	r3, #0
 8005186:	d106      	bne.n	8005196 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8005188:	4b1a      	ldr	r3, [pc, #104]	; (80051f4 <RCCEx_PLL2_Config+0x15c>)
 800518a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800518c:	4a19      	ldr	r2, [pc, #100]	; (80051f4 <RCCEx_PLL2_Config+0x15c>)
 800518e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005192:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005194:	e00f      	b.n	80051b6 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8005196:	683b      	ldr	r3, [r7, #0]
 8005198:	2b01      	cmp	r3, #1
 800519a:	d106      	bne.n	80051aa <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800519c:	4b15      	ldr	r3, [pc, #84]	; (80051f4 <RCCEx_PLL2_Config+0x15c>)
 800519e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051a0:	4a14      	ldr	r2, [pc, #80]	; (80051f4 <RCCEx_PLL2_Config+0x15c>)
 80051a2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80051a6:	62d3      	str	r3, [r2, #44]	; 0x2c
 80051a8:	e005      	b.n	80051b6 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80051aa:	4b12      	ldr	r3, [pc, #72]	; (80051f4 <RCCEx_PLL2_Config+0x15c>)
 80051ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051ae:	4a11      	ldr	r2, [pc, #68]	; (80051f4 <RCCEx_PLL2_Config+0x15c>)
 80051b0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80051b4:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80051b6:	4b0f      	ldr	r3, [pc, #60]	; (80051f4 <RCCEx_PLL2_Config+0x15c>)
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	4a0e      	ldr	r2, [pc, #56]	; (80051f4 <RCCEx_PLL2_Config+0x15c>)
 80051bc:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80051c0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80051c2:	f7fb fcf5 	bl	8000bb0 <HAL_GetTick>
 80051c6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80051c8:	e008      	b.n	80051dc <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 80051ca:	f7fb fcf1 	bl	8000bb0 <HAL_GetTick>
 80051ce:	4602      	mov	r2, r0
 80051d0:	68bb      	ldr	r3, [r7, #8]
 80051d2:	1ad3      	subs	r3, r2, r3
 80051d4:	2b02      	cmp	r3, #2
 80051d6:	d901      	bls.n	80051dc <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80051d8:	2303      	movs	r3, #3
 80051da:	e006      	b.n	80051ea <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80051dc:	4b05      	ldr	r3, [pc, #20]	; (80051f4 <RCCEx_PLL2_Config+0x15c>)
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d0f0      	beq.n	80051ca <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80051e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80051ea:	4618      	mov	r0, r3
 80051ec:	3710      	adds	r7, #16
 80051ee:	46bd      	mov	sp, r7
 80051f0:	bd80      	pop	{r7, pc}
 80051f2:	bf00      	nop
 80051f4:	58024400 	.word	0x58024400
 80051f8:	ffff0007 	.word	0xffff0007

080051fc <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80051fc:	b580      	push	{r7, lr}
 80051fe:	b084      	sub	sp, #16
 8005200:	af00      	add	r7, sp, #0
 8005202:	6078      	str	r0, [r7, #4]
 8005204:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005206:	2300      	movs	r3, #0
 8005208:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800520a:	4b53      	ldr	r3, [pc, #332]	; (8005358 <RCCEx_PLL3_Config+0x15c>)
 800520c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800520e:	f003 0303 	and.w	r3, r3, #3
 8005212:	2b03      	cmp	r3, #3
 8005214:	d101      	bne.n	800521a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8005216:	2301      	movs	r3, #1
 8005218:	e099      	b.n	800534e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800521a:	4b4f      	ldr	r3, [pc, #316]	; (8005358 <RCCEx_PLL3_Config+0x15c>)
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	4a4e      	ldr	r2, [pc, #312]	; (8005358 <RCCEx_PLL3_Config+0x15c>)
 8005220:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005224:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005226:	f7fb fcc3 	bl	8000bb0 <HAL_GetTick>
 800522a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800522c:	e008      	b.n	8005240 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800522e:	f7fb fcbf 	bl	8000bb0 <HAL_GetTick>
 8005232:	4602      	mov	r2, r0
 8005234:	68bb      	ldr	r3, [r7, #8]
 8005236:	1ad3      	subs	r3, r2, r3
 8005238:	2b02      	cmp	r3, #2
 800523a:	d901      	bls.n	8005240 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800523c:	2303      	movs	r3, #3
 800523e:	e086      	b.n	800534e <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8005240:	4b45      	ldr	r3, [pc, #276]	; (8005358 <RCCEx_PLL3_Config+0x15c>)
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005248:	2b00      	cmp	r3, #0
 800524a:	d1f0      	bne.n	800522e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800524c:	4b42      	ldr	r3, [pc, #264]	; (8005358 <RCCEx_PLL3_Config+0x15c>)
 800524e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005250:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	051b      	lsls	r3, r3, #20
 800525a:	493f      	ldr	r1, [pc, #252]	; (8005358 <RCCEx_PLL3_Config+0x15c>)
 800525c:	4313      	orrs	r3, r2
 800525e:	628b      	str	r3, [r1, #40]	; 0x28
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	685b      	ldr	r3, [r3, #4]
 8005264:	3b01      	subs	r3, #1
 8005266:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	689b      	ldr	r3, [r3, #8]
 800526e:	3b01      	subs	r3, #1
 8005270:	025b      	lsls	r3, r3, #9
 8005272:	b29b      	uxth	r3, r3
 8005274:	431a      	orrs	r2, r3
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	68db      	ldr	r3, [r3, #12]
 800527a:	3b01      	subs	r3, #1
 800527c:	041b      	lsls	r3, r3, #16
 800527e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8005282:	431a      	orrs	r2, r3
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	691b      	ldr	r3, [r3, #16]
 8005288:	3b01      	subs	r3, #1
 800528a:	061b      	lsls	r3, r3, #24
 800528c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8005290:	4931      	ldr	r1, [pc, #196]	; (8005358 <RCCEx_PLL3_Config+0x15c>)
 8005292:	4313      	orrs	r3, r2
 8005294:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8005296:	4b30      	ldr	r3, [pc, #192]	; (8005358 <RCCEx_PLL3_Config+0x15c>)
 8005298:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800529a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	695b      	ldr	r3, [r3, #20]
 80052a2:	492d      	ldr	r1, [pc, #180]	; (8005358 <RCCEx_PLL3_Config+0x15c>)
 80052a4:	4313      	orrs	r3, r2
 80052a6:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80052a8:	4b2b      	ldr	r3, [pc, #172]	; (8005358 <RCCEx_PLL3_Config+0x15c>)
 80052aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052ac:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	699b      	ldr	r3, [r3, #24]
 80052b4:	4928      	ldr	r1, [pc, #160]	; (8005358 <RCCEx_PLL3_Config+0x15c>)
 80052b6:	4313      	orrs	r3, r2
 80052b8:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80052ba:	4b27      	ldr	r3, [pc, #156]	; (8005358 <RCCEx_PLL3_Config+0x15c>)
 80052bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052be:	4a26      	ldr	r2, [pc, #152]	; (8005358 <RCCEx_PLL3_Config+0x15c>)
 80052c0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80052c4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80052c6:	4b24      	ldr	r3, [pc, #144]	; (8005358 <RCCEx_PLL3_Config+0x15c>)
 80052c8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80052ca:	4b24      	ldr	r3, [pc, #144]	; (800535c <RCCEx_PLL3_Config+0x160>)
 80052cc:	4013      	ands	r3, r2
 80052ce:	687a      	ldr	r2, [r7, #4]
 80052d0:	69d2      	ldr	r2, [r2, #28]
 80052d2:	00d2      	lsls	r2, r2, #3
 80052d4:	4920      	ldr	r1, [pc, #128]	; (8005358 <RCCEx_PLL3_Config+0x15c>)
 80052d6:	4313      	orrs	r3, r2
 80052d8:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80052da:	4b1f      	ldr	r3, [pc, #124]	; (8005358 <RCCEx_PLL3_Config+0x15c>)
 80052dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052de:	4a1e      	ldr	r2, [pc, #120]	; (8005358 <RCCEx_PLL3_Config+0x15c>)
 80052e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80052e4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 80052e6:	683b      	ldr	r3, [r7, #0]
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d106      	bne.n	80052fa <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80052ec:	4b1a      	ldr	r3, [pc, #104]	; (8005358 <RCCEx_PLL3_Config+0x15c>)
 80052ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052f0:	4a19      	ldr	r2, [pc, #100]	; (8005358 <RCCEx_PLL3_Config+0x15c>)
 80052f2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80052f6:	62d3      	str	r3, [r2, #44]	; 0x2c
 80052f8:	e00f      	b.n	800531a <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 80052fa:	683b      	ldr	r3, [r7, #0]
 80052fc:	2b01      	cmp	r3, #1
 80052fe:	d106      	bne.n	800530e <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8005300:	4b15      	ldr	r3, [pc, #84]	; (8005358 <RCCEx_PLL3_Config+0x15c>)
 8005302:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005304:	4a14      	ldr	r2, [pc, #80]	; (8005358 <RCCEx_PLL3_Config+0x15c>)
 8005306:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800530a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800530c:	e005      	b.n	800531a <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800530e:	4b12      	ldr	r3, [pc, #72]	; (8005358 <RCCEx_PLL3_Config+0x15c>)
 8005310:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005312:	4a11      	ldr	r2, [pc, #68]	; (8005358 <RCCEx_PLL3_Config+0x15c>)
 8005314:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005318:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800531a:	4b0f      	ldr	r3, [pc, #60]	; (8005358 <RCCEx_PLL3_Config+0x15c>)
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	4a0e      	ldr	r2, [pc, #56]	; (8005358 <RCCEx_PLL3_Config+0x15c>)
 8005320:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005324:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005326:	f7fb fc43 	bl	8000bb0 <HAL_GetTick>
 800532a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800532c:	e008      	b.n	8005340 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800532e:	f7fb fc3f 	bl	8000bb0 <HAL_GetTick>
 8005332:	4602      	mov	r2, r0
 8005334:	68bb      	ldr	r3, [r7, #8]
 8005336:	1ad3      	subs	r3, r2, r3
 8005338:	2b02      	cmp	r3, #2
 800533a:	d901      	bls.n	8005340 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800533c:	2303      	movs	r3, #3
 800533e:	e006      	b.n	800534e <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005340:	4b05      	ldr	r3, [pc, #20]	; (8005358 <RCCEx_PLL3_Config+0x15c>)
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005348:	2b00      	cmp	r3, #0
 800534a:	d0f0      	beq.n	800532e <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800534c:	7bfb      	ldrb	r3, [r7, #15]
}
 800534e:	4618      	mov	r0, r3
 8005350:	3710      	adds	r7, #16
 8005352:	46bd      	mov	sp, r7
 8005354:	bd80      	pop	{r7, pc}
 8005356:	bf00      	nop
 8005358:	58024400 	.word	0x58024400
 800535c:	ffff0007 	.word	0xffff0007

08005360 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005360:	b084      	sub	sp, #16
 8005362:	b580      	push	{r7, lr}
 8005364:	b084      	sub	sp, #16
 8005366:	af00      	add	r7, sp, #0
 8005368:	6078      	str	r0, [r7, #4]
 800536a:	f107 001c 	add.w	r0, r7, #28
 800536e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005372:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005374:	2b01      	cmp	r3, #1
 8005376:	d120      	bne.n	80053ba <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800537c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	68da      	ldr	r2, [r3, #12]
 8005388:	4b2a      	ldr	r3, [pc, #168]	; (8005434 <USB_CoreInit+0xd4>)
 800538a:	4013      	ands	r3, r2
 800538c:	687a      	ldr	r2, [r7, #4]
 800538e:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	68db      	ldr	r3, [r3, #12]
 8005394:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800539c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800539e:	2b01      	cmp	r3, #1
 80053a0:	d105      	bne.n	80053ae <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	68db      	ldr	r3, [r3, #12]
 80053a6:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80053ae:	6878      	ldr	r0, [r7, #4]
 80053b0:	f001 fb14 	bl	80069dc <USB_CoreReset>
 80053b4:	4603      	mov	r3, r0
 80053b6:	73fb      	strb	r3, [r7, #15]
 80053b8:	e01a      	b.n	80053f0 <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	68db      	ldr	r3, [r3, #12]
 80053be:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80053c6:	6878      	ldr	r0, [r7, #4]
 80053c8:	f001 fb08 	bl	80069dc <USB_CoreReset>
 80053cc:	4603      	mov	r3, r0
 80053ce:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80053d0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d106      	bne.n	80053e4 <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053da:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	639a      	str	r2, [r3, #56]	; 0x38
 80053e2:	e005      	b.n	80053f0 <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053e8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80053f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053f2:	2b01      	cmp	r3, #1
 80053f4:	d116      	bne.n	8005424 <USB_CoreInit+0xc4>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80053fa:	b29a      	uxth	r2, r3
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	65da      	str	r2, [r3, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005404:	4b0c      	ldr	r3, [pc, #48]	; (8005438 <USB_CoreInit+0xd8>)
 8005406:	4313      	orrs	r3, r2
 8005408:	687a      	ldr	r2, [r7, #4]
 800540a:	65d3      	str	r3, [r2, #92]	; 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	689b      	ldr	r3, [r3, #8]
 8005410:	f043 0206 	orr.w	r2, r3, #6
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	689b      	ldr	r3, [r3, #8]
 800541c:	f043 0220 	orr.w	r2, r3, #32
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8005424:	7bfb      	ldrb	r3, [r7, #15]
}
 8005426:	4618      	mov	r0, r3
 8005428:	3710      	adds	r7, #16
 800542a:	46bd      	mov	sp, r7
 800542c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005430:	b004      	add	sp, #16
 8005432:	4770      	bx	lr
 8005434:	ffbdffbf 	.word	0xffbdffbf
 8005438:	03ee0000 	.word	0x03ee0000

0800543c <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800543c:	b480      	push	{r7}
 800543e:	b087      	sub	sp, #28
 8005440:	af00      	add	r7, sp, #0
 8005442:	60f8      	str	r0, [r7, #12]
 8005444:	60b9      	str	r1, [r7, #8]
 8005446:	4613      	mov	r3, r2
 8005448:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800544a:	79fb      	ldrb	r3, [r7, #7]
 800544c:	2b02      	cmp	r3, #2
 800544e:	d165      	bne.n	800551c <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8005450:	68bb      	ldr	r3, [r7, #8]
 8005452:	4a41      	ldr	r2, [pc, #260]	; (8005558 <USB_SetTurnaroundTime+0x11c>)
 8005454:	4293      	cmp	r3, r2
 8005456:	d906      	bls.n	8005466 <USB_SetTurnaroundTime+0x2a>
 8005458:	68bb      	ldr	r3, [r7, #8]
 800545a:	4a40      	ldr	r2, [pc, #256]	; (800555c <USB_SetTurnaroundTime+0x120>)
 800545c:	4293      	cmp	r3, r2
 800545e:	d202      	bcs.n	8005466 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8005460:	230f      	movs	r3, #15
 8005462:	617b      	str	r3, [r7, #20]
 8005464:	e062      	b.n	800552c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8005466:	68bb      	ldr	r3, [r7, #8]
 8005468:	4a3c      	ldr	r2, [pc, #240]	; (800555c <USB_SetTurnaroundTime+0x120>)
 800546a:	4293      	cmp	r3, r2
 800546c:	d306      	bcc.n	800547c <USB_SetTurnaroundTime+0x40>
 800546e:	68bb      	ldr	r3, [r7, #8]
 8005470:	4a3b      	ldr	r2, [pc, #236]	; (8005560 <USB_SetTurnaroundTime+0x124>)
 8005472:	4293      	cmp	r3, r2
 8005474:	d202      	bcs.n	800547c <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8005476:	230e      	movs	r3, #14
 8005478:	617b      	str	r3, [r7, #20]
 800547a:	e057      	b.n	800552c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800547c:	68bb      	ldr	r3, [r7, #8]
 800547e:	4a38      	ldr	r2, [pc, #224]	; (8005560 <USB_SetTurnaroundTime+0x124>)
 8005480:	4293      	cmp	r3, r2
 8005482:	d306      	bcc.n	8005492 <USB_SetTurnaroundTime+0x56>
 8005484:	68bb      	ldr	r3, [r7, #8]
 8005486:	4a37      	ldr	r2, [pc, #220]	; (8005564 <USB_SetTurnaroundTime+0x128>)
 8005488:	4293      	cmp	r3, r2
 800548a:	d202      	bcs.n	8005492 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800548c:	230d      	movs	r3, #13
 800548e:	617b      	str	r3, [r7, #20]
 8005490:	e04c      	b.n	800552c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8005492:	68bb      	ldr	r3, [r7, #8]
 8005494:	4a33      	ldr	r2, [pc, #204]	; (8005564 <USB_SetTurnaroundTime+0x128>)
 8005496:	4293      	cmp	r3, r2
 8005498:	d306      	bcc.n	80054a8 <USB_SetTurnaroundTime+0x6c>
 800549a:	68bb      	ldr	r3, [r7, #8]
 800549c:	4a32      	ldr	r2, [pc, #200]	; (8005568 <USB_SetTurnaroundTime+0x12c>)
 800549e:	4293      	cmp	r3, r2
 80054a0:	d802      	bhi.n	80054a8 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80054a2:	230c      	movs	r3, #12
 80054a4:	617b      	str	r3, [r7, #20]
 80054a6:	e041      	b.n	800552c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80054a8:	68bb      	ldr	r3, [r7, #8]
 80054aa:	4a2f      	ldr	r2, [pc, #188]	; (8005568 <USB_SetTurnaroundTime+0x12c>)
 80054ac:	4293      	cmp	r3, r2
 80054ae:	d906      	bls.n	80054be <USB_SetTurnaroundTime+0x82>
 80054b0:	68bb      	ldr	r3, [r7, #8]
 80054b2:	4a2e      	ldr	r2, [pc, #184]	; (800556c <USB_SetTurnaroundTime+0x130>)
 80054b4:	4293      	cmp	r3, r2
 80054b6:	d802      	bhi.n	80054be <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80054b8:	230b      	movs	r3, #11
 80054ba:	617b      	str	r3, [r7, #20]
 80054bc:	e036      	b.n	800552c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80054be:	68bb      	ldr	r3, [r7, #8]
 80054c0:	4a2a      	ldr	r2, [pc, #168]	; (800556c <USB_SetTurnaroundTime+0x130>)
 80054c2:	4293      	cmp	r3, r2
 80054c4:	d906      	bls.n	80054d4 <USB_SetTurnaroundTime+0x98>
 80054c6:	68bb      	ldr	r3, [r7, #8]
 80054c8:	4a29      	ldr	r2, [pc, #164]	; (8005570 <USB_SetTurnaroundTime+0x134>)
 80054ca:	4293      	cmp	r3, r2
 80054cc:	d802      	bhi.n	80054d4 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80054ce:	230a      	movs	r3, #10
 80054d0:	617b      	str	r3, [r7, #20]
 80054d2:	e02b      	b.n	800552c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80054d4:	68bb      	ldr	r3, [r7, #8]
 80054d6:	4a26      	ldr	r2, [pc, #152]	; (8005570 <USB_SetTurnaroundTime+0x134>)
 80054d8:	4293      	cmp	r3, r2
 80054da:	d906      	bls.n	80054ea <USB_SetTurnaroundTime+0xae>
 80054dc:	68bb      	ldr	r3, [r7, #8]
 80054de:	4a25      	ldr	r2, [pc, #148]	; (8005574 <USB_SetTurnaroundTime+0x138>)
 80054e0:	4293      	cmp	r3, r2
 80054e2:	d202      	bcs.n	80054ea <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80054e4:	2309      	movs	r3, #9
 80054e6:	617b      	str	r3, [r7, #20]
 80054e8:	e020      	b.n	800552c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80054ea:	68bb      	ldr	r3, [r7, #8]
 80054ec:	4a21      	ldr	r2, [pc, #132]	; (8005574 <USB_SetTurnaroundTime+0x138>)
 80054ee:	4293      	cmp	r3, r2
 80054f0:	d306      	bcc.n	8005500 <USB_SetTurnaroundTime+0xc4>
 80054f2:	68bb      	ldr	r3, [r7, #8]
 80054f4:	4a20      	ldr	r2, [pc, #128]	; (8005578 <USB_SetTurnaroundTime+0x13c>)
 80054f6:	4293      	cmp	r3, r2
 80054f8:	d802      	bhi.n	8005500 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 80054fa:	2308      	movs	r3, #8
 80054fc:	617b      	str	r3, [r7, #20]
 80054fe:	e015      	b.n	800552c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8005500:	68bb      	ldr	r3, [r7, #8]
 8005502:	4a1d      	ldr	r2, [pc, #116]	; (8005578 <USB_SetTurnaroundTime+0x13c>)
 8005504:	4293      	cmp	r3, r2
 8005506:	d906      	bls.n	8005516 <USB_SetTurnaroundTime+0xda>
 8005508:	68bb      	ldr	r3, [r7, #8]
 800550a:	4a1c      	ldr	r2, [pc, #112]	; (800557c <USB_SetTurnaroundTime+0x140>)
 800550c:	4293      	cmp	r3, r2
 800550e:	d202      	bcs.n	8005516 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8005510:	2307      	movs	r3, #7
 8005512:	617b      	str	r3, [r7, #20]
 8005514:	e00a      	b.n	800552c <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8005516:	2306      	movs	r3, #6
 8005518:	617b      	str	r3, [r7, #20]
 800551a:	e007      	b.n	800552c <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800551c:	79fb      	ldrb	r3, [r7, #7]
 800551e:	2b00      	cmp	r3, #0
 8005520:	d102      	bne.n	8005528 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8005522:	2309      	movs	r3, #9
 8005524:	617b      	str	r3, [r7, #20]
 8005526:	e001      	b.n	800552c <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8005528:	2309      	movs	r3, #9
 800552a:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	68db      	ldr	r3, [r3, #12]
 8005530:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	68da      	ldr	r2, [r3, #12]
 800553c:	697b      	ldr	r3, [r7, #20]
 800553e:	029b      	lsls	r3, r3, #10
 8005540:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8005544:	431a      	orrs	r2, r3
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800554a:	2300      	movs	r3, #0
}
 800554c:	4618      	mov	r0, r3
 800554e:	371c      	adds	r7, #28
 8005550:	46bd      	mov	sp, r7
 8005552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005556:	4770      	bx	lr
 8005558:	00d8acbf 	.word	0x00d8acbf
 800555c:	00e4e1c0 	.word	0x00e4e1c0
 8005560:	00f42400 	.word	0x00f42400
 8005564:	01067380 	.word	0x01067380
 8005568:	011a499f 	.word	0x011a499f
 800556c:	01312cff 	.word	0x01312cff
 8005570:	014ca43f 	.word	0x014ca43f
 8005574:	016e3600 	.word	0x016e3600
 8005578:	01a6ab1f 	.word	0x01a6ab1f
 800557c:	01e84800 	.word	0x01e84800

08005580 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005580:	b480      	push	{r7}
 8005582:	b083      	sub	sp, #12
 8005584:	af00      	add	r7, sp, #0
 8005586:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	689b      	ldr	r3, [r3, #8]
 800558c:	f043 0201 	orr.w	r2, r3, #1
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005594:	2300      	movs	r3, #0
}
 8005596:	4618      	mov	r0, r3
 8005598:	370c      	adds	r7, #12
 800559a:	46bd      	mov	sp, r7
 800559c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055a0:	4770      	bx	lr

080055a2 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80055a2:	b480      	push	{r7}
 80055a4:	b083      	sub	sp, #12
 80055a6:	af00      	add	r7, sp, #0
 80055a8:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	689b      	ldr	r3, [r3, #8]
 80055ae:	f023 0201 	bic.w	r2, r3, #1
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80055b6:	2300      	movs	r3, #0
}
 80055b8:	4618      	mov	r0, r3
 80055ba:	370c      	adds	r7, #12
 80055bc:	46bd      	mov	sp, r7
 80055be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055c2:	4770      	bx	lr

080055c4 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80055c4:	b580      	push	{r7, lr}
 80055c6:	b082      	sub	sp, #8
 80055c8:	af00      	add	r7, sp, #0
 80055ca:	6078      	str	r0, [r7, #4]
 80055cc:	460b      	mov	r3, r1
 80055ce:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	68db      	ldr	r3, [r3, #12]
 80055d4:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80055dc:	78fb      	ldrb	r3, [r7, #3]
 80055de:	2b01      	cmp	r3, #1
 80055e0:	d106      	bne.n	80055f0 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	68db      	ldr	r3, [r3, #12]
 80055e6:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	60da      	str	r2, [r3, #12]
 80055ee:	e00b      	b.n	8005608 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 80055f0:	78fb      	ldrb	r3, [r7, #3]
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d106      	bne.n	8005604 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	68db      	ldr	r3, [r3, #12]
 80055fa:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	60da      	str	r2, [r3, #12]
 8005602:	e001      	b.n	8005608 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8005604:	2301      	movs	r3, #1
 8005606:	e003      	b.n	8005610 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8005608:	2032      	movs	r0, #50	; 0x32
 800560a:	f7fb fadd 	bl	8000bc8 <HAL_Delay>

  return HAL_OK;
 800560e:	2300      	movs	r3, #0
}
 8005610:	4618      	mov	r0, r3
 8005612:	3708      	adds	r7, #8
 8005614:	46bd      	mov	sp, r7
 8005616:	bd80      	pop	{r7, pc}

08005618 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005618:	b084      	sub	sp, #16
 800561a:	b580      	push	{r7, lr}
 800561c:	b086      	sub	sp, #24
 800561e:	af00      	add	r7, sp, #0
 8005620:	6078      	str	r0, [r7, #4]
 8005622:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8005626:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800562a:	2300      	movs	r3, #0
 800562c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8005632:	2300      	movs	r3, #0
 8005634:	613b      	str	r3, [r7, #16]
 8005636:	e009      	b.n	800564c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8005638:	687a      	ldr	r2, [r7, #4]
 800563a:	693b      	ldr	r3, [r7, #16]
 800563c:	3340      	adds	r3, #64	; 0x40
 800563e:	009b      	lsls	r3, r3, #2
 8005640:	4413      	add	r3, r2
 8005642:	2200      	movs	r2, #0
 8005644:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8005646:	693b      	ldr	r3, [r7, #16]
 8005648:	3301      	adds	r3, #1
 800564a:	613b      	str	r3, [r7, #16]
 800564c:	693b      	ldr	r3, [r7, #16]
 800564e:	2b0e      	cmp	r3, #14
 8005650:	d9f2      	bls.n	8005638 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8005652:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005654:	2b00      	cmp	r3, #0
 8005656:	d11c      	bne.n	8005692 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800565e:	685b      	ldr	r3, [r3, #4]
 8005660:	68fa      	ldr	r2, [r7, #12]
 8005662:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005666:	f043 0302 	orr.w	r3, r3, #2
 800566a:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005670:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	601a      	str	r2, [r3, #0]
 8005690:	e005      	b.n	800569e <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005696:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80056a4:	461a      	mov	r2, r3
 80056a6:	2300      	movs	r3, #0
 80056a8:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80056b0:	4619      	mov	r1, r3
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80056b8:	461a      	mov	r2, r3
 80056ba:	680b      	ldr	r3, [r1, #0]
 80056bc:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80056be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056c0:	2b01      	cmp	r3, #1
 80056c2:	d10c      	bne.n	80056de <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80056c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d104      	bne.n	80056d4 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80056ca:	2100      	movs	r1, #0
 80056cc:	6878      	ldr	r0, [r7, #4]
 80056ce:	f000 f949 	bl	8005964 <USB_SetDevSpeed>
 80056d2:	e008      	b.n	80056e6 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80056d4:	2101      	movs	r1, #1
 80056d6:	6878      	ldr	r0, [r7, #4]
 80056d8:	f000 f944 	bl	8005964 <USB_SetDevSpeed>
 80056dc:	e003      	b.n	80056e6 <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80056de:	2103      	movs	r1, #3
 80056e0:	6878      	ldr	r0, [r7, #4]
 80056e2:	f000 f93f 	bl	8005964 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80056e6:	2110      	movs	r1, #16
 80056e8:	6878      	ldr	r0, [r7, #4]
 80056ea:	f000 f8f3 	bl	80058d4 <USB_FlushTxFifo>
 80056ee:	4603      	mov	r3, r0
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d001      	beq.n	80056f8 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 80056f4:	2301      	movs	r3, #1
 80056f6:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80056f8:	6878      	ldr	r0, [r7, #4]
 80056fa:	f000 f911 	bl	8005920 <USB_FlushRxFifo>
 80056fe:	4603      	mov	r3, r0
 8005700:	2b00      	cmp	r3, #0
 8005702:	d001      	beq.n	8005708 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8005704:	2301      	movs	r3, #1
 8005706:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800570e:	461a      	mov	r2, r3
 8005710:	2300      	movs	r3, #0
 8005712:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800571a:	461a      	mov	r2, r3
 800571c:	2300      	movs	r3, #0
 800571e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005726:	461a      	mov	r2, r3
 8005728:	2300      	movs	r3, #0
 800572a:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800572c:	2300      	movs	r3, #0
 800572e:	613b      	str	r3, [r7, #16]
 8005730:	e043      	b.n	80057ba <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005732:	693b      	ldr	r3, [r7, #16]
 8005734:	015a      	lsls	r2, r3, #5
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	4413      	add	r3, r2
 800573a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005744:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005748:	d118      	bne.n	800577c <USB_DevInit+0x164>
    {
      if (i == 0U)
 800574a:	693b      	ldr	r3, [r7, #16]
 800574c:	2b00      	cmp	r3, #0
 800574e:	d10a      	bne.n	8005766 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8005750:	693b      	ldr	r3, [r7, #16]
 8005752:	015a      	lsls	r2, r3, #5
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	4413      	add	r3, r2
 8005758:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800575c:	461a      	mov	r2, r3
 800575e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005762:	6013      	str	r3, [r2, #0]
 8005764:	e013      	b.n	800578e <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8005766:	693b      	ldr	r3, [r7, #16]
 8005768:	015a      	lsls	r2, r3, #5
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	4413      	add	r3, r2
 800576e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005772:	461a      	mov	r2, r3
 8005774:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005778:	6013      	str	r3, [r2, #0]
 800577a:	e008      	b.n	800578e <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800577c:	693b      	ldr	r3, [r7, #16]
 800577e:	015a      	lsls	r2, r3, #5
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	4413      	add	r3, r2
 8005784:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005788:	461a      	mov	r2, r3
 800578a:	2300      	movs	r3, #0
 800578c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800578e:	693b      	ldr	r3, [r7, #16]
 8005790:	015a      	lsls	r2, r3, #5
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	4413      	add	r3, r2
 8005796:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800579a:	461a      	mov	r2, r3
 800579c:	2300      	movs	r3, #0
 800579e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80057a0:	693b      	ldr	r3, [r7, #16]
 80057a2:	015a      	lsls	r2, r3, #5
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	4413      	add	r3, r2
 80057a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80057ac:	461a      	mov	r2, r3
 80057ae:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80057b2:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80057b4:	693b      	ldr	r3, [r7, #16]
 80057b6:	3301      	adds	r3, #1
 80057b8:	613b      	str	r3, [r7, #16]
 80057ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057bc:	693a      	ldr	r2, [r7, #16]
 80057be:	429a      	cmp	r2, r3
 80057c0:	d3b7      	bcc.n	8005732 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80057c2:	2300      	movs	r3, #0
 80057c4:	613b      	str	r3, [r7, #16]
 80057c6:	e043      	b.n	8005850 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80057c8:	693b      	ldr	r3, [r7, #16]
 80057ca:	015a      	lsls	r2, r3, #5
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	4413      	add	r3, r2
 80057d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80057da:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80057de:	d118      	bne.n	8005812 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 80057e0:	693b      	ldr	r3, [r7, #16]
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d10a      	bne.n	80057fc <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80057e6:	693b      	ldr	r3, [r7, #16]
 80057e8:	015a      	lsls	r2, r3, #5
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	4413      	add	r3, r2
 80057ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80057f2:	461a      	mov	r2, r3
 80057f4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80057f8:	6013      	str	r3, [r2, #0]
 80057fa:	e013      	b.n	8005824 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80057fc:	693b      	ldr	r3, [r7, #16]
 80057fe:	015a      	lsls	r2, r3, #5
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	4413      	add	r3, r2
 8005804:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005808:	461a      	mov	r2, r3
 800580a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800580e:	6013      	str	r3, [r2, #0]
 8005810:	e008      	b.n	8005824 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8005812:	693b      	ldr	r3, [r7, #16]
 8005814:	015a      	lsls	r2, r3, #5
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	4413      	add	r3, r2
 800581a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800581e:	461a      	mov	r2, r3
 8005820:	2300      	movs	r3, #0
 8005822:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8005824:	693b      	ldr	r3, [r7, #16]
 8005826:	015a      	lsls	r2, r3, #5
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	4413      	add	r3, r2
 800582c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005830:	461a      	mov	r2, r3
 8005832:	2300      	movs	r3, #0
 8005834:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8005836:	693b      	ldr	r3, [r7, #16]
 8005838:	015a      	lsls	r2, r3, #5
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	4413      	add	r3, r2
 800583e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005842:	461a      	mov	r2, r3
 8005844:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005848:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800584a:	693b      	ldr	r3, [r7, #16]
 800584c:	3301      	adds	r3, #1
 800584e:	613b      	str	r3, [r7, #16]
 8005850:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005852:	693a      	ldr	r2, [r7, #16]
 8005854:	429a      	cmp	r2, r3
 8005856:	d3b7      	bcc.n	80057c8 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800585e:	691b      	ldr	r3, [r3, #16]
 8005860:	68fa      	ldr	r2, [r7, #12]
 8005862:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005866:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800586a:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	2200      	movs	r2, #0
 8005870:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8005878:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800587a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800587c:	2b00      	cmp	r3, #0
 800587e:	d105      	bne.n	800588c <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	699b      	ldr	r3, [r3, #24]
 8005884:	f043 0210 	orr.w	r2, r3, #16
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	699a      	ldr	r2, [r3, #24]
 8005890:	4b0e      	ldr	r3, [pc, #56]	; (80058cc <USB_DevInit+0x2b4>)
 8005892:	4313      	orrs	r3, r2
 8005894:	687a      	ldr	r2, [r7, #4]
 8005896:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8005898:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800589a:	2b00      	cmp	r3, #0
 800589c:	d005      	beq.n	80058aa <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	699b      	ldr	r3, [r3, #24]
 80058a2:	f043 0208 	orr.w	r2, r3, #8
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80058aa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80058ac:	2b01      	cmp	r3, #1
 80058ae:	d105      	bne.n	80058bc <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	699a      	ldr	r2, [r3, #24]
 80058b4:	4b06      	ldr	r3, [pc, #24]	; (80058d0 <USB_DevInit+0x2b8>)
 80058b6:	4313      	orrs	r3, r2
 80058b8:	687a      	ldr	r2, [r7, #4]
 80058ba:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80058bc:	7dfb      	ldrb	r3, [r7, #23]
}
 80058be:	4618      	mov	r0, r3
 80058c0:	3718      	adds	r7, #24
 80058c2:	46bd      	mov	sp, r7
 80058c4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80058c8:	b004      	add	sp, #16
 80058ca:	4770      	bx	lr
 80058cc:	803c3800 	.word	0x803c3800
 80058d0:	40000004 	.word	0x40000004

080058d4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80058d4:	b480      	push	{r7}
 80058d6:	b085      	sub	sp, #20
 80058d8:	af00      	add	r7, sp, #0
 80058da:	6078      	str	r0, [r7, #4]
 80058dc:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 80058de:	2300      	movs	r3, #0
 80058e0:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80058e2:	683b      	ldr	r3, [r7, #0]
 80058e4:	019b      	lsls	r3, r3, #6
 80058e6:	f043 0220 	orr.w	r2, r3, #32
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	3301      	adds	r3, #1
 80058f2:	60fb      	str	r3, [r7, #12]
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	4a09      	ldr	r2, [pc, #36]	; (800591c <USB_FlushTxFifo+0x48>)
 80058f8:	4293      	cmp	r3, r2
 80058fa:	d901      	bls.n	8005900 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 80058fc:	2303      	movs	r3, #3
 80058fe:	e006      	b.n	800590e <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	691b      	ldr	r3, [r3, #16]
 8005904:	f003 0320 	and.w	r3, r3, #32
 8005908:	2b20      	cmp	r3, #32
 800590a:	d0f0      	beq.n	80058ee <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800590c:	2300      	movs	r3, #0
}
 800590e:	4618      	mov	r0, r3
 8005910:	3714      	adds	r7, #20
 8005912:	46bd      	mov	sp, r7
 8005914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005918:	4770      	bx	lr
 800591a:	bf00      	nop
 800591c:	00030d40 	.word	0x00030d40

08005920 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005920:	b480      	push	{r7}
 8005922:	b085      	sub	sp, #20
 8005924:	af00      	add	r7, sp, #0
 8005926:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8005928:	2300      	movs	r3, #0
 800592a:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	2210      	movs	r2, #16
 8005930:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	3301      	adds	r3, #1
 8005936:	60fb      	str	r3, [r7, #12]
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	4a09      	ldr	r2, [pc, #36]	; (8005960 <USB_FlushRxFifo+0x40>)
 800593c:	4293      	cmp	r3, r2
 800593e:	d901      	bls.n	8005944 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8005940:	2303      	movs	r3, #3
 8005942:	e006      	b.n	8005952 <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	691b      	ldr	r3, [r3, #16]
 8005948:	f003 0310 	and.w	r3, r3, #16
 800594c:	2b10      	cmp	r3, #16
 800594e:	d0f0      	beq.n	8005932 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8005950:	2300      	movs	r3, #0
}
 8005952:	4618      	mov	r0, r3
 8005954:	3714      	adds	r7, #20
 8005956:	46bd      	mov	sp, r7
 8005958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800595c:	4770      	bx	lr
 800595e:	bf00      	nop
 8005960:	00030d40 	.word	0x00030d40

08005964 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8005964:	b480      	push	{r7}
 8005966:	b085      	sub	sp, #20
 8005968:	af00      	add	r7, sp, #0
 800596a:	6078      	str	r0, [r7, #4]
 800596c:	460b      	mov	r3, r1
 800596e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800597a:	681a      	ldr	r2, [r3, #0]
 800597c:	78fb      	ldrb	r3, [r7, #3]
 800597e:	68f9      	ldr	r1, [r7, #12]
 8005980:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005984:	4313      	orrs	r3, r2
 8005986:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8005988:	2300      	movs	r3, #0
}
 800598a:	4618      	mov	r0, r3
 800598c:	3714      	adds	r7, #20
 800598e:	46bd      	mov	sp, r7
 8005990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005994:	4770      	bx	lr

08005996 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8005996:	b480      	push	{r7}
 8005998:	b087      	sub	sp, #28
 800599a:	af00      	add	r7, sp, #0
 800599c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80059a2:	693b      	ldr	r3, [r7, #16]
 80059a4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80059a8:	689b      	ldr	r3, [r3, #8]
 80059aa:	f003 0306 	and.w	r3, r3, #6
 80059ae:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d102      	bne.n	80059bc <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 80059b6:	2300      	movs	r3, #0
 80059b8:	75fb      	strb	r3, [r7, #23]
 80059ba:	e00a      	b.n	80059d2 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	2b02      	cmp	r3, #2
 80059c0:	d002      	beq.n	80059c8 <USB_GetDevSpeed+0x32>
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	2b06      	cmp	r3, #6
 80059c6:	d102      	bne.n	80059ce <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80059c8:	2302      	movs	r3, #2
 80059ca:	75fb      	strb	r3, [r7, #23]
 80059cc:	e001      	b.n	80059d2 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 80059ce:	230f      	movs	r3, #15
 80059d0:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 80059d2:	7dfb      	ldrb	r3, [r7, #23]
}
 80059d4:	4618      	mov	r0, r3
 80059d6:	371c      	adds	r7, #28
 80059d8:	46bd      	mov	sp, r7
 80059da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059de:	4770      	bx	lr

080059e0 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80059e0:	b480      	push	{r7}
 80059e2:	b085      	sub	sp, #20
 80059e4:	af00      	add	r7, sp, #0
 80059e6:	6078      	str	r0, [r7, #4]
 80059e8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80059ee:	683b      	ldr	r3, [r7, #0]
 80059f0:	781b      	ldrb	r3, [r3, #0]
 80059f2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80059f4:	683b      	ldr	r3, [r7, #0]
 80059f6:	785b      	ldrb	r3, [r3, #1]
 80059f8:	2b01      	cmp	r3, #1
 80059fa:	d139      	bne.n	8005a70 <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a02:	69da      	ldr	r2, [r3, #28]
 8005a04:	683b      	ldr	r3, [r7, #0]
 8005a06:	781b      	ldrb	r3, [r3, #0]
 8005a08:	f003 030f 	and.w	r3, r3, #15
 8005a0c:	2101      	movs	r1, #1
 8005a0e:	fa01 f303 	lsl.w	r3, r1, r3
 8005a12:	b29b      	uxth	r3, r3
 8005a14:	68f9      	ldr	r1, [r7, #12]
 8005a16:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005a1a:	4313      	orrs	r3, r2
 8005a1c:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8005a1e:	68bb      	ldr	r3, [r7, #8]
 8005a20:	015a      	lsls	r2, r3, #5
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	4413      	add	r3, r2
 8005a26:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	d153      	bne.n	8005adc <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005a34:	68bb      	ldr	r3, [r7, #8]
 8005a36:	015a      	lsls	r2, r3, #5
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	4413      	add	r3, r2
 8005a3c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a40:	681a      	ldr	r2, [r3, #0]
 8005a42:	683b      	ldr	r3, [r7, #0]
 8005a44:	689b      	ldr	r3, [r3, #8]
 8005a46:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8005a4a:	683b      	ldr	r3, [r7, #0]
 8005a4c:	78db      	ldrb	r3, [r3, #3]
 8005a4e:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005a50:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8005a52:	68bb      	ldr	r3, [r7, #8]
 8005a54:	059b      	lsls	r3, r3, #22
 8005a56:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005a58:	431a      	orrs	r2, r3
 8005a5a:	68bb      	ldr	r3, [r7, #8]
 8005a5c:	0159      	lsls	r1, r3, #5
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	440b      	add	r3, r1
 8005a62:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a66:	4619      	mov	r1, r3
 8005a68:	4b20      	ldr	r3, [pc, #128]	; (8005aec <USB_ActivateEndpoint+0x10c>)
 8005a6a:	4313      	orrs	r3, r2
 8005a6c:	600b      	str	r3, [r1, #0]
 8005a6e:	e035      	b.n	8005adc <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a76:	69da      	ldr	r2, [r3, #28]
 8005a78:	683b      	ldr	r3, [r7, #0]
 8005a7a:	781b      	ldrb	r3, [r3, #0]
 8005a7c:	f003 030f 	and.w	r3, r3, #15
 8005a80:	2101      	movs	r1, #1
 8005a82:	fa01 f303 	lsl.w	r3, r1, r3
 8005a86:	041b      	lsls	r3, r3, #16
 8005a88:	68f9      	ldr	r1, [r7, #12]
 8005a8a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005a8e:	4313      	orrs	r3, r2
 8005a90:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8005a92:	68bb      	ldr	r3, [r7, #8]
 8005a94:	015a      	lsls	r2, r3, #5
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	4413      	add	r3, r2
 8005a9a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	d119      	bne.n	8005adc <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8005aa8:	68bb      	ldr	r3, [r7, #8]
 8005aaa:	015a      	lsls	r2, r3, #5
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	4413      	add	r3, r2
 8005ab0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ab4:	681a      	ldr	r2, [r3, #0]
 8005ab6:	683b      	ldr	r3, [r7, #0]
 8005ab8:	689b      	ldr	r3, [r3, #8]
 8005aba:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8005abe:	683b      	ldr	r3, [r7, #0]
 8005ac0:	78db      	ldrb	r3, [r3, #3]
 8005ac2:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8005ac4:	430b      	orrs	r3, r1
 8005ac6:	431a      	orrs	r2, r3
 8005ac8:	68bb      	ldr	r3, [r7, #8]
 8005aca:	0159      	lsls	r1, r3, #5
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	440b      	add	r3, r1
 8005ad0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ad4:	4619      	mov	r1, r3
 8005ad6:	4b05      	ldr	r3, [pc, #20]	; (8005aec <USB_ActivateEndpoint+0x10c>)
 8005ad8:	4313      	orrs	r3, r2
 8005ada:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8005adc:	2300      	movs	r3, #0
}
 8005ade:	4618      	mov	r0, r3
 8005ae0:	3714      	adds	r7, #20
 8005ae2:	46bd      	mov	sp, r7
 8005ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ae8:	4770      	bx	lr
 8005aea:	bf00      	nop
 8005aec:	10008000 	.word	0x10008000

08005af0 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005af0:	b480      	push	{r7}
 8005af2:	b085      	sub	sp, #20
 8005af4:	af00      	add	r7, sp, #0
 8005af6:	6078      	str	r0, [r7, #4]
 8005af8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005afe:	683b      	ldr	r3, [r7, #0]
 8005b00:	781b      	ldrb	r3, [r3, #0]
 8005b02:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8005b04:	683b      	ldr	r3, [r7, #0]
 8005b06:	785b      	ldrb	r3, [r3, #1]
 8005b08:	2b01      	cmp	r3, #1
 8005b0a:	d161      	bne.n	8005bd0 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005b0c:	68bb      	ldr	r3, [r7, #8]
 8005b0e:	015a      	lsls	r2, r3, #5
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	4413      	add	r3, r2
 8005b14:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005b1e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005b22:	d11f      	bne.n	8005b64 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8005b24:	68bb      	ldr	r3, [r7, #8]
 8005b26:	015a      	lsls	r2, r3, #5
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	4413      	add	r3, r2
 8005b2c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	68ba      	ldr	r2, [r7, #8]
 8005b34:	0151      	lsls	r1, r2, #5
 8005b36:	68fa      	ldr	r2, [r7, #12]
 8005b38:	440a      	add	r2, r1
 8005b3a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005b3e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005b42:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8005b44:	68bb      	ldr	r3, [r7, #8]
 8005b46:	015a      	lsls	r2, r3, #5
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	4413      	add	r3, r2
 8005b4c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	68ba      	ldr	r2, [r7, #8]
 8005b54:	0151      	lsls	r1, r2, #5
 8005b56:	68fa      	ldr	r2, [r7, #12]
 8005b58:	440a      	add	r2, r1
 8005b5a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005b5e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005b62:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005b6a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005b6c:	683b      	ldr	r3, [r7, #0]
 8005b6e:	781b      	ldrb	r3, [r3, #0]
 8005b70:	f003 030f 	and.w	r3, r3, #15
 8005b74:	2101      	movs	r1, #1
 8005b76:	fa01 f303 	lsl.w	r3, r1, r3
 8005b7a:	b29b      	uxth	r3, r3
 8005b7c:	43db      	mvns	r3, r3
 8005b7e:	68f9      	ldr	r1, [r7, #12]
 8005b80:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005b84:	4013      	ands	r3, r2
 8005b86:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005b8e:	69da      	ldr	r2, [r3, #28]
 8005b90:	683b      	ldr	r3, [r7, #0]
 8005b92:	781b      	ldrb	r3, [r3, #0]
 8005b94:	f003 030f 	and.w	r3, r3, #15
 8005b98:	2101      	movs	r1, #1
 8005b9a:	fa01 f303 	lsl.w	r3, r1, r3
 8005b9e:	b29b      	uxth	r3, r3
 8005ba0:	43db      	mvns	r3, r3
 8005ba2:	68f9      	ldr	r1, [r7, #12]
 8005ba4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005ba8:	4013      	ands	r3, r2
 8005baa:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8005bac:	68bb      	ldr	r3, [r7, #8]
 8005bae:	015a      	lsls	r2, r3, #5
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	4413      	add	r3, r2
 8005bb4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005bb8:	681a      	ldr	r2, [r3, #0]
 8005bba:	68bb      	ldr	r3, [r7, #8]
 8005bbc:	0159      	lsls	r1, r3, #5
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	440b      	add	r3, r1
 8005bc2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005bc6:	4619      	mov	r1, r3
 8005bc8:	4b35      	ldr	r3, [pc, #212]	; (8005ca0 <USB_DeactivateEndpoint+0x1b0>)
 8005bca:	4013      	ands	r3, r2
 8005bcc:	600b      	str	r3, [r1, #0]
 8005bce:	e060      	b.n	8005c92 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005bd0:	68bb      	ldr	r3, [r7, #8]
 8005bd2:	015a      	lsls	r2, r3, #5
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	4413      	add	r3, r2
 8005bd8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005be2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005be6:	d11f      	bne.n	8005c28 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8005be8:	68bb      	ldr	r3, [r7, #8]
 8005bea:	015a      	lsls	r2, r3, #5
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	4413      	add	r3, r2
 8005bf0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	68ba      	ldr	r2, [r7, #8]
 8005bf8:	0151      	lsls	r1, r2, #5
 8005bfa:	68fa      	ldr	r2, [r7, #12]
 8005bfc:	440a      	add	r2, r1
 8005bfe:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005c02:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005c06:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8005c08:	68bb      	ldr	r3, [r7, #8]
 8005c0a:	015a      	lsls	r2, r3, #5
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	4413      	add	r3, r2
 8005c10:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	68ba      	ldr	r2, [r7, #8]
 8005c18:	0151      	lsls	r1, r2, #5
 8005c1a:	68fa      	ldr	r2, [r7, #12]
 8005c1c:	440a      	add	r2, r1
 8005c1e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005c22:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005c26:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c2e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005c30:	683b      	ldr	r3, [r7, #0]
 8005c32:	781b      	ldrb	r3, [r3, #0]
 8005c34:	f003 030f 	and.w	r3, r3, #15
 8005c38:	2101      	movs	r1, #1
 8005c3a:	fa01 f303 	lsl.w	r3, r1, r3
 8005c3e:	041b      	lsls	r3, r3, #16
 8005c40:	43db      	mvns	r3, r3
 8005c42:	68f9      	ldr	r1, [r7, #12]
 8005c44:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005c48:	4013      	ands	r3, r2
 8005c4a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c52:	69da      	ldr	r2, [r3, #28]
 8005c54:	683b      	ldr	r3, [r7, #0]
 8005c56:	781b      	ldrb	r3, [r3, #0]
 8005c58:	f003 030f 	and.w	r3, r3, #15
 8005c5c:	2101      	movs	r1, #1
 8005c5e:	fa01 f303 	lsl.w	r3, r1, r3
 8005c62:	041b      	lsls	r3, r3, #16
 8005c64:	43db      	mvns	r3, r3
 8005c66:	68f9      	ldr	r1, [r7, #12]
 8005c68:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005c6c:	4013      	ands	r3, r2
 8005c6e:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8005c70:	68bb      	ldr	r3, [r7, #8]
 8005c72:	015a      	lsls	r2, r3, #5
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	4413      	add	r3, r2
 8005c78:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c7c:	681a      	ldr	r2, [r3, #0]
 8005c7e:	68bb      	ldr	r3, [r7, #8]
 8005c80:	0159      	lsls	r1, r3, #5
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	440b      	add	r3, r1
 8005c86:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c8a:	4619      	mov	r1, r3
 8005c8c:	4b05      	ldr	r3, [pc, #20]	; (8005ca4 <USB_DeactivateEndpoint+0x1b4>)
 8005c8e:	4013      	ands	r3, r2
 8005c90:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8005c92:	2300      	movs	r3, #0
}
 8005c94:	4618      	mov	r0, r3
 8005c96:	3714      	adds	r7, #20
 8005c98:	46bd      	mov	sp, r7
 8005c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c9e:	4770      	bx	lr
 8005ca0:	ec337800 	.word	0xec337800
 8005ca4:	eff37800 	.word	0xeff37800

08005ca8 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8005ca8:	b580      	push	{r7, lr}
 8005caa:	b08a      	sub	sp, #40	; 0x28
 8005cac:	af02      	add	r7, sp, #8
 8005cae:	60f8      	str	r0, [r7, #12]
 8005cb0:	60b9      	str	r1, [r7, #8]
 8005cb2:	4613      	mov	r3, r2
 8005cb4:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8005cba:	68bb      	ldr	r3, [r7, #8]
 8005cbc:	781b      	ldrb	r3, [r3, #0]
 8005cbe:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005cc0:	68bb      	ldr	r3, [r7, #8]
 8005cc2:	785b      	ldrb	r3, [r3, #1]
 8005cc4:	2b01      	cmp	r3, #1
 8005cc6:	f040 8163 	bne.w	8005f90 <USB_EPStartXfer+0x2e8>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8005cca:	68bb      	ldr	r3, [r7, #8]
 8005ccc:	695b      	ldr	r3, [r3, #20]
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d132      	bne.n	8005d38 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005cd2:	69bb      	ldr	r3, [r7, #24]
 8005cd4:	015a      	lsls	r2, r3, #5
 8005cd6:	69fb      	ldr	r3, [r7, #28]
 8005cd8:	4413      	add	r3, r2
 8005cda:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005cde:	691a      	ldr	r2, [r3, #16]
 8005ce0:	69bb      	ldr	r3, [r7, #24]
 8005ce2:	0159      	lsls	r1, r3, #5
 8005ce4:	69fb      	ldr	r3, [r7, #28]
 8005ce6:	440b      	add	r3, r1
 8005ce8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005cec:	4619      	mov	r1, r3
 8005cee:	4ba5      	ldr	r3, [pc, #660]	; (8005f84 <USB_EPStartXfer+0x2dc>)
 8005cf0:	4013      	ands	r3, r2
 8005cf2:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005cf4:	69bb      	ldr	r3, [r7, #24]
 8005cf6:	015a      	lsls	r2, r3, #5
 8005cf8:	69fb      	ldr	r3, [r7, #28]
 8005cfa:	4413      	add	r3, r2
 8005cfc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d00:	691b      	ldr	r3, [r3, #16]
 8005d02:	69ba      	ldr	r2, [r7, #24]
 8005d04:	0151      	lsls	r1, r2, #5
 8005d06:	69fa      	ldr	r2, [r7, #28]
 8005d08:	440a      	add	r2, r1
 8005d0a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005d0e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005d12:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005d14:	69bb      	ldr	r3, [r7, #24]
 8005d16:	015a      	lsls	r2, r3, #5
 8005d18:	69fb      	ldr	r3, [r7, #28]
 8005d1a:	4413      	add	r3, r2
 8005d1c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d20:	691a      	ldr	r2, [r3, #16]
 8005d22:	69bb      	ldr	r3, [r7, #24]
 8005d24:	0159      	lsls	r1, r3, #5
 8005d26:	69fb      	ldr	r3, [r7, #28]
 8005d28:	440b      	add	r3, r1
 8005d2a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d2e:	4619      	mov	r1, r3
 8005d30:	4b95      	ldr	r3, [pc, #596]	; (8005f88 <USB_EPStartXfer+0x2e0>)
 8005d32:	4013      	ands	r3, r2
 8005d34:	610b      	str	r3, [r1, #16]
 8005d36:	e074      	b.n	8005e22 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005d38:	69bb      	ldr	r3, [r7, #24]
 8005d3a:	015a      	lsls	r2, r3, #5
 8005d3c:	69fb      	ldr	r3, [r7, #28]
 8005d3e:	4413      	add	r3, r2
 8005d40:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d44:	691a      	ldr	r2, [r3, #16]
 8005d46:	69bb      	ldr	r3, [r7, #24]
 8005d48:	0159      	lsls	r1, r3, #5
 8005d4a:	69fb      	ldr	r3, [r7, #28]
 8005d4c:	440b      	add	r3, r1
 8005d4e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d52:	4619      	mov	r1, r3
 8005d54:	4b8c      	ldr	r3, [pc, #560]	; (8005f88 <USB_EPStartXfer+0x2e0>)
 8005d56:	4013      	ands	r3, r2
 8005d58:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005d5a:	69bb      	ldr	r3, [r7, #24]
 8005d5c:	015a      	lsls	r2, r3, #5
 8005d5e:	69fb      	ldr	r3, [r7, #28]
 8005d60:	4413      	add	r3, r2
 8005d62:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d66:	691a      	ldr	r2, [r3, #16]
 8005d68:	69bb      	ldr	r3, [r7, #24]
 8005d6a:	0159      	lsls	r1, r3, #5
 8005d6c:	69fb      	ldr	r3, [r7, #28]
 8005d6e:	440b      	add	r3, r1
 8005d70:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d74:	4619      	mov	r1, r3
 8005d76:	4b83      	ldr	r3, [pc, #524]	; (8005f84 <USB_EPStartXfer+0x2dc>)
 8005d78:	4013      	ands	r3, r2
 8005d7a:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8005d7c:	69bb      	ldr	r3, [r7, #24]
 8005d7e:	015a      	lsls	r2, r3, #5
 8005d80:	69fb      	ldr	r3, [r7, #28]
 8005d82:	4413      	add	r3, r2
 8005d84:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d88:	691a      	ldr	r2, [r3, #16]
 8005d8a:	68bb      	ldr	r3, [r7, #8]
 8005d8c:	6959      	ldr	r1, [r3, #20]
 8005d8e:	68bb      	ldr	r3, [r7, #8]
 8005d90:	689b      	ldr	r3, [r3, #8]
 8005d92:	440b      	add	r3, r1
 8005d94:	1e59      	subs	r1, r3, #1
 8005d96:	68bb      	ldr	r3, [r7, #8]
 8005d98:	689b      	ldr	r3, [r3, #8]
 8005d9a:	fbb1 f3f3 	udiv	r3, r1, r3
 8005d9e:	04d9      	lsls	r1, r3, #19
 8005da0:	4b7a      	ldr	r3, [pc, #488]	; (8005f8c <USB_EPStartXfer+0x2e4>)
 8005da2:	400b      	ands	r3, r1
 8005da4:	69b9      	ldr	r1, [r7, #24]
 8005da6:	0148      	lsls	r0, r1, #5
 8005da8:	69f9      	ldr	r1, [r7, #28]
 8005daa:	4401      	add	r1, r0
 8005dac:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005db0:	4313      	orrs	r3, r2
 8005db2:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8005db4:	69bb      	ldr	r3, [r7, #24]
 8005db6:	015a      	lsls	r2, r3, #5
 8005db8:	69fb      	ldr	r3, [r7, #28]
 8005dba:	4413      	add	r3, r2
 8005dbc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005dc0:	691a      	ldr	r2, [r3, #16]
 8005dc2:	68bb      	ldr	r3, [r7, #8]
 8005dc4:	695b      	ldr	r3, [r3, #20]
 8005dc6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005dca:	69b9      	ldr	r1, [r7, #24]
 8005dcc:	0148      	lsls	r0, r1, #5
 8005dce:	69f9      	ldr	r1, [r7, #28]
 8005dd0:	4401      	add	r1, r0
 8005dd2:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005dd6:	4313      	orrs	r3, r2
 8005dd8:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8005dda:	68bb      	ldr	r3, [r7, #8]
 8005ddc:	78db      	ldrb	r3, [r3, #3]
 8005dde:	2b01      	cmp	r3, #1
 8005de0:	d11f      	bne.n	8005e22 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8005de2:	69bb      	ldr	r3, [r7, #24]
 8005de4:	015a      	lsls	r2, r3, #5
 8005de6:	69fb      	ldr	r3, [r7, #28]
 8005de8:	4413      	add	r3, r2
 8005dea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005dee:	691b      	ldr	r3, [r3, #16]
 8005df0:	69ba      	ldr	r2, [r7, #24]
 8005df2:	0151      	lsls	r1, r2, #5
 8005df4:	69fa      	ldr	r2, [r7, #28]
 8005df6:	440a      	add	r2, r1
 8005df8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005dfc:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8005e00:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8005e02:	69bb      	ldr	r3, [r7, #24]
 8005e04:	015a      	lsls	r2, r3, #5
 8005e06:	69fb      	ldr	r3, [r7, #28]
 8005e08:	4413      	add	r3, r2
 8005e0a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e0e:	691b      	ldr	r3, [r3, #16]
 8005e10:	69ba      	ldr	r2, [r7, #24]
 8005e12:	0151      	lsls	r1, r2, #5
 8005e14:	69fa      	ldr	r2, [r7, #28]
 8005e16:	440a      	add	r2, r1
 8005e18:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005e1c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005e20:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8005e22:	79fb      	ldrb	r3, [r7, #7]
 8005e24:	2b01      	cmp	r3, #1
 8005e26:	d14b      	bne.n	8005ec0 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8005e28:	68bb      	ldr	r3, [r7, #8]
 8005e2a:	691b      	ldr	r3, [r3, #16]
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	d009      	beq.n	8005e44 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8005e30:	69bb      	ldr	r3, [r7, #24]
 8005e32:	015a      	lsls	r2, r3, #5
 8005e34:	69fb      	ldr	r3, [r7, #28]
 8005e36:	4413      	add	r3, r2
 8005e38:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e3c:	461a      	mov	r2, r3
 8005e3e:	68bb      	ldr	r3, [r7, #8]
 8005e40:	691b      	ldr	r3, [r3, #16]
 8005e42:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8005e44:	68bb      	ldr	r3, [r7, #8]
 8005e46:	78db      	ldrb	r3, [r3, #3]
 8005e48:	2b01      	cmp	r3, #1
 8005e4a:	d128      	bne.n	8005e9e <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005e4c:	69fb      	ldr	r3, [r7, #28]
 8005e4e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005e52:	689b      	ldr	r3, [r3, #8]
 8005e54:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e58:	2b00      	cmp	r3, #0
 8005e5a:	d110      	bne.n	8005e7e <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005e5c:	69bb      	ldr	r3, [r7, #24]
 8005e5e:	015a      	lsls	r2, r3, #5
 8005e60:	69fb      	ldr	r3, [r7, #28]
 8005e62:	4413      	add	r3, r2
 8005e64:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	69ba      	ldr	r2, [r7, #24]
 8005e6c:	0151      	lsls	r1, r2, #5
 8005e6e:	69fa      	ldr	r2, [r7, #28]
 8005e70:	440a      	add	r2, r1
 8005e72:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005e76:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005e7a:	6013      	str	r3, [r2, #0]
 8005e7c:	e00f      	b.n	8005e9e <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8005e7e:	69bb      	ldr	r3, [r7, #24]
 8005e80:	015a      	lsls	r2, r3, #5
 8005e82:	69fb      	ldr	r3, [r7, #28]
 8005e84:	4413      	add	r3, r2
 8005e86:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	69ba      	ldr	r2, [r7, #24]
 8005e8e:	0151      	lsls	r1, r2, #5
 8005e90:	69fa      	ldr	r2, [r7, #28]
 8005e92:	440a      	add	r2, r1
 8005e94:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005e98:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005e9c:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005e9e:	69bb      	ldr	r3, [r7, #24]
 8005ea0:	015a      	lsls	r2, r3, #5
 8005ea2:	69fb      	ldr	r3, [r7, #28]
 8005ea4:	4413      	add	r3, r2
 8005ea6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	69ba      	ldr	r2, [r7, #24]
 8005eae:	0151      	lsls	r1, r2, #5
 8005eb0:	69fa      	ldr	r2, [r7, #28]
 8005eb2:	440a      	add	r2, r1
 8005eb4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005eb8:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005ebc:	6013      	str	r3, [r2, #0]
 8005ebe:	e133      	b.n	8006128 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005ec0:	69bb      	ldr	r3, [r7, #24]
 8005ec2:	015a      	lsls	r2, r3, #5
 8005ec4:	69fb      	ldr	r3, [r7, #28]
 8005ec6:	4413      	add	r3, r2
 8005ec8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	69ba      	ldr	r2, [r7, #24]
 8005ed0:	0151      	lsls	r1, r2, #5
 8005ed2:	69fa      	ldr	r2, [r7, #28]
 8005ed4:	440a      	add	r2, r1
 8005ed6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005eda:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005ede:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005ee0:	68bb      	ldr	r3, [r7, #8]
 8005ee2:	78db      	ldrb	r3, [r3, #3]
 8005ee4:	2b01      	cmp	r3, #1
 8005ee6:	d015      	beq.n	8005f14 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8005ee8:	68bb      	ldr	r3, [r7, #8]
 8005eea:	695b      	ldr	r3, [r3, #20]
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	f000 811b 	beq.w	8006128 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8005ef2:	69fb      	ldr	r3, [r7, #28]
 8005ef4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005ef8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005efa:	68bb      	ldr	r3, [r7, #8]
 8005efc:	781b      	ldrb	r3, [r3, #0]
 8005efe:	f003 030f 	and.w	r3, r3, #15
 8005f02:	2101      	movs	r1, #1
 8005f04:	fa01 f303 	lsl.w	r3, r1, r3
 8005f08:	69f9      	ldr	r1, [r7, #28]
 8005f0a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005f0e:	4313      	orrs	r3, r2
 8005f10:	634b      	str	r3, [r1, #52]	; 0x34
 8005f12:	e109      	b.n	8006128 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005f14:	69fb      	ldr	r3, [r7, #28]
 8005f16:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005f1a:	689b      	ldr	r3, [r3, #8]
 8005f1c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	d110      	bne.n	8005f46 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005f24:	69bb      	ldr	r3, [r7, #24]
 8005f26:	015a      	lsls	r2, r3, #5
 8005f28:	69fb      	ldr	r3, [r7, #28]
 8005f2a:	4413      	add	r3, r2
 8005f2c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	69ba      	ldr	r2, [r7, #24]
 8005f34:	0151      	lsls	r1, r2, #5
 8005f36:	69fa      	ldr	r2, [r7, #28]
 8005f38:	440a      	add	r2, r1
 8005f3a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005f3e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005f42:	6013      	str	r3, [r2, #0]
 8005f44:	e00f      	b.n	8005f66 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8005f46:	69bb      	ldr	r3, [r7, #24]
 8005f48:	015a      	lsls	r2, r3, #5
 8005f4a:	69fb      	ldr	r3, [r7, #28]
 8005f4c:	4413      	add	r3, r2
 8005f4e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	69ba      	ldr	r2, [r7, #24]
 8005f56:	0151      	lsls	r1, r2, #5
 8005f58:	69fa      	ldr	r2, [r7, #28]
 8005f5a:	440a      	add	r2, r1
 8005f5c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005f60:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005f64:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8005f66:	68bb      	ldr	r3, [r7, #8]
 8005f68:	68d9      	ldr	r1, [r3, #12]
 8005f6a:	68bb      	ldr	r3, [r7, #8]
 8005f6c:	781a      	ldrb	r2, [r3, #0]
 8005f6e:	68bb      	ldr	r3, [r7, #8]
 8005f70:	695b      	ldr	r3, [r3, #20]
 8005f72:	b298      	uxth	r0, r3
 8005f74:	79fb      	ldrb	r3, [r7, #7]
 8005f76:	9300      	str	r3, [sp, #0]
 8005f78:	4603      	mov	r3, r0
 8005f7a:	68f8      	ldr	r0, [r7, #12]
 8005f7c:	f000 fa38 	bl	80063f0 <USB_WritePacket>
 8005f80:	e0d2      	b.n	8006128 <USB_EPStartXfer+0x480>
 8005f82:	bf00      	nop
 8005f84:	e007ffff 	.word	0xe007ffff
 8005f88:	fff80000 	.word	0xfff80000
 8005f8c:	1ff80000 	.word	0x1ff80000
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8005f90:	69bb      	ldr	r3, [r7, #24]
 8005f92:	015a      	lsls	r2, r3, #5
 8005f94:	69fb      	ldr	r3, [r7, #28]
 8005f96:	4413      	add	r3, r2
 8005f98:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f9c:	691a      	ldr	r2, [r3, #16]
 8005f9e:	69bb      	ldr	r3, [r7, #24]
 8005fa0:	0159      	lsls	r1, r3, #5
 8005fa2:	69fb      	ldr	r3, [r7, #28]
 8005fa4:	440b      	add	r3, r1
 8005fa6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005faa:	4619      	mov	r1, r3
 8005fac:	4b61      	ldr	r3, [pc, #388]	; (8006134 <USB_EPStartXfer+0x48c>)
 8005fae:	4013      	ands	r3, r2
 8005fb0:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8005fb2:	69bb      	ldr	r3, [r7, #24]
 8005fb4:	015a      	lsls	r2, r3, #5
 8005fb6:	69fb      	ldr	r3, [r7, #28]
 8005fb8:	4413      	add	r3, r2
 8005fba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005fbe:	691a      	ldr	r2, [r3, #16]
 8005fc0:	69bb      	ldr	r3, [r7, #24]
 8005fc2:	0159      	lsls	r1, r3, #5
 8005fc4:	69fb      	ldr	r3, [r7, #28]
 8005fc6:	440b      	add	r3, r1
 8005fc8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005fcc:	4619      	mov	r1, r3
 8005fce:	4b5a      	ldr	r3, [pc, #360]	; (8006138 <USB_EPStartXfer+0x490>)
 8005fd0:	4013      	ands	r3, r2
 8005fd2:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len == 0U)
 8005fd4:	68bb      	ldr	r3, [r7, #8]
 8005fd6:	695b      	ldr	r3, [r3, #20]
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	d123      	bne.n	8006024 <USB_EPStartXfer+0x37c>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8005fdc:	69bb      	ldr	r3, [r7, #24]
 8005fde:	015a      	lsls	r2, r3, #5
 8005fe0:	69fb      	ldr	r3, [r7, #28]
 8005fe2:	4413      	add	r3, r2
 8005fe4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005fe8:	691a      	ldr	r2, [r3, #16]
 8005fea:	68bb      	ldr	r3, [r7, #8]
 8005fec:	689b      	ldr	r3, [r3, #8]
 8005fee:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005ff2:	69b9      	ldr	r1, [r7, #24]
 8005ff4:	0148      	lsls	r0, r1, #5
 8005ff6:	69f9      	ldr	r1, [r7, #28]
 8005ff8:	4401      	add	r1, r0
 8005ffa:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005ffe:	4313      	orrs	r3, r2
 8006000:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006002:	69bb      	ldr	r3, [r7, #24]
 8006004:	015a      	lsls	r2, r3, #5
 8006006:	69fb      	ldr	r3, [r7, #28]
 8006008:	4413      	add	r3, r2
 800600a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800600e:	691b      	ldr	r3, [r3, #16]
 8006010:	69ba      	ldr	r2, [r7, #24]
 8006012:	0151      	lsls	r1, r2, #5
 8006014:	69fa      	ldr	r2, [r7, #28]
 8006016:	440a      	add	r2, r1
 8006018:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800601c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006020:	6113      	str	r3, [r2, #16]
 8006022:	e033      	b.n	800608c <USB_EPStartXfer+0x3e4>
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8006024:	68bb      	ldr	r3, [r7, #8]
 8006026:	695a      	ldr	r2, [r3, #20]
 8006028:	68bb      	ldr	r3, [r7, #8]
 800602a:	689b      	ldr	r3, [r3, #8]
 800602c:	4413      	add	r3, r2
 800602e:	1e5a      	subs	r2, r3, #1
 8006030:	68bb      	ldr	r3, [r7, #8]
 8006032:	689b      	ldr	r3, [r3, #8]
 8006034:	fbb2 f3f3 	udiv	r3, r2, r3
 8006038:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800603a:	69bb      	ldr	r3, [r7, #24]
 800603c:	015a      	lsls	r2, r3, #5
 800603e:	69fb      	ldr	r3, [r7, #28]
 8006040:	4413      	add	r3, r2
 8006042:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006046:	691a      	ldr	r2, [r3, #16]
 8006048:	8afb      	ldrh	r3, [r7, #22]
 800604a:	04d9      	lsls	r1, r3, #19
 800604c:	4b3b      	ldr	r3, [pc, #236]	; (800613c <USB_EPStartXfer+0x494>)
 800604e:	400b      	ands	r3, r1
 8006050:	69b9      	ldr	r1, [r7, #24]
 8006052:	0148      	lsls	r0, r1, #5
 8006054:	69f9      	ldr	r1, [r7, #28]
 8006056:	4401      	add	r1, r0
 8006058:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800605c:	4313      	orrs	r3, r2
 800605e:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8006060:	69bb      	ldr	r3, [r7, #24]
 8006062:	015a      	lsls	r2, r3, #5
 8006064:	69fb      	ldr	r3, [r7, #28]
 8006066:	4413      	add	r3, r2
 8006068:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800606c:	691a      	ldr	r2, [r3, #16]
 800606e:	68bb      	ldr	r3, [r7, #8]
 8006070:	689b      	ldr	r3, [r3, #8]
 8006072:	8af9      	ldrh	r1, [r7, #22]
 8006074:	fb01 f303 	mul.w	r3, r1, r3
 8006078:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800607c:	69b9      	ldr	r1, [r7, #24]
 800607e:	0148      	lsls	r0, r1, #5
 8006080:	69f9      	ldr	r1, [r7, #28]
 8006082:	4401      	add	r1, r0
 8006084:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006088:	4313      	orrs	r3, r2
 800608a:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800608c:	79fb      	ldrb	r3, [r7, #7]
 800608e:	2b01      	cmp	r3, #1
 8006090:	d10d      	bne.n	80060ae <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8006092:	68bb      	ldr	r3, [r7, #8]
 8006094:	68db      	ldr	r3, [r3, #12]
 8006096:	2b00      	cmp	r3, #0
 8006098:	d009      	beq.n	80060ae <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800609a:	68bb      	ldr	r3, [r7, #8]
 800609c:	68d9      	ldr	r1, [r3, #12]
 800609e:	69bb      	ldr	r3, [r7, #24]
 80060a0:	015a      	lsls	r2, r3, #5
 80060a2:	69fb      	ldr	r3, [r7, #28]
 80060a4:	4413      	add	r3, r2
 80060a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80060aa:	460a      	mov	r2, r1
 80060ac:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 80060ae:	68bb      	ldr	r3, [r7, #8]
 80060b0:	78db      	ldrb	r3, [r3, #3]
 80060b2:	2b01      	cmp	r3, #1
 80060b4:	d128      	bne.n	8006108 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80060b6:	69fb      	ldr	r3, [r7, #28]
 80060b8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80060bc:	689b      	ldr	r3, [r3, #8]
 80060be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d110      	bne.n	80060e8 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80060c6:	69bb      	ldr	r3, [r7, #24]
 80060c8:	015a      	lsls	r2, r3, #5
 80060ca:	69fb      	ldr	r3, [r7, #28]
 80060cc:	4413      	add	r3, r2
 80060ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	69ba      	ldr	r2, [r7, #24]
 80060d6:	0151      	lsls	r1, r2, #5
 80060d8:	69fa      	ldr	r2, [r7, #28]
 80060da:	440a      	add	r2, r1
 80060dc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80060e0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80060e4:	6013      	str	r3, [r2, #0]
 80060e6:	e00f      	b.n	8006108 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80060e8:	69bb      	ldr	r3, [r7, #24]
 80060ea:	015a      	lsls	r2, r3, #5
 80060ec:	69fb      	ldr	r3, [r7, #28]
 80060ee:	4413      	add	r3, r2
 80060f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	69ba      	ldr	r2, [r7, #24]
 80060f8:	0151      	lsls	r1, r2, #5
 80060fa:	69fa      	ldr	r2, [r7, #28]
 80060fc:	440a      	add	r2, r1
 80060fe:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006102:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006106:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8006108:	69bb      	ldr	r3, [r7, #24]
 800610a:	015a      	lsls	r2, r3, #5
 800610c:	69fb      	ldr	r3, [r7, #28]
 800610e:	4413      	add	r3, r2
 8006110:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	69ba      	ldr	r2, [r7, #24]
 8006118:	0151      	lsls	r1, r2, #5
 800611a:	69fa      	ldr	r2, [r7, #28]
 800611c:	440a      	add	r2, r1
 800611e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006122:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006126:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006128:	2300      	movs	r3, #0
}
 800612a:	4618      	mov	r0, r3
 800612c:	3720      	adds	r7, #32
 800612e:	46bd      	mov	sp, r7
 8006130:	bd80      	pop	{r7, pc}
 8006132:	bf00      	nop
 8006134:	fff80000 	.word	0xfff80000
 8006138:	e007ffff 	.word	0xe007ffff
 800613c:	1ff80000 	.word	0x1ff80000

08006140 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8006140:	b480      	push	{r7}
 8006142:	b087      	sub	sp, #28
 8006144:	af00      	add	r7, sp, #0
 8006146:	60f8      	str	r0, [r7, #12]
 8006148:	60b9      	str	r1, [r7, #8]
 800614a:	4613      	mov	r3, r2
 800614c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8006152:	68bb      	ldr	r3, [r7, #8]
 8006154:	781b      	ldrb	r3, [r3, #0]
 8006156:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006158:	68bb      	ldr	r3, [r7, #8]
 800615a:	785b      	ldrb	r3, [r3, #1]
 800615c:	2b01      	cmp	r3, #1
 800615e:	f040 80cd 	bne.w	80062fc <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8006162:	68bb      	ldr	r3, [r7, #8]
 8006164:	695b      	ldr	r3, [r3, #20]
 8006166:	2b00      	cmp	r3, #0
 8006168:	d132      	bne.n	80061d0 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800616a:	693b      	ldr	r3, [r7, #16]
 800616c:	015a      	lsls	r2, r3, #5
 800616e:	697b      	ldr	r3, [r7, #20]
 8006170:	4413      	add	r3, r2
 8006172:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006176:	691a      	ldr	r2, [r3, #16]
 8006178:	693b      	ldr	r3, [r7, #16]
 800617a:	0159      	lsls	r1, r3, #5
 800617c:	697b      	ldr	r3, [r7, #20]
 800617e:	440b      	add	r3, r1
 8006180:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006184:	4619      	mov	r1, r3
 8006186:	4b98      	ldr	r3, [pc, #608]	; (80063e8 <USB_EP0StartXfer+0x2a8>)
 8006188:	4013      	ands	r3, r2
 800618a:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800618c:	693b      	ldr	r3, [r7, #16]
 800618e:	015a      	lsls	r2, r3, #5
 8006190:	697b      	ldr	r3, [r7, #20]
 8006192:	4413      	add	r3, r2
 8006194:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006198:	691b      	ldr	r3, [r3, #16]
 800619a:	693a      	ldr	r2, [r7, #16]
 800619c:	0151      	lsls	r1, r2, #5
 800619e:	697a      	ldr	r2, [r7, #20]
 80061a0:	440a      	add	r2, r1
 80061a2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80061a6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80061aa:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80061ac:	693b      	ldr	r3, [r7, #16]
 80061ae:	015a      	lsls	r2, r3, #5
 80061b0:	697b      	ldr	r3, [r7, #20]
 80061b2:	4413      	add	r3, r2
 80061b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80061b8:	691a      	ldr	r2, [r3, #16]
 80061ba:	693b      	ldr	r3, [r7, #16]
 80061bc:	0159      	lsls	r1, r3, #5
 80061be:	697b      	ldr	r3, [r7, #20]
 80061c0:	440b      	add	r3, r1
 80061c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80061c6:	4619      	mov	r1, r3
 80061c8:	4b88      	ldr	r3, [pc, #544]	; (80063ec <USB_EP0StartXfer+0x2ac>)
 80061ca:	4013      	ands	r3, r2
 80061cc:	610b      	str	r3, [r1, #16]
 80061ce:	e04e      	b.n	800626e <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80061d0:	693b      	ldr	r3, [r7, #16]
 80061d2:	015a      	lsls	r2, r3, #5
 80061d4:	697b      	ldr	r3, [r7, #20]
 80061d6:	4413      	add	r3, r2
 80061d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80061dc:	691a      	ldr	r2, [r3, #16]
 80061de:	693b      	ldr	r3, [r7, #16]
 80061e0:	0159      	lsls	r1, r3, #5
 80061e2:	697b      	ldr	r3, [r7, #20]
 80061e4:	440b      	add	r3, r1
 80061e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80061ea:	4619      	mov	r1, r3
 80061ec:	4b7f      	ldr	r3, [pc, #508]	; (80063ec <USB_EP0StartXfer+0x2ac>)
 80061ee:	4013      	ands	r3, r2
 80061f0:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80061f2:	693b      	ldr	r3, [r7, #16]
 80061f4:	015a      	lsls	r2, r3, #5
 80061f6:	697b      	ldr	r3, [r7, #20]
 80061f8:	4413      	add	r3, r2
 80061fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80061fe:	691a      	ldr	r2, [r3, #16]
 8006200:	693b      	ldr	r3, [r7, #16]
 8006202:	0159      	lsls	r1, r3, #5
 8006204:	697b      	ldr	r3, [r7, #20]
 8006206:	440b      	add	r3, r1
 8006208:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800620c:	4619      	mov	r1, r3
 800620e:	4b76      	ldr	r3, [pc, #472]	; (80063e8 <USB_EP0StartXfer+0x2a8>)
 8006210:	4013      	ands	r3, r2
 8006212:	610b      	str	r3, [r1, #16]

      if (ep->xfer_len > ep->maxpacket)
 8006214:	68bb      	ldr	r3, [r7, #8]
 8006216:	695a      	ldr	r2, [r3, #20]
 8006218:	68bb      	ldr	r3, [r7, #8]
 800621a:	689b      	ldr	r3, [r3, #8]
 800621c:	429a      	cmp	r2, r3
 800621e:	d903      	bls.n	8006228 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8006220:	68bb      	ldr	r3, [r7, #8]
 8006222:	689a      	ldr	r2, [r3, #8]
 8006224:	68bb      	ldr	r3, [r7, #8]
 8006226:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006228:	693b      	ldr	r3, [r7, #16]
 800622a:	015a      	lsls	r2, r3, #5
 800622c:	697b      	ldr	r3, [r7, #20]
 800622e:	4413      	add	r3, r2
 8006230:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006234:	691b      	ldr	r3, [r3, #16]
 8006236:	693a      	ldr	r2, [r7, #16]
 8006238:	0151      	lsls	r1, r2, #5
 800623a:	697a      	ldr	r2, [r7, #20]
 800623c:	440a      	add	r2, r1
 800623e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006242:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006246:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8006248:	693b      	ldr	r3, [r7, #16]
 800624a:	015a      	lsls	r2, r3, #5
 800624c:	697b      	ldr	r3, [r7, #20]
 800624e:	4413      	add	r3, r2
 8006250:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006254:	691a      	ldr	r2, [r3, #16]
 8006256:	68bb      	ldr	r3, [r7, #8]
 8006258:	695b      	ldr	r3, [r3, #20]
 800625a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800625e:	6939      	ldr	r1, [r7, #16]
 8006260:	0148      	lsls	r0, r1, #5
 8006262:	6979      	ldr	r1, [r7, #20]
 8006264:	4401      	add	r1, r0
 8006266:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800626a:	4313      	orrs	r3, r2
 800626c:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800626e:	79fb      	ldrb	r3, [r7, #7]
 8006270:	2b01      	cmp	r3, #1
 8006272:	d11e      	bne.n	80062b2 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8006274:	68bb      	ldr	r3, [r7, #8]
 8006276:	691b      	ldr	r3, [r3, #16]
 8006278:	2b00      	cmp	r3, #0
 800627a:	d009      	beq.n	8006290 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800627c:	693b      	ldr	r3, [r7, #16]
 800627e:	015a      	lsls	r2, r3, #5
 8006280:	697b      	ldr	r3, [r7, #20]
 8006282:	4413      	add	r3, r2
 8006284:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006288:	461a      	mov	r2, r3
 800628a:	68bb      	ldr	r3, [r7, #8]
 800628c:	691b      	ldr	r3, [r3, #16]
 800628e:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006290:	693b      	ldr	r3, [r7, #16]
 8006292:	015a      	lsls	r2, r3, #5
 8006294:	697b      	ldr	r3, [r7, #20]
 8006296:	4413      	add	r3, r2
 8006298:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	693a      	ldr	r2, [r7, #16]
 80062a0:	0151      	lsls	r1, r2, #5
 80062a2:	697a      	ldr	r2, [r7, #20]
 80062a4:	440a      	add	r2, r1
 80062a6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80062aa:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80062ae:	6013      	str	r3, [r2, #0]
 80062b0:	e092      	b.n	80063d8 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80062b2:	693b      	ldr	r3, [r7, #16]
 80062b4:	015a      	lsls	r2, r3, #5
 80062b6:	697b      	ldr	r3, [r7, #20]
 80062b8:	4413      	add	r3, r2
 80062ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	693a      	ldr	r2, [r7, #16]
 80062c2:	0151      	lsls	r1, r2, #5
 80062c4:	697a      	ldr	r2, [r7, #20]
 80062c6:	440a      	add	r2, r1
 80062c8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80062cc:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80062d0:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 80062d2:	68bb      	ldr	r3, [r7, #8]
 80062d4:	695b      	ldr	r3, [r3, #20]
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d07e      	beq.n	80063d8 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80062da:	697b      	ldr	r3, [r7, #20]
 80062dc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80062e0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80062e2:	68bb      	ldr	r3, [r7, #8]
 80062e4:	781b      	ldrb	r3, [r3, #0]
 80062e6:	f003 030f 	and.w	r3, r3, #15
 80062ea:	2101      	movs	r1, #1
 80062ec:	fa01 f303 	lsl.w	r3, r1, r3
 80062f0:	6979      	ldr	r1, [r7, #20]
 80062f2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80062f6:	4313      	orrs	r3, r2
 80062f8:	634b      	str	r3, [r1, #52]	; 0x34
 80062fa:	e06d      	b.n	80063d8 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80062fc:	693b      	ldr	r3, [r7, #16]
 80062fe:	015a      	lsls	r2, r3, #5
 8006300:	697b      	ldr	r3, [r7, #20]
 8006302:	4413      	add	r3, r2
 8006304:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006308:	691a      	ldr	r2, [r3, #16]
 800630a:	693b      	ldr	r3, [r7, #16]
 800630c:	0159      	lsls	r1, r3, #5
 800630e:	697b      	ldr	r3, [r7, #20]
 8006310:	440b      	add	r3, r1
 8006312:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006316:	4619      	mov	r1, r3
 8006318:	4b34      	ldr	r3, [pc, #208]	; (80063ec <USB_EP0StartXfer+0x2ac>)
 800631a:	4013      	ands	r3, r2
 800631c:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800631e:	693b      	ldr	r3, [r7, #16]
 8006320:	015a      	lsls	r2, r3, #5
 8006322:	697b      	ldr	r3, [r7, #20]
 8006324:	4413      	add	r3, r2
 8006326:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800632a:	691a      	ldr	r2, [r3, #16]
 800632c:	693b      	ldr	r3, [r7, #16]
 800632e:	0159      	lsls	r1, r3, #5
 8006330:	697b      	ldr	r3, [r7, #20]
 8006332:	440b      	add	r3, r1
 8006334:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006338:	4619      	mov	r1, r3
 800633a:	4b2b      	ldr	r3, [pc, #172]	; (80063e8 <USB_EP0StartXfer+0x2a8>)
 800633c:	4013      	ands	r3, r2
 800633e:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len > 0U)
 8006340:	68bb      	ldr	r3, [r7, #8]
 8006342:	695b      	ldr	r3, [r3, #20]
 8006344:	2b00      	cmp	r3, #0
 8006346:	d003      	beq.n	8006350 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 8006348:	68bb      	ldr	r3, [r7, #8]
 800634a:	689a      	ldr	r2, [r3, #8]
 800634c:	68bb      	ldr	r3, [r7, #8]
 800634e:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006350:	693b      	ldr	r3, [r7, #16]
 8006352:	015a      	lsls	r2, r3, #5
 8006354:	697b      	ldr	r3, [r7, #20]
 8006356:	4413      	add	r3, r2
 8006358:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800635c:	691b      	ldr	r3, [r3, #16]
 800635e:	693a      	ldr	r2, [r7, #16]
 8006360:	0151      	lsls	r1, r2, #5
 8006362:	697a      	ldr	r2, [r7, #20]
 8006364:	440a      	add	r2, r1
 8006366:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800636a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800636e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8006370:	693b      	ldr	r3, [r7, #16]
 8006372:	015a      	lsls	r2, r3, #5
 8006374:	697b      	ldr	r3, [r7, #20]
 8006376:	4413      	add	r3, r2
 8006378:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800637c:	691a      	ldr	r2, [r3, #16]
 800637e:	68bb      	ldr	r3, [r7, #8]
 8006380:	689b      	ldr	r3, [r3, #8]
 8006382:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006386:	6939      	ldr	r1, [r7, #16]
 8006388:	0148      	lsls	r0, r1, #5
 800638a:	6979      	ldr	r1, [r7, #20]
 800638c:	4401      	add	r1, r0
 800638e:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006392:	4313      	orrs	r3, r2
 8006394:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8006396:	79fb      	ldrb	r3, [r7, #7]
 8006398:	2b01      	cmp	r3, #1
 800639a:	d10d      	bne.n	80063b8 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800639c:	68bb      	ldr	r3, [r7, #8]
 800639e:	68db      	ldr	r3, [r3, #12]
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	d009      	beq.n	80063b8 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80063a4:	68bb      	ldr	r3, [r7, #8]
 80063a6:	68d9      	ldr	r1, [r3, #12]
 80063a8:	693b      	ldr	r3, [r7, #16]
 80063aa:	015a      	lsls	r2, r3, #5
 80063ac:	697b      	ldr	r3, [r7, #20]
 80063ae:	4413      	add	r3, r2
 80063b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80063b4:	460a      	mov	r2, r1
 80063b6:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80063b8:	693b      	ldr	r3, [r7, #16]
 80063ba:	015a      	lsls	r2, r3, #5
 80063bc:	697b      	ldr	r3, [r7, #20]
 80063be:	4413      	add	r3, r2
 80063c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	693a      	ldr	r2, [r7, #16]
 80063c8:	0151      	lsls	r1, r2, #5
 80063ca:	697a      	ldr	r2, [r7, #20]
 80063cc:	440a      	add	r2, r1
 80063ce:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80063d2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80063d6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80063d8:	2300      	movs	r3, #0
}
 80063da:	4618      	mov	r0, r3
 80063dc:	371c      	adds	r7, #28
 80063de:	46bd      	mov	sp, r7
 80063e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063e4:	4770      	bx	lr
 80063e6:	bf00      	nop
 80063e8:	e007ffff 	.word	0xe007ffff
 80063ec:	fff80000 	.word	0xfff80000

080063f0 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80063f0:	b480      	push	{r7}
 80063f2:	b089      	sub	sp, #36	; 0x24
 80063f4:	af00      	add	r7, sp, #0
 80063f6:	60f8      	str	r0, [r7, #12]
 80063f8:	60b9      	str	r1, [r7, #8]
 80063fa:	4611      	mov	r1, r2
 80063fc:	461a      	mov	r2, r3
 80063fe:	460b      	mov	r3, r1
 8006400:	71fb      	strb	r3, [r7, #7]
 8006402:	4613      	mov	r3, r2
 8006404:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800640a:	68bb      	ldr	r3, [r7, #8]
 800640c:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 800640e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8006412:	2b00      	cmp	r3, #0
 8006414:	d123      	bne.n	800645e <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8006416:	88bb      	ldrh	r3, [r7, #4]
 8006418:	3303      	adds	r3, #3
 800641a:	089b      	lsrs	r3, r3, #2
 800641c:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800641e:	2300      	movs	r3, #0
 8006420:	61bb      	str	r3, [r7, #24]
 8006422:	e018      	b.n	8006456 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8006424:	79fb      	ldrb	r3, [r7, #7]
 8006426:	031a      	lsls	r2, r3, #12
 8006428:	697b      	ldr	r3, [r7, #20]
 800642a:	4413      	add	r3, r2
 800642c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006430:	461a      	mov	r2, r3
 8006432:	69fb      	ldr	r3, [r7, #28]
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	6013      	str	r3, [r2, #0]
      pSrc++;
 8006438:	69fb      	ldr	r3, [r7, #28]
 800643a:	3301      	adds	r3, #1
 800643c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800643e:	69fb      	ldr	r3, [r7, #28]
 8006440:	3301      	adds	r3, #1
 8006442:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006444:	69fb      	ldr	r3, [r7, #28]
 8006446:	3301      	adds	r3, #1
 8006448:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800644a:	69fb      	ldr	r3, [r7, #28]
 800644c:	3301      	adds	r3, #1
 800644e:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8006450:	69bb      	ldr	r3, [r7, #24]
 8006452:	3301      	adds	r3, #1
 8006454:	61bb      	str	r3, [r7, #24]
 8006456:	69ba      	ldr	r2, [r7, #24]
 8006458:	693b      	ldr	r3, [r7, #16]
 800645a:	429a      	cmp	r2, r3
 800645c:	d3e2      	bcc.n	8006424 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800645e:	2300      	movs	r3, #0
}
 8006460:	4618      	mov	r0, r3
 8006462:	3724      	adds	r7, #36	; 0x24
 8006464:	46bd      	mov	sp, r7
 8006466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800646a:	4770      	bx	lr

0800646c <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800646c:	b480      	push	{r7}
 800646e:	b08b      	sub	sp, #44	; 0x2c
 8006470:	af00      	add	r7, sp, #0
 8006472:	60f8      	str	r0, [r7, #12]
 8006474:	60b9      	str	r1, [r7, #8]
 8006476:	4613      	mov	r3, r2
 8006478:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800647e:	68bb      	ldr	r3, [r7, #8]
 8006480:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8006482:	88fb      	ldrh	r3, [r7, #6]
 8006484:	089b      	lsrs	r3, r3, #2
 8006486:	b29b      	uxth	r3, r3
 8006488:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800648a:	88fb      	ldrh	r3, [r7, #6]
 800648c:	f003 0303 	and.w	r3, r3, #3
 8006490:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8006492:	2300      	movs	r3, #0
 8006494:	623b      	str	r3, [r7, #32]
 8006496:	e014      	b.n	80064c2 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8006498:	69bb      	ldr	r3, [r7, #24]
 800649a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800649e:	681a      	ldr	r2, [r3, #0]
 80064a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064a2:	601a      	str	r2, [r3, #0]
    pDest++;
 80064a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064a6:	3301      	adds	r3, #1
 80064a8:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80064aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064ac:	3301      	adds	r3, #1
 80064ae:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80064b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064b2:	3301      	adds	r3, #1
 80064b4:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80064b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064b8:	3301      	adds	r3, #1
 80064ba:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 80064bc:	6a3b      	ldr	r3, [r7, #32]
 80064be:	3301      	adds	r3, #1
 80064c0:	623b      	str	r3, [r7, #32]
 80064c2:	6a3a      	ldr	r2, [r7, #32]
 80064c4:	697b      	ldr	r3, [r7, #20]
 80064c6:	429a      	cmp	r2, r3
 80064c8:	d3e6      	bcc.n	8006498 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80064ca:	8bfb      	ldrh	r3, [r7, #30]
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	d01e      	beq.n	800650e <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80064d0:	2300      	movs	r3, #0
 80064d2:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80064d4:	69bb      	ldr	r3, [r7, #24]
 80064d6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80064da:	461a      	mov	r2, r3
 80064dc:	f107 0310 	add.w	r3, r7, #16
 80064e0:	6812      	ldr	r2, [r2, #0]
 80064e2:	601a      	str	r2, [r3, #0]
	
    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80064e4:	693a      	ldr	r2, [r7, #16]
 80064e6:	6a3b      	ldr	r3, [r7, #32]
 80064e8:	b2db      	uxtb	r3, r3
 80064ea:	00db      	lsls	r3, r3, #3
 80064ec:	fa22 f303 	lsr.w	r3, r2, r3
 80064f0:	b2da      	uxtb	r2, r3
 80064f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064f4:	701a      	strb	r2, [r3, #0]
      i++;
 80064f6:	6a3b      	ldr	r3, [r7, #32]
 80064f8:	3301      	adds	r3, #1
 80064fa:	623b      	str	r3, [r7, #32]
      pDest++;
 80064fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064fe:	3301      	adds	r3, #1
 8006500:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8006502:	8bfb      	ldrh	r3, [r7, #30]
 8006504:	3b01      	subs	r3, #1
 8006506:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8006508:	8bfb      	ldrh	r3, [r7, #30]
 800650a:	2b00      	cmp	r3, #0
 800650c:	d1ea      	bne.n	80064e4 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800650e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006510:	4618      	mov	r0, r3
 8006512:	372c      	adds	r7, #44	; 0x2c
 8006514:	46bd      	mov	sp, r7
 8006516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800651a:	4770      	bx	lr

0800651c <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800651c:	b480      	push	{r7}
 800651e:	b085      	sub	sp, #20
 8006520:	af00      	add	r7, sp, #0
 8006522:	6078      	str	r0, [r7, #4]
 8006524:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800652a:	683b      	ldr	r3, [r7, #0]
 800652c:	781b      	ldrb	r3, [r3, #0]
 800652e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006530:	683b      	ldr	r3, [r7, #0]
 8006532:	785b      	ldrb	r3, [r3, #1]
 8006534:	2b01      	cmp	r3, #1
 8006536:	d12c      	bne.n	8006592 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8006538:	68bb      	ldr	r3, [r7, #8]
 800653a:	015a      	lsls	r2, r3, #5
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	4413      	add	r3, r2
 8006540:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	2b00      	cmp	r3, #0
 8006548:	db12      	blt.n	8006570 <USB_EPSetStall+0x54>
 800654a:	68bb      	ldr	r3, [r7, #8]
 800654c:	2b00      	cmp	r3, #0
 800654e:	d00f      	beq.n	8006570 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8006550:	68bb      	ldr	r3, [r7, #8]
 8006552:	015a      	lsls	r2, r3, #5
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	4413      	add	r3, r2
 8006558:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	68ba      	ldr	r2, [r7, #8]
 8006560:	0151      	lsls	r1, r2, #5
 8006562:	68fa      	ldr	r2, [r7, #12]
 8006564:	440a      	add	r2, r1
 8006566:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800656a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800656e:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8006570:	68bb      	ldr	r3, [r7, #8]
 8006572:	015a      	lsls	r2, r3, #5
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	4413      	add	r3, r2
 8006578:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	68ba      	ldr	r2, [r7, #8]
 8006580:	0151      	lsls	r1, r2, #5
 8006582:	68fa      	ldr	r2, [r7, #12]
 8006584:	440a      	add	r2, r1
 8006586:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800658a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800658e:	6013      	str	r3, [r2, #0]
 8006590:	e02b      	b.n	80065ea <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8006592:	68bb      	ldr	r3, [r7, #8]
 8006594:	015a      	lsls	r2, r3, #5
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	4413      	add	r3, r2
 800659a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	2b00      	cmp	r3, #0
 80065a2:	db12      	blt.n	80065ca <USB_EPSetStall+0xae>
 80065a4:	68bb      	ldr	r3, [r7, #8]
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	d00f      	beq.n	80065ca <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80065aa:	68bb      	ldr	r3, [r7, #8]
 80065ac:	015a      	lsls	r2, r3, #5
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	4413      	add	r3, r2
 80065b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	68ba      	ldr	r2, [r7, #8]
 80065ba:	0151      	lsls	r1, r2, #5
 80065bc:	68fa      	ldr	r2, [r7, #12]
 80065be:	440a      	add	r2, r1
 80065c0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80065c4:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80065c8:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80065ca:	68bb      	ldr	r3, [r7, #8]
 80065cc:	015a      	lsls	r2, r3, #5
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	4413      	add	r3, r2
 80065d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	68ba      	ldr	r2, [r7, #8]
 80065da:	0151      	lsls	r1, r2, #5
 80065dc:	68fa      	ldr	r2, [r7, #12]
 80065de:	440a      	add	r2, r1
 80065e0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80065e4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80065e8:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80065ea:	2300      	movs	r3, #0
}
 80065ec:	4618      	mov	r0, r3
 80065ee:	3714      	adds	r7, #20
 80065f0:	46bd      	mov	sp, r7
 80065f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065f6:	4770      	bx	lr

080065f8 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80065f8:	b480      	push	{r7}
 80065fa:	b085      	sub	sp, #20
 80065fc:	af00      	add	r7, sp, #0
 80065fe:	6078      	str	r0, [r7, #4]
 8006600:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006606:	683b      	ldr	r3, [r7, #0]
 8006608:	781b      	ldrb	r3, [r3, #0]
 800660a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800660c:	683b      	ldr	r3, [r7, #0]
 800660e:	785b      	ldrb	r3, [r3, #1]
 8006610:	2b01      	cmp	r3, #1
 8006612:	d128      	bne.n	8006666 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8006614:	68bb      	ldr	r3, [r7, #8]
 8006616:	015a      	lsls	r2, r3, #5
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	4413      	add	r3, r2
 800661c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	68ba      	ldr	r2, [r7, #8]
 8006624:	0151      	lsls	r1, r2, #5
 8006626:	68fa      	ldr	r2, [r7, #12]
 8006628:	440a      	add	r2, r1
 800662a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800662e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006632:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8006634:	683b      	ldr	r3, [r7, #0]
 8006636:	78db      	ldrb	r3, [r3, #3]
 8006638:	2b03      	cmp	r3, #3
 800663a:	d003      	beq.n	8006644 <USB_EPClearStall+0x4c>
 800663c:	683b      	ldr	r3, [r7, #0]
 800663e:	78db      	ldrb	r3, [r3, #3]
 8006640:	2b02      	cmp	r3, #2
 8006642:	d138      	bne.n	80066b6 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8006644:	68bb      	ldr	r3, [r7, #8]
 8006646:	015a      	lsls	r2, r3, #5
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	4413      	add	r3, r2
 800664c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	68ba      	ldr	r2, [r7, #8]
 8006654:	0151      	lsls	r1, r2, #5
 8006656:	68fa      	ldr	r2, [r7, #12]
 8006658:	440a      	add	r2, r1
 800665a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800665e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006662:	6013      	str	r3, [r2, #0]
 8006664:	e027      	b.n	80066b6 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8006666:	68bb      	ldr	r3, [r7, #8]
 8006668:	015a      	lsls	r2, r3, #5
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	4413      	add	r3, r2
 800666e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	68ba      	ldr	r2, [r7, #8]
 8006676:	0151      	lsls	r1, r2, #5
 8006678:	68fa      	ldr	r2, [r7, #12]
 800667a:	440a      	add	r2, r1
 800667c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006680:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006684:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8006686:	683b      	ldr	r3, [r7, #0]
 8006688:	78db      	ldrb	r3, [r3, #3]
 800668a:	2b03      	cmp	r3, #3
 800668c:	d003      	beq.n	8006696 <USB_EPClearStall+0x9e>
 800668e:	683b      	ldr	r3, [r7, #0]
 8006690:	78db      	ldrb	r3, [r3, #3]
 8006692:	2b02      	cmp	r3, #2
 8006694:	d10f      	bne.n	80066b6 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8006696:	68bb      	ldr	r3, [r7, #8]
 8006698:	015a      	lsls	r2, r3, #5
 800669a:	68fb      	ldr	r3, [r7, #12]
 800669c:	4413      	add	r3, r2
 800669e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	68ba      	ldr	r2, [r7, #8]
 80066a6:	0151      	lsls	r1, r2, #5
 80066a8:	68fa      	ldr	r2, [r7, #12]
 80066aa:	440a      	add	r2, r1
 80066ac:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80066b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80066b4:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 80066b6:	2300      	movs	r3, #0
}
 80066b8:	4618      	mov	r0, r3
 80066ba:	3714      	adds	r7, #20
 80066bc:	46bd      	mov	sp, r7
 80066be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066c2:	4770      	bx	lr

080066c4 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 80066c4:	b480      	push	{r7}
 80066c6:	b085      	sub	sp, #20
 80066c8:	af00      	add	r7, sp, #0
 80066ca:	6078      	str	r0, [r7, #4]
 80066cc:	460b      	mov	r3, r1
 80066ce:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	68fa      	ldr	r2, [r7, #12]
 80066de:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80066e2:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80066e6:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80066ee:	681a      	ldr	r2, [r3, #0]
 80066f0:	78fb      	ldrb	r3, [r7, #3]
 80066f2:	011b      	lsls	r3, r3, #4
 80066f4:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 80066f8:	68f9      	ldr	r1, [r7, #12]
 80066fa:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80066fe:	4313      	orrs	r3, r2
 8006700:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8006702:	2300      	movs	r3, #0
}
 8006704:	4618      	mov	r0, r3
 8006706:	3714      	adds	r7, #20
 8006708:	46bd      	mov	sp, r7
 800670a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800670e:	4770      	bx	lr

08006710 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8006710:	b480      	push	{r7}
 8006712:	b085      	sub	sp, #20
 8006714:	af00      	add	r7, sp, #0
 8006716:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	68fa      	ldr	r2, [r7, #12]
 8006726:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800672a:	f023 0303 	bic.w	r3, r3, #3
 800672e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006736:	685b      	ldr	r3, [r3, #4]
 8006738:	68fa      	ldr	r2, [r7, #12]
 800673a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800673e:	f023 0302 	bic.w	r3, r3, #2
 8006742:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006744:	2300      	movs	r3, #0
}
 8006746:	4618      	mov	r0, r3
 8006748:	3714      	adds	r7, #20
 800674a:	46bd      	mov	sp, r7
 800674c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006750:	4770      	bx	lr

08006752 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8006752:	b480      	push	{r7}
 8006754:	b085      	sub	sp, #20
 8006756:	af00      	add	r7, sp, #0
 8006758:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800675e:	68fb      	ldr	r3, [r7, #12]
 8006760:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	68fa      	ldr	r2, [r7, #12]
 8006768:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800676c:	f023 0303 	bic.w	r3, r3, #3
 8006770:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006778:	685b      	ldr	r3, [r3, #4]
 800677a:	68fa      	ldr	r2, [r7, #12]
 800677c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006780:	f043 0302 	orr.w	r3, r3, #2
 8006784:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006786:	2300      	movs	r3, #0
}
 8006788:	4618      	mov	r0, r3
 800678a:	3714      	adds	r7, #20
 800678c:	46bd      	mov	sp, r7
 800678e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006792:	4770      	bx	lr

08006794 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8006794:	b480      	push	{r7}
 8006796:	b085      	sub	sp, #20
 8006798:	af00      	add	r7, sp, #0
 800679a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	695b      	ldr	r3, [r3, #20]
 80067a0:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	699b      	ldr	r3, [r3, #24]
 80067a6:	68fa      	ldr	r2, [r7, #12]
 80067a8:	4013      	ands	r3, r2
 80067aa:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80067ac:	68fb      	ldr	r3, [r7, #12]
}
 80067ae:	4618      	mov	r0, r3
 80067b0:	3714      	adds	r7, #20
 80067b2:	46bd      	mov	sp, r7
 80067b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067b8:	4770      	bx	lr

080067ba <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80067ba:	b480      	push	{r7}
 80067bc:	b085      	sub	sp, #20
 80067be:	af00      	add	r7, sp, #0
 80067c0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80067cc:	699b      	ldr	r3, [r3, #24]
 80067ce:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80067d6:	69db      	ldr	r3, [r3, #28]
 80067d8:	68ba      	ldr	r2, [r7, #8]
 80067da:	4013      	ands	r3, r2
 80067dc:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 80067de:	68bb      	ldr	r3, [r7, #8]
 80067e0:	0c1b      	lsrs	r3, r3, #16
}
 80067e2:	4618      	mov	r0, r3
 80067e4:	3714      	adds	r7, #20
 80067e6:	46bd      	mov	sp, r7
 80067e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ec:	4770      	bx	lr

080067ee <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80067ee:	b480      	push	{r7}
 80067f0:	b085      	sub	sp, #20
 80067f2:	af00      	add	r7, sp, #0
 80067f4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006800:	699b      	ldr	r3, [r3, #24]
 8006802:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8006804:	68fb      	ldr	r3, [r7, #12]
 8006806:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800680a:	69db      	ldr	r3, [r3, #28]
 800680c:	68ba      	ldr	r2, [r7, #8]
 800680e:	4013      	ands	r3, r2
 8006810:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8006812:	68bb      	ldr	r3, [r7, #8]
 8006814:	b29b      	uxth	r3, r3
}
 8006816:	4618      	mov	r0, r3
 8006818:	3714      	adds	r7, #20
 800681a:	46bd      	mov	sp, r7
 800681c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006820:	4770      	bx	lr

08006822 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8006822:	b480      	push	{r7}
 8006824:	b085      	sub	sp, #20
 8006826:	af00      	add	r7, sp, #0
 8006828:	6078      	str	r0, [r7, #4]
 800682a:	460b      	mov	r3, r1
 800682c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8006832:	78fb      	ldrb	r3, [r7, #3]
 8006834:	015a      	lsls	r2, r3, #5
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	4413      	add	r3, r2
 800683a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800683e:	689b      	ldr	r3, [r3, #8]
 8006840:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006848:	695b      	ldr	r3, [r3, #20]
 800684a:	68ba      	ldr	r2, [r7, #8]
 800684c:	4013      	ands	r3, r2
 800684e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006850:	68bb      	ldr	r3, [r7, #8]
}
 8006852:	4618      	mov	r0, r3
 8006854:	3714      	adds	r7, #20
 8006856:	46bd      	mov	sp, r7
 8006858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800685c:	4770      	bx	lr

0800685e <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800685e:	b480      	push	{r7}
 8006860:	b087      	sub	sp, #28
 8006862:	af00      	add	r7, sp, #0
 8006864:	6078      	str	r0, [r7, #4]
 8006866:	460b      	mov	r3, r1
 8006868:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 800686e:	697b      	ldr	r3, [r7, #20]
 8006870:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006874:	691b      	ldr	r3, [r3, #16]
 8006876:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8006878:	697b      	ldr	r3, [r7, #20]
 800687a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800687e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006880:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8006882:	78fb      	ldrb	r3, [r7, #3]
 8006884:	f003 030f 	and.w	r3, r3, #15
 8006888:	68fa      	ldr	r2, [r7, #12]
 800688a:	fa22 f303 	lsr.w	r3, r2, r3
 800688e:	01db      	lsls	r3, r3, #7
 8006890:	b2db      	uxtb	r3, r3
 8006892:	693a      	ldr	r2, [r7, #16]
 8006894:	4313      	orrs	r3, r2
 8006896:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8006898:	78fb      	ldrb	r3, [r7, #3]
 800689a:	015a      	lsls	r2, r3, #5
 800689c:	697b      	ldr	r3, [r7, #20]
 800689e:	4413      	add	r3, r2
 80068a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80068a4:	689b      	ldr	r3, [r3, #8]
 80068a6:	693a      	ldr	r2, [r7, #16]
 80068a8:	4013      	ands	r3, r2
 80068aa:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80068ac:	68bb      	ldr	r3, [r7, #8]
}
 80068ae:	4618      	mov	r0, r3
 80068b0:	371c      	adds	r7, #28
 80068b2:	46bd      	mov	sp, r7
 80068b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068b8:	4770      	bx	lr

080068ba <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80068ba:	b480      	push	{r7}
 80068bc:	b083      	sub	sp, #12
 80068be:	af00      	add	r7, sp, #0
 80068c0:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	695b      	ldr	r3, [r3, #20]
 80068c6:	f003 0301 	and.w	r3, r3, #1
}
 80068ca:	4618      	mov	r0, r3
 80068cc:	370c      	adds	r7, #12
 80068ce:	46bd      	mov	sp, r7
 80068d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068d4:	4770      	bx	lr
	...

080068d8 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 80068d8:	b480      	push	{r7}
 80068da:	b085      	sub	sp, #20
 80068dc:	af00      	add	r7, sp, #0
 80068de:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80068ea:	681a      	ldr	r2, [r3, #0]
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80068f2:	4619      	mov	r1, r3
 80068f4:	4b09      	ldr	r3, [pc, #36]	; (800691c <USB_ActivateSetup+0x44>)
 80068f6:	4013      	ands	r3, r2
 80068f8:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80068fa:	68fb      	ldr	r3, [r7, #12]
 80068fc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006900:	685b      	ldr	r3, [r3, #4]
 8006902:	68fa      	ldr	r2, [r7, #12]
 8006904:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006908:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800690c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800690e:	2300      	movs	r3, #0
}
 8006910:	4618      	mov	r0, r3
 8006912:	3714      	adds	r7, #20
 8006914:	46bd      	mov	sp, r7
 8006916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800691a:	4770      	bx	lr
 800691c:	fffff800 	.word	0xfffff800

08006920 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8006920:	b480      	push	{r7}
 8006922:	b087      	sub	sp, #28
 8006924:	af00      	add	r7, sp, #0
 8006926:	60f8      	str	r0, [r7, #12]
 8006928:	460b      	mov	r3, r1
 800692a:	607a      	str	r2, [r7, #4]
 800692c:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	333c      	adds	r3, #60	; 0x3c
 8006936:	3304      	adds	r3, #4
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800693c:	693b      	ldr	r3, [r7, #16]
 800693e:	4a26      	ldr	r2, [pc, #152]	; (80069d8 <USB_EP0_OutStart+0xb8>)
 8006940:	4293      	cmp	r3, r2
 8006942:	d90a      	bls.n	800695a <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006944:	697b      	ldr	r3, [r7, #20]
 8006946:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006950:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006954:	d101      	bne.n	800695a <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8006956:	2300      	movs	r3, #0
 8006958:	e037      	b.n	80069ca <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800695a:	697b      	ldr	r3, [r7, #20]
 800695c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006960:	461a      	mov	r2, r3
 8006962:	2300      	movs	r3, #0
 8006964:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006966:	697b      	ldr	r3, [r7, #20]
 8006968:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800696c:	691b      	ldr	r3, [r3, #16]
 800696e:	697a      	ldr	r2, [r7, #20]
 8006970:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006974:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006978:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800697a:	697b      	ldr	r3, [r7, #20]
 800697c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006980:	691b      	ldr	r3, [r3, #16]
 8006982:	697a      	ldr	r2, [r7, #20]
 8006984:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006988:	f043 0318 	orr.w	r3, r3, #24
 800698c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800698e:	697b      	ldr	r3, [r7, #20]
 8006990:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006994:	691b      	ldr	r3, [r3, #16]
 8006996:	697a      	ldr	r2, [r7, #20]
 8006998:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800699c:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 80069a0:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 80069a2:	7afb      	ldrb	r3, [r7, #11]
 80069a4:	2b01      	cmp	r3, #1
 80069a6:	d10f      	bne.n	80069c8 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 80069a8:	697b      	ldr	r3, [r7, #20]
 80069aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80069ae:	461a      	mov	r2, r3
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 80069b4:	697b      	ldr	r3, [r7, #20]
 80069b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	697a      	ldr	r2, [r7, #20]
 80069be:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80069c2:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 80069c6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80069c8:	2300      	movs	r3, #0
}
 80069ca:	4618      	mov	r0, r3
 80069cc:	371c      	adds	r7, #28
 80069ce:	46bd      	mov	sp, r7
 80069d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069d4:	4770      	bx	lr
 80069d6:	bf00      	nop
 80069d8:	4f54300a 	.word	0x4f54300a

080069dc <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80069dc:	b480      	push	{r7}
 80069de:	b085      	sub	sp, #20
 80069e0:	af00      	add	r7, sp, #0
 80069e2:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 80069e4:	2300      	movs	r3, #0
 80069e6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80069e8:	68fb      	ldr	r3, [r7, #12]
 80069ea:	3301      	adds	r3, #1
 80069ec:	60fb      	str	r3, [r7, #12]
 80069ee:	68fb      	ldr	r3, [r7, #12]
 80069f0:	4a13      	ldr	r2, [pc, #76]	; (8006a40 <USB_CoreReset+0x64>)
 80069f2:	4293      	cmp	r3, r2
 80069f4:	d901      	bls.n	80069fa <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80069f6:	2303      	movs	r3, #3
 80069f8:	e01b      	b.n	8006a32 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	691b      	ldr	r3, [r3, #16]
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	daf2      	bge.n	80069e8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8006a02:	2300      	movs	r3, #0
 8006a04:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	691b      	ldr	r3, [r3, #16]
 8006a0a:	f043 0201 	orr.w	r2, r3, #1
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	3301      	adds	r3, #1
 8006a16:	60fb      	str	r3, [r7, #12]
 8006a18:	68fb      	ldr	r3, [r7, #12]
 8006a1a:	4a09      	ldr	r2, [pc, #36]	; (8006a40 <USB_CoreReset+0x64>)
 8006a1c:	4293      	cmp	r3, r2
 8006a1e:	d901      	bls.n	8006a24 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8006a20:	2303      	movs	r3, #3
 8006a22:	e006      	b.n	8006a32 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	691b      	ldr	r3, [r3, #16]
 8006a28:	f003 0301 	and.w	r3, r3, #1
 8006a2c:	2b01      	cmp	r3, #1
 8006a2e:	d0f0      	beq.n	8006a12 <USB_CoreReset+0x36>

  return HAL_OK;
 8006a30:	2300      	movs	r3, #0
}
 8006a32:	4618      	mov	r0, r3
 8006a34:	3714      	adds	r7, #20
 8006a36:	46bd      	mov	sp, r7
 8006a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a3c:	4770      	bx	lr
 8006a3e:	bf00      	nop
 8006a40:	00030d40 	.word	0x00030d40

08006a44 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006a44:	b580      	push	{r7, lr}
 8006a46:	b084      	sub	sp, #16
 8006a48:	af00      	add	r7, sp, #0
 8006a4a:	6078      	str	r0, [r7, #4]
 8006a4c:	460b      	mov	r3, r1
 8006a4e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8006a50:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8006a54:	f002 f990 	bl	8008d78 <USBD_static_malloc>
 8006a58:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8006a5a:	68fb      	ldr	r3, [r7, #12]
 8006a5c:	2b00      	cmp	r3, #0
 8006a5e:	d105      	bne.n	8006a6c <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	2200      	movs	r2, #0
 8006a64:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 8006a68:	2302      	movs	r3, #2
 8006a6a:	e066      	b.n	8006b3a <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	68fa      	ldr	r2, [r7, #12]
 8006a70:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	7c1b      	ldrb	r3, [r3, #16]
 8006a78:	2b00      	cmp	r3, #0
 8006a7a:	d119      	bne.n	8006ab0 <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8006a7c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006a80:	2202      	movs	r2, #2
 8006a82:	2181      	movs	r1, #129	; 0x81
 8006a84:	6878      	ldr	r0, [r7, #4]
 8006a86:	f002 f854 	bl	8008b32 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	2201      	movs	r2, #1
 8006a8e:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8006a90:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006a94:	2202      	movs	r2, #2
 8006a96:	2101      	movs	r1, #1
 8006a98:	6878      	ldr	r0, [r7, #4]
 8006a9a:	f002 f84a 	bl	8008b32 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	2201      	movs	r2, #1
 8006aa2:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	2210      	movs	r2, #16
 8006aaa:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 8006aae:	e016      	b.n	8006ade <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8006ab0:	2340      	movs	r3, #64	; 0x40
 8006ab2:	2202      	movs	r2, #2
 8006ab4:	2181      	movs	r1, #129	; 0x81
 8006ab6:	6878      	ldr	r0, [r7, #4]
 8006ab8:	f002 f83b 	bl	8008b32 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	2201      	movs	r2, #1
 8006ac0:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8006ac2:	2340      	movs	r3, #64	; 0x40
 8006ac4:	2202      	movs	r2, #2
 8006ac6:	2101      	movs	r1, #1
 8006ac8:	6878      	ldr	r0, [r7, #4]
 8006aca:	f002 f832 	bl	8008b32 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	2201      	movs	r2, #1
 8006ad2:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	2210      	movs	r2, #16
 8006ada:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8006ade:	2308      	movs	r3, #8
 8006ae0:	2203      	movs	r2, #3
 8006ae2:	2182      	movs	r1, #130	; 0x82
 8006ae4:	6878      	ldr	r0, [r7, #4]
 8006ae6:	f002 f824 	bl	8008b32 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	2201      	movs	r2, #1
 8006aee:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	2200      	movs	r2, #0
 8006b00:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	2200      	movs	r2, #0
 8006b08:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	7c1b      	ldrb	r3, [r3, #16]
 8006b10:	2b00      	cmp	r3, #0
 8006b12:	d109      	bne.n	8006b28 <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006b14:	68fb      	ldr	r3, [r7, #12]
 8006b16:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006b1a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006b1e:	2101      	movs	r1, #1
 8006b20:	6878      	ldr	r0, [r7, #4]
 8006b22:	f002 f8f5 	bl	8008d10 <USBD_LL_PrepareReceive>
 8006b26:	e007      	b.n	8006b38 <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006b28:	68fb      	ldr	r3, [r7, #12]
 8006b2a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006b2e:	2340      	movs	r3, #64	; 0x40
 8006b30:	2101      	movs	r1, #1
 8006b32:	6878      	ldr	r0, [r7, #4]
 8006b34:	f002 f8ec 	bl	8008d10 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8006b38:	2300      	movs	r3, #0
}
 8006b3a:	4618      	mov	r0, r3
 8006b3c:	3710      	adds	r7, #16
 8006b3e:	46bd      	mov	sp, r7
 8006b40:	bd80      	pop	{r7, pc}

08006b42 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006b42:	b580      	push	{r7, lr}
 8006b44:	b082      	sub	sp, #8
 8006b46:	af00      	add	r7, sp, #0
 8006b48:	6078      	str	r0, [r7, #4]
 8006b4a:	460b      	mov	r3, r1
 8006b4c:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8006b4e:	2181      	movs	r1, #129	; 0x81
 8006b50:	6878      	ldr	r0, [r7, #4]
 8006b52:	f002 f814 	bl	8008b7e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	2200      	movs	r2, #0
 8006b5a:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8006b5c:	2101      	movs	r1, #1
 8006b5e:	6878      	ldr	r0, [r7, #4]
 8006b60:	f002 f80d 	bl	8008b7e <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	2200      	movs	r2, #0
 8006b68:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8006b6c:	2182      	movs	r1, #130	; 0x82
 8006b6e:	6878      	ldr	r0, [r7, #4]
 8006b70:	f002 f805 	bl	8008b7e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	2200      	movs	r2, #0
 8006b78:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	2200      	movs	r2, #0
 8006b80:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006b8a:	2b00      	cmp	r3, #0
 8006b8c:	d00e      	beq.n	8006bac <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006b94:	685b      	ldr	r3, [r3, #4]
 8006b96:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006b9e:	4618      	mov	r0, r3
 8006ba0:	f002 f8f8 	bl	8008d94 <USBD_static_free>
    pdev->pClassData = NULL;
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	2200      	movs	r2, #0
 8006ba8:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8006bac:	2300      	movs	r3, #0
}
 8006bae:	4618      	mov	r0, r3
 8006bb0:	3708      	adds	r7, #8
 8006bb2:	46bd      	mov	sp, r7
 8006bb4:	bd80      	pop	{r7, pc}
	...

08006bb8 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8006bb8:	b580      	push	{r7, lr}
 8006bba:	b086      	sub	sp, #24
 8006bbc:	af00      	add	r7, sp, #0
 8006bbe:	6078      	str	r0, [r7, #4]
 8006bc0:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006bc8:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8006bca:	2300      	movs	r3, #0
 8006bcc:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8006bce:	2300      	movs	r3, #0
 8006bd0:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8006bd2:	2300      	movs	r3, #0
 8006bd4:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8006bd6:	693b      	ldr	r3, [r7, #16]
 8006bd8:	2b00      	cmp	r3, #0
 8006bda:	d101      	bne.n	8006be0 <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 8006bdc:	2303      	movs	r3, #3
 8006bde:	e0af      	b.n	8006d40 <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006be0:	683b      	ldr	r3, [r7, #0]
 8006be2:	781b      	ldrb	r3, [r3, #0]
 8006be4:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006be8:	2b00      	cmp	r3, #0
 8006bea:	d03f      	beq.n	8006c6c <USBD_CDC_Setup+0xb4>
 8006bec:	2b20      	cmp	r3, #32
 8006bee:	f040 809f 	bne.w	8006d30 <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8006bf2:	683b      	ldr	r3, [r7, #0]
 8006bf4:	88db      	ldrh	r3, [r3, #6]
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	d02e      	beq.n	8006c58 <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8006bfa:	683b      	ldr	r3, [r7, #0]
 8006bfc:	781b      	ldrb	r3, [r3, #0]
 8006bfe:	b25b      	sxtb	r3, r3
 8006c00:	2b00      	cmp	r3, #0
 8006c02:	da16      	bge.n	8006c32 <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006c0a:	689b      	ldr	r3, [r3, #8]
 8006c0c:	683a      	ldr	r2, [r7, #0]
 8006c0e:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 8006c10:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006c12:	683a      	ldr	r2, [r7, #0]
 8006c14:	88d2      	ldrh	r2, [r2, #6]
 8006c16:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8006c18:	683b      	ldr	r3, [r7, #0]
 8006c1a:	88db      	ldrh	r3, [r3, #6]
 8006c1c:	2b07      	cmp	r3, #7
 8006c1e:	bf28      	it	cs
 8006c20:	2307      	movcs	r3, #7
 8006c22:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8006c24:	693b      	ldr	r3, [r7, #16]
 8006c26:	89fa      	ldrh	r2, [r7, #14]
 8006c28:	4619      	mov	r1, r3
 8006c2a:	6878      	ldr	r0, [r7, #4]
 8006c2c:	f001 fb19 	bl	8008262 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 8006c30:	e085      	b.n	8006d3e <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 8006c32:	683b      	ldr	r3, [r7, #0]
 8006c34:	785a      	ldrb	r2, [r3, #1]
 8006c36:	693b      	ldr	r3, [r7, #16]
 8006c38:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8006c3c:	683b      	ldr	r3, [r7, #0]
 8006c3e:	88db      	ldrh	r3, [r3, #6]
 8006c40:	b2da      	uxtb	r2, r3
 8006c42:	693b      	ldr	r3, [r7, #16]
 8006c44:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 8006c48:	6939      	ldr	r1, [r7, #16]
 8006c4a:	683b      	ldr	r3, [r7, #0]
 8006c4c:	88db      	ldrh	r3, [r3, #6]
 8006c4e:	461a      	mov	r2, r3
 8006c50:	6878      	ldr	r0, [r7, #4]
 8006c52:	f001 fb32 	bl	80082ba <USBD_CtlPrepareRx>
      break;
 8006c56:	e072      	b.n	8006d3e <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006c5e:	689b      	ldr	r3, [r3, #8]
 8006c60:	683a      	ldr	r2, [r7, #0]
 8006c62:	7850      	ldrb	r0, [r2, #1]
 8006c64:	2200      	movs	r2, #0
 8006c66:	6839      	ldr	r1, [r7, #0]
 8006c68:	4798      	blx	r3
      break;
 8006c6a:	e068      	b.n	8006d3e <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006c6c:	683b      	ldr	r3, [r7, #0]
 8006c6e:	785b      	ldrb	r3, [r3, #1]
 8006c70:	2b0b      	cmp	r3, #11
 8006c72:	d852      	bhi.n	8006d1a <USBD_CDC_Setup+0x162>
 8006c74:	a201      	add	r2, pc, #4	; (adr r2, 8006c7c <USBD_CDC_Setup+0xc4>)
 8006c76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c7a:	bf00      	nop
 8006c7c:	08006cad 	.word	0x08006cad
 8006c80:	08006d29 	.word	0x08006d29
 8006c84:	08006d1b 	.word	0x08006d1b
 8006c88:	08006d1b 	.word	0x08006d1b
 8006c8c:	08006d1b 	.word	0x08006d1b
 8006c90:	08006d1b 	.word	0x08006d1b
 8006c94:	08006d1b 	.word	0x08006d1b
 8006c98:	08006d1b 	.word	0x08006d1b
 8006c9c:	08006d1b 	.word	0x08006d1b
 8006ca0:	08006d1b 	.word	0x08006d1b
 8006ca4:	08006cd7 	.word	0x08006cd7
 8006ca8:	08006d01 	.word	0x08006d01
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006cb2:	b2db      	uxtb	r3, r3
 8006cb4:	2b03      	cmp	r3, #3
 8006cb6:	d107      	bne.n	8006cc8 <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8006cb8:	f107 030a 	add.w	r3, r7, #10
 8006cbc:	2202      	movs	r2, #2
 8006cbe:	4619      	mov	r1, r3
 8006cc0:	6878      	ldr	r0, [r7, #4]
 8006cc2:	f001 face 	bl	8008262 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006cc6:	e032      	b.n	8006d2e <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8006cc8:	6839      	ldr	r1, [r7, #0]
 8006cca:	6878      	ldr	r0, [r7, #4]
 8006ccc:	f001 fa58 	bl	8008180 <USBD_CtlError>
            ret = USBD_FAIL;
 8006cd0:	2303      	movs	r3, #3
 8006cd2:	75fb      	strb	r3, [r7, #23]
          break;
 8006cd4:	e02b      	b.n	8006d2e <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006cdc:	b2db      	uxtb	r3, r3
 8006cde:	2b03      	cmp	r3, #3
 8006ce0:	d107      	bne.n	8006cf2 <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8006ce2:	f107 030d 	add.w	r3, r7, #13
 8006ce6:	2201      	movs	r2, #1
 8006ce8:	4619      	mov	r1, r3
 8006cea:	6878      	ldr	r0, [r7, #4]
 8006cec:	f001 fab9 	bl	8008262 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006cf0:	e01d      	b.n	8006d2e <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8006cf2:	6839      	ldr	r1, [r7, #0]
 8006cf4:	6878      	ldr	r0, [r7, #4]
 8006cf6:	f001 fa43 	bl	8008180 <USBD_CtlError>
            ret = USBD_FAIL;
 8006cfa:	2303      	movs	r3, #3
 8006cfc:	75fb      	strb	r3, [r7, #23]
          break;
 8006cfe:	e016      	b.n	8006d2e <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006d06:	b2db      	uxtb	r3, r3
 8006d08:	2b03      	cmp	r3, #3
 8006d0a:	d00f      	beq.n	8006d2c <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 8006d0c:	6839      	ldr	r1, [r7, #0]
 8006d0e:	6878      	ldr	r0, [r7, #4]
 8006d10:	f001 fa36 	bl	8008180 <USBD_CtlError>
            ret = USBD_FAIL;
 8006d14:	2303      	movs	r3, #3
 8006d16:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8006d18:	e008      	b.n	8006d2c <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8006d1a:	6839      	ldr	r1, [r7, #0]
 8006d1c:	6878      	ldr	r0, [r7, #4]
 8006d1e:	f001 fa2f 	bl	8008180 <USBD_CtlError>
          ret = USBD_FAIL;
 8006d22:	2303      	movs	r3, #3
 8006d24:	75fb      	strb	r3, [r7, #23]
          break;
 8006d26:	e002      	b.n	8006d2e <USBD_CDC_Setup+0x176>
          break;
 8006d28:	bf00      	nop
 8006d2a:	e008      	b.n	8006d3e <USBD_CDC_Setup+0x186>
          break;
 8006d2c:	bf00      	nop
      }
      break;
 8006d2e:	e006      	b.n	8006d3e <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 8006d30:	6839      	ldr	r1, [r7, #0]
 8006d32:	6878      	ldr	r0, [r7, #4]
 8006d34:	f001 fa24 	bl	8008180 <USBD_CtlError>
      ret = USBD_FAIL;
 8006d38:	2303      	movs	r3, #3
 8006d3a:	75fb      	strb	r3, [r7, #23]
      break;
 8006d3c:	bf00      	nop
  }

  return (uint8_t)ret;
 8006d3e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006d40:	4618      	mov	r0, r3
 8006d42:	3718      	adds	r7, #24
 8006d44:	46bd      	mov	sp, r7
 8006d46:	bd80      	pop	{r7, pc}

08006d48 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006d48:	b580      	push	{r7, lr}
 8006d4a:	b084      	sub	sp, #16
 8006d4c:	af00      	add	r7, sp, #0
 8006d4e:	6078      	str	r0, [r7, #4]
 8006d50:	460b      	mov	r3, r1
 8006d52:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8006d5a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006d62:	2b00      	cmp	r3, #0
 8006d64:	d101      	bne.n	8006d6a <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8006d66:	2303      	movs	r3, #3
 8006d68:	e04f      	b.n	8006e0a <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006d70:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8006d72:	78fa      	ldrb	r2, [r7, #3]
 8006d74:	6879      	ldr	r1, [r7, #4]
 8006d76:	4613      	mov	r3, r2
 8006d78:	009b      	lsls	r3, r3, #2
 8006d7a:	4413      	add	r3, r2
 8006d7c:	009b      	lsls	r3, r3, #2
 8006d7e:	440b      	add	r3, r1
 8006d80:	3318      	adds	r3, #24
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	2b00      	cmp	r3, #0
 8006d86:	d029      	beq.n	8006ddc <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8006d88:	78fa      	ldrb	r2, [r7, #3]
 8006d8a:	6879      	ldr	r1, [r7, #4]
 8006d8c:	4613      	mov	r3, r2
 8006d8e:	009b      	lsls	r3, r3, #2
 8006d90:	4413      	add	r3, r2
 8006d92:	009b      	lsls	r3, r3, #2
 8006d94:	440b      	add	r3, r1
 8006d96:	3318      	adds	r3, #24
 8006d98:	681a      	ldr	r2, [r3, #0]
 8006d9a:	78f9      	ldrb	r1, [r7, #3]
 8006d9c:	68f8      	ldr	r0, [r7, #12]
 8006d9e:	460b      	mov	r3, r1
 8006da0:	00db      	lsls	r3, r3, #3
 8006da2:	1a5b      	subs	r3, r3, r1
 8006da4:	009b      	lsls	r3, r3, #2
 8006da6:	4403      	add	r3, r0
 8006da8:	3344      	adds	r3, #68	; 0x44
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	fbb2 f1f3 	udiv	r1, r2, r3
 8006db0:	fb01 f303 	mul.w	r3, r1, r3
 8006db4:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8006db6:	2b00      	cmp	r3, #0
 8006db8:	d110      	bne.n	8006ddc <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 8006dba:	78fa      	ldrb	r2, [r7, #3]
 8006dbc:	6879      	ldr	r1, [r7, #4]
 8006dbe:	4613      	mov	r3, r2
 8006dc0:	009b      	lsls	r3, r3, #2
 8006dc2:	4413      	add	r3, r2
 8006dc4:	009b      	lsls	r3, r3, #2
 8006dc6:	440b      	add	r3, r1
 8006dc8:	3318      	adds	r3, #24
 8006dca:	2200      	movs	r2, #0
 8006dcc:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8006dce:	78f9      	ldrb	r1, [r7, #3]
 8006dd0:	2300      	movs	r3, #0
 8006dd2:	2200      	movs	r2, #0
 8006dd4:	6878      	ldr	r0, [r7, #4]
 8006dd6:	f001 ff7a 	bl	8008cce <USBD_LL_Transmit>
 8006dda:	e015      	b.n	8006e08 <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 8006ddc:	68bb      	ldr	r3, [r7, #8]
 8006dde:	2200      	movs	r2, #0
 8006de0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006dea:	691b      	ldr	r3, [r3, #16]
 8006dec:	2b00      	cmp	r3, #0
 8006dee:	d00b      	beq.n	8006e08 <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006df6:	691b      	ldr	r3, [r3, #16]
 8006df8:	68ba      	ldr	r2, [r7, #8]
 8006dfa:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8006dfe:	68ba      	ldr	r2, [r7, #8]
 8006e00:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8006e04:	78fa      	ldrb	r2, [r7, #3]
 8006e06:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8006e08:	2300      	movs	r3, #0
}
 8006e0a:	4618      	mov	r0, r3
 8006e0c:	3710      	adds	r7, #16
 8006e0e:	46bd      	mov	sp, r7
 8006e10:	bd80      	pop	{r7, pc}

08006e12 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006e12:	b580      	push	{r7, lr}
 8006e14:	b084      	sub	sp, #16
 8006e16:	af00      	add	r7, sp, #0
 8006e18:	6078      	str	r0, [r7, #4]
 8006e1a:	460b      	mov	r3, r1
 8006e1c:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006e24:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006e2c:	2b00      	cmp	r3, #0
 8006e2e:	d101      	bne.n	8006e34 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8006e30:	2303      	movs	r3, #3
 8006e32:	e015      	b.n	8006e60 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8006e34:	78fb      	ldrb	r3, [r7, #3]
 8006e36:	4619      	mov	r1, r3
 8006e38:	6878      	ldr	r0, [r7, #4]
 8006e3a:	f001 ff8a 	bl	8008d52 <USBD_LL_GetRxDataSize>
 8006e3e:	4602      	mov	r2, r0
 8006e40:	68fb      	ldr	r3, [r7, #12]
 8006e42:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006e4c:	68db      	ldr	r3, [r3, #12]
 8006e4e:	68fa      	ldr	r2, [r7, #12]
 8006e50:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8006e54:	68fa      	ldr	r2, [r7, #12]
 8006e56:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8006e5a:	4611      	mov	r1, r2
 8006e5c:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8006e5e:	2300      	movs	r3, #0
}
 8006e60:	4618      	mov	r0, r3
 8006e62:	3710      	adds	r7, #16
 8006e64:	46bd      	mov	sp, r7
 8006e66:	bd80      	pop	{r7, pc}

08006e68 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8006e68:	b580      	push	{r7, lr}
 8006e6a:	b084      	sub	sp, #16
 8006e6c:	af00      	add	r7, sp, #0
 8006e6e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006e76:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8006e78:	68fb      	ldr	r3, [r7, #12]
 8006e7a:	2b00      	cmp	r3, #0
 8006e7c:	d101      	bne.n	8006e82 <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 8006e7e:	2303      	movs	r3, #3
 8006e80:	e01b      	b.n	8006eba <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006e88:	2b00      	cmp	r3, #0
 8006e8a:	d015      	beq.n	8006eb8 <USBD_CDC_EP0_RxReady+0x50>
 8006e8c:	68fb      	ldr	r3, [r7, #12]
 8006e8e:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8006e92:	2bff      	cmp	r3, #255	; 0xff
 8006e94:	d010      	beq.n	8006eb8 <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006e9c:	689b      	ldr	r3, [r3, #8]
 8006e9e:	68fa      	ldr	r2, [r7, #12]
 8006ea0:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 8006ea4:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8006ea6:	68fa      	ldr	r2, [r7, #12]
 8006ea8:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8006eac:	b292      	uxth	r2, r2
 8006eae:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8006eb0:	68fb      	ldr	r3, [r7, #12]
 8006eb2:	22ff      	movs	r2, #255	; 0xff
 8006eb4:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8006eb8:	2300      	movs	r3, #0
}
 8006eba:	4618      	mov	r0, r3
 8006ebc:	3710      	adds	r7, #16
 8006ebe:	46bd      	mov	sp, r7
 8006ec0:	bd80      	pop	{r7, pc}
	...

08006ec4 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8006ec4:	b480      	push	{r7}
 8006ec6:	b083      	sub	sp, #12
 8006ec8:	af00      	add	r7, sp, #0
 8006eca:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	2243      	movs	r2, #67	; 0x43
 8006ed0:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 8006ed2:	4b03      	ldr	r3, [pc, #12]	; (8006ee0 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8006ed4:	4618      	mov	r0, r3
 8006ed6:	370c      	adds	r7, #12
 8006ed8:	46bd      	mov	sp, r7
 8006eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ede:	4770      	bx	lr
 8006ee0:	240000a4 	.word	0x240000a4

08006ee4 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8006ee4:	b480      	push	{r7}
 8006ee6:	b083      	sub	sp, #12
 8006ee8:	af00      	add	r7, sp, #0
 8006eea:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	2243      	movs	r2, #67	; 0x43
 8006ef0:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 8006ef2:	4b03      	ldr	r3, [pc, #12]	; (8006f00 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8006ef4:	4618      	mov	r0, r3
 8006ef6:	370c      	adds	r7, #12
 8006ef8:	46bd      	mov	sp, r7
 8006efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006efe:	4770      	bx	lr
 8006f00:	24000060 	.word	0x24000060

08006f04 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8006f04:	b480      	push	{r7}
 8006f06:	b083      	sub	sp, #12
 8006f08:	af00      	add	r7, sp, #0
 8006f0a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	2243      	movs	r2, #67	; 0x43
 8006f10:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 8006f12:	4b03      	ldr	r3, [pc, #12]	; (8006f20 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8006f14:	4618      	mov	r0, r3
 8006f16:	370c      	adds	r7, #12
 8006f18:	46bd      	mov	sp, r7
 8006f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f1e:	4770      	bx	lr
 8006f20:	240000e8 	.word	0x240000e8

08006f24 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8006f24:	b480      	push	{r7}
 8006f26:	b083      	sub	sp, #12
 8006f28:	af00      	add	r7, sp, #0
 8006f2a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	220a      	movs	r2, #10
 8006f30:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8006f32:	4b03      	ldr	r3, [pc, #12]	; (8006f40 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8006f34:	4618      	mov	r0, r3
 8006f36:	370c      	adds	r7, #12
 8006f38:	46bd      	mov	sp, r7
 8006f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f3e:	4770      	bx	lr
 8006f40:	2400001c 	.word	0x2400001c

08006f44 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8006f44:	b480      	push	{r7}
 8006f46:	b083      	sub	sp, #12
 8006f48:	af00      	add	r7, sp, #0
 8006f4a:	6078      	str	r0, [r7, #4]
 8006f4c:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8006f4e:	683b      	ldr	r3, [r7, #0]
 8006f50:	2b00      	cmp	r3, #0
 8006f52:	d101      	bne.n	8006f58 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8006f54:	2303      	movs	r3, #3
 8006f56:	e004      	b.n	8006f62 <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	683a      	ldr	r2, [r7, #0]
 8006f5c:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 8006f60:	2300      	movs	r3, #0
}
 8006f62:	4618      	mov	r0, r3
 8006f64:	370c      	adds	r7, #12
 8006f66:	46bd      	mov	sp, r7
 8006f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f6c:	4770      	bx	lr

08006f6e <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8006f6e:	b480      	push	{r7}
 8006f70:	b087      	sub	sp, #28
 8006f72:	af00      	add	r7, sp, #0
 8006f74:	60f8      	str	r0, [r7, #12]
 8006f76:	60b9      	str	r1, [r7, #8]
 8006f78:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006f7a:	68fb      	ldr	r3, [r7, #12]
 8006f7c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006f80:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 8006f82:	697b      	ldr	r3, [r7, #20]
 8006f84:	2b00      	cmp	r3, #0
 8006f86:	d101      	bne.n	8006f8c <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8006f88:	2303      	movs	r3, #3
 8006f8a:	e008      	b.n	8006f9e <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 8006f8c:	697b      	ldr	r3, [r7, #20]
 8006f8e:	68ba      	ldr	r2, [r7, #8]
 8006f90:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8006f94:	697b      	ldr	r3, [r7, #20]
 8006f96:	687a      	ldr	r2, [r7, #4]
 8006f98:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8006f9c:	2300      	movs	r3, #0
}
 8006f9e:	4618      	mov	r0, r3
 8006fa0:	371c      	adds	r7, #28
 8006fa2:	46bd      	mov	sp, r7
 8006fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fa8:	4770      	bx	lr

08006faa <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8006faa:	b480      	push	{r7}
 8006fac:	b085      	sub	sp, #20
 8006fae:	af00      	add	r7, sp, #0
 8006fb0:	6078      	str	r0, [r7, #4]
 8006fb2:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006fba:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8006fbc:	68fb      	ldr	r3, [r7, #12]
 8006fbe:	2b00      	cmp	r3, #0
 8006fc0:	d101      	bne.n	8006fc6 <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 8006fc2:	2303      	movs	r3, #3
 8006fc4:	e004      	b.n	8006fd0 <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 8006fc6:	68fb      	ldr	r3, [r7, #12]
 8006fc8:	683a      	ldr	r2, [r7, #0]
 8006fca:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8006fce:	2300      	movs	r3, #0
}
 8006fd0:	4618      	mov	r0, r3
 8006fd2:	3714      	adds	r7, #20
 8006fd4:	46bd      	mov	sp, r7
 8006fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fda:	4770      	bx	lr

08006fdc <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8006fdc:	b580      	push	{r7, lr}
 8006fde:	b084      	sub	sp, #16
 8006fe0:	af00      	add	r7, sp, #0
 8006fe2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006fea:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 8006fec:	2301      	movs	r3, #1
 8006fee:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006ff6:	2b00      	cmp	r3, #0
 8006ff8:	d101      	bne.n	8006ffe <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8006ffa:	2303      	movs	r3, #3
 8006ffc:	e01a      	b.n	8007034 <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 8006ffe:	68bb      	ldr	r3, [r7, #8]
 8007000:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8007004:	2b00      	cmp	r3, #0
 8007006:	d114      	bne.n	8007032 <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8007008:	68bb      	ldr	r3, [r7, #8]
 800700a:	2201      	movs	r2, #1
 800700c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8007010:	68bb      	ldr	r3, [r7, #8]
 8007012:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 800701a:	68bb      	ldr	r3, [r7, #8]
 800701c:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8007020:	68bb      	ldr	r3, [r7, #8]
 8007022:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8007026:	2181      	movs	r1, #129	; 0x81
 8007028:	6878      	ldr	r0, [r7, #4]
 800702a:	f001 fe50 	bl	8008cce <USBD_LL_Transmit>

    ret = USBD_OK;
 800702e:	2300      	movs	r3, #0
 8007030:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8007032:	7bfb      	ldrb	r3, [r7, #15]
}
 8007034:	4618      	mov	r0, r3
 8007036:	3710      	adds	r7, #16
 8007038:	46bd      	mov	sp, r7
 800703a:	bd80      	pop	{r7, pc}

0800703c <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800703c:	b580      	push	{r7, lr}
 800703e:	b084      	sub	sp, #16
 8007040:	af00      	add	r7, sp, #0
 8007042:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800704a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007052:	2b00      	cmp	r3, #0
 8007054:	d101      	bne.n	800705a <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8007056:	2303      	movs	r3, #3
 8007058:	e016      	b.n	8007088 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	7c1b      	ldrb	r3, [r3, #16]
 800705e:	2b00      	cmp	r3, #0
 8007060:	d109      	bne.n	8007076 <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8007062:	68fb      	ldr	r3, [r7, #12]
 8007064:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007068:	f44f 7300 	mov.w	r3, #512	; 0x200
 800706c:	2101      	movs	r1, #1
 800706e:	6878      	ldr	r0, [r7, #4]
 8007070:	f001 fe4e 	bl	8008d10 <USBD_LL_PrepareReceive>
 8007074:	e007      	b.n	8007086 <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8007076:	68fb      	ldr	r3, [r7, #12]
 8007078:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800707c:	2340      	movs	r3, #64	; 0x40
 800707e:	2101      	movs	r1, #1
 8007080:	6878      	ldr	r0, [r7, #4]
 8007082:	f001 fe45 	bl	8008d10 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8007086:	2300      	movs	r3, #0
}
 8007088:	4618      	mov	r0, r3
 800708a:	3710      	adds	r7, #16
 800708c:	46bd      	mov	sp, r7
 800708e:	bd80      	pop	{r7, pc}

08007090 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8007090:	b580      	push	{r7, lr}
 8007092:	b086      	sub	sp, #24
 8007094:	af00      	add	r7, sp, #0
 8007096:	60f8      	str	r0, [r7, #12]
 8007098:	60b9      	str	r1, [r7, #8]
 800709a:	4613      	mov	r3, r2
 800709c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800709e:	68fb      	ldr	r3, [r7, #12]
 80070a0:	2b00      	cmp	r3, #0
 80070a2:	d101      	bne.n	80070a8 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 80070a4:	2303      	movs	r3, #3
 80070a6:	e01f      	b.n	80070e8 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 80070a8:	68fb      	ldr	r3, [r7, #12]
 80070aa:	2200      	movs	r2, #0
 80070ac:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 80070b0:	68fb      	ldr	r3, [r7, #12]
 80070b2:	2200      	movs	r2, #0
 80070b4:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 80070b8:	68fb      	ldr	r3, [r7, #12]
 80070ba:	2200      	movs	r2, #0
 80070bc:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80070c0:	68bb      	ldr	r3, [r7, #8]
 80070c2:	2b00      	cmp	r3, #0
 80070c4:	d003      	beq.n	80070ce <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 80070c6:	68fb      	ldr	r3, [r7, #12]
 80070c8:	68ba      	ldr	r2, [r7, #8]
 80070ca:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80070ce:	68fb      	ldr	r3, [r7, #12]
 80070d0:	2201      	movs	r2, #1
 80070d2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 80070d6:	68fb      	ldr	r3, [r7, #12]
 80070d8:	79fa      	ldrb	r2, [r7, #7]
 80070da:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80070dc:	68f8      	ldr	r0, [r7, #12]
 80070de:	f001 fcbd 	bl	8008a5c <USBD_LL_Init>
 80070e2:	4603      	mov	r3, r0
 80070e4:	75fb      	strb	r3, [r7, #23]

  return ret;
 80070e6:	7dfb      	ldrb	r3, [r7, #23]
}
 80070e8:	4618      	mov	r0, r3
 80070ea:	3718      	adds	r7, #24
 80070ec:	46bd      	mov	sp, r7
 80070ee:	bd80      	pop	{r7, pc}

080070f0 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80070f0:	b580      	push	{r7, lr}
 80070f2:	b084      	sub	sp, #16
 80070f4:	af00      	add	r7, sp, #0
 80070f6:	6078      	str	r0, [r7, #4]
 80070f8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80070fa:	2300      	movs	r3, #0
 80070fc:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80070fe:	683b      	ldr	r3, [r7, #0]
 8007100:	2b00      	cmp	r3, #0
 8007102:	d101      	bne.n	8007108 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8007104:	2303      	movs	r3, #3
 8007106:	e016      	b.n	8007136 <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	683a      	ldr	r2, [r7, #0]
 800710c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007116:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007118:	2b00      	cmp	r3, #0
 800711a:	d00b      	beq.n	8007134 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007122:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007124:	f107 020e 	add.w	r2, r7, #14
 8007128:	4610      	mov	r0, r2
 800712a:	4798      	blx	r3
 800712c:	4602      	mov	r2, r0
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 8007134:	2300      	movs	r3, #0
}
 8007136:	4618      	mov	r0, r3
 8007138:	3710      	adds	r7, #16
 800713a:	46bd      	mov	sp, r7
 800713c:	bd80      	pop	{r7, pc}

0800713e <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800713e:	b580      	push	{r7, lr}
 8007140:	b082      	sub	sp, #8
 8007142:	af00      	add	r7, sp, #0
 8007144:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8007146:	6878      	ldr	r0, [r7, #4]
 8007148:	f001 fcd8 	bl	8008afc <USBD_LL_Start>
 800714c:	4603      	mov	r3, r0
}
 800714e:	4618      	mov	r0, r3
 8007150:	3708      	adds	r7, #8
 8007152:	46bd      	mov	sp, r7
 8007154:	bd80      	pop	{r7, pc}

08007156 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8007156:	b480      	push	{r7}
 8007158:	b083      	sub	sp, #12
 800715a:	af00      	add	r7, sp, #0
 800715c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800715e:	2300      	movs	r3, #0
}
 8007160:	4618      	mov	r0, r3
 8007162:	370c      	adds	r7, #12
 8007164:	46bd      	mov	sp, r7
 8007166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800716a:	4770      	bx	lr

0800716c <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800716c:	b580      	push	{r7, lr}
 800716e:	b084      	sub	sp, #16
 8007170:	af00      	add	r7, sp, #0
 8007172:	6078      	str	r0, [r7, #4]
 8007174:	460b      	mov	r3, r1
 8007176:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8007178:	2303      	movs	r3, #3
 800717a:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007182:	2b00      	cmp	r3, #0
 8007184:	d009      	beq.n	800719a <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	78fa      	ldrb	r2, [r7, #3]
 8007190:	4611      	mov	r1, r2
 8007192:	6878      	ldr	r0, [r7, #4]
 8007194:	4798      	blx	r3
 8007196:	4603      	mov	r3, r0
 8007198:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800719a:	7bfb      	ldrb	r3, [r7, #15]
}
 800719c:	4618      	mov	r0, r3
 800719e:	3710      	adds	r7, #16
 80071a0:	46bd      	mov	sp, r7
 80071a2:	bd80      	pop	{r7, pc}

080071a4 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80071a4:	b580      	push	{r7, lr}
 80071a6:	b082      	sub	sp, #8
 80071a8:	af00      	add	r7, sp, #0
 80071aa:	6078      	str	r0, [r7, #4]
 80071ac:	460b      	mov	r3, r1
 80071ae:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80071b6:	2b00      	cmp	r3, #0
 80071b8:	d007      	beq.n	80071ca <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80071c0:	685b      	ldr	r3, [r3, #4]
 80071c2:	78fa      	ldrb	r2, [r7, #3]
 80071c4:	4611      	mov	r1, r2
 80071c6:	6878      	ldr	r0, [r7, #4]
 80071c8:	4798      	blx	r3
  }

  return USBD_OK;
 80071ca:	2300      	movs	r3, #0
}
 80071cc:	4618      	mov	r0, r3
 80071ce:	3708      	adds	r7, #8
 80071d0:	46bd      	mov	sp, r7
 80071d2:	bd80      	pop	{r7, pc}

080071d4 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80071d4:	b580      	push	{r7, lr}
 80071d6:	b084      	sub	sp, #16
 80071d8:	af00      	add	r7, sp, #0
 80071da:	6078      	str	r0, [r7, #4]
 80071dc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80071e4:	6839      	ldr	r1, [r7, #0]
 80071e6:	4618      	mov	r0, r3
 80071e8:	f000 ff90 	bl	800810c <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	2201      	movs	r2, #1
 80071f0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 80071fa:	461a      	mov	r2, r3
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8007208:	f003 031f 	and.w	r3, r3, #31
 800720c:	2b02      	cmp	r3, #2
 800720e:	d01a      	beq.n	8007246 <USBD_LL_SetupStage+0x72>
 8007210:	2b02      	cmp	r3, #2
 8007212:	d822      	bhi.n	800725a <USBD_LL_SetupStage+0x86>
 8007214:	2b00      	cmp	r3, #0
 8007216:	d002      	beq.n	800721e <USBD_LL_SetupStage+0x4a>
 8007218:	2b01      	cmp	r3, #1
 800721a:	d00a      	beq.n	8007232 <USBD_LL_SetupStage+0x5e>
 800721c:	e01d      	b.n	800725a <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007224:	4619      	mov	r1, r3
 8007226:	6878      	ldr	r0, [r7, #4]
 8007228:	f000 fa62 	bl	80076f0 <USBD_StdDevReq>
 800722c:	4603      	mov	r3, r0
 800722e:	73fb      	strb	r3, [r7, #15]
      break;
 8007230:	e020      	b.n	8007274 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007238:	4619      	mov	r1, r3
 800723a:	6878      	ldr	r0, [r7, #4]
 800723c:	f000 fac6 	bl	80077cc <USBD_StdItfReq>
 8007240:	4603      	mov	r3, r0
 8007242:	73fb      	strb	r3, [r7, #15]
      break;
 8007244:	e016      	b.n	8007274 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800724c:	4619      	mov	r1, r3
 800724e:	6878      	ldr	r0, [r7, #4]
 8007250:	f000 fb05 	bl	800785e <USBD_StdEPReq>
 8007254:	4603      	mov	r3, r0
 8007256:	73fb      	strb	r3, [r7, #15]
      break;
 8007258:	e00c      	b.n	8007274 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8007260:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8007264:	b2db      	uxtb	r3, r3
 8007266:	4619      	mov	r1, r3
 8007268:	6878      	ldr	r0, [r7, #4]
 800726a:	f001 fca7 	bl	8008bbc <USBD_LL_StallEP>
 800726e:	4603      	mov	r3, r0
 8007270:	73fb      	strb	r3, [r7, #15]
      break;
 8007272:	bf00      	nop
  }

  return ret;
 8007274:	7bfb      	ldrb	r3, [r7, #15]
}
 8007276:	4618      	mov	r0, r3
 8007278:	3710      	adds	r7, #16
 800727a:	46bd      	mov	sp, r7
 800727c:	bd80      	pop	{r7, pc}

0800727e <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800727e:	b580      	push	{r7, lr}
 8007280:	b086      	sub	sp, #24
 8007282:	af00      	add	r7, sp, #0
 8007284:	60f8      	str	r0, [r7, #12]
 8007286:	460b      	mov	r3, r1
 8007288:	607a      	str	r2, [r7, #4]
 800728a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800728c:	7afb      	ldrb	r3, [r7, #11]
 800728e:	2b00      	cmp	r3, #0
 8007290:	d138      	bne.n	8007304 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 8007292:	68fb      	ldr	r3, [r7, #12]
 8007294:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8007298:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800729a:	68fb      	ldr	r3, [r7, #12]
 800729c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80072a0:	2b03      	cmp	r3, #3
 80072a2:	d14a      	bne.n	800733a <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 80072a4:	693b      	ldr	r3, [r7, #16]
 80072a6:	689a      	ldr	r2, [r3, #8]
 80072a8:	693b      	ldr	r3, [r7, #16]
 80072aa:	68db      	ldr	r3, [r3, #12]
 80072ac:	429a      	cmp	r2, r3
 80072ae:	d913      	bls.n	80072d8 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80072b0:	693b      	ldr	r3, [r7, #16]
 80072b2:	689a      	ldr	r2, [r3, #8]
 80072b4:	693b      	ldr	r3, [r7, #16]
 80072b6:	68db      	ldr	r3, [r3, #12]
 80072b8:	1ad2      	subs	r2, r2, r3
 80072ba:	693b      	ldr	r3, [r7, #16]
 80072bc:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 80072be:	693b      	ldr	r3, [r7, #16]
 80072c0:	68da      	ldr	r2, [r3, #12]
 80072c2:	693b      	ldr	r3, [r7, #16]
 80072c4:	689b      	ldr	r3, [r3, #8]
 80072c6:	4293      	cmp	r3, r2
 80072c8:	bf28      	it	cs
 80072ca:	4613      	movcs	r3, r2
 80072cc:	461a      	mov	r2, r3
 80072ce:	6879      	ldr	r1, [r7, #4]
 80072d0:	68f8      	ldr	r0, [r7, #12]
 80072d2:	f001 f80f 	bl	80082f4 <USBD_CtlContinueRx>
 80072d6:	e030      	b.n	800733a <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80072d8:	68fb      	ldr	r3, [r7, #12]
 80072da:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80072de:	b2db      	uxtb	r3, r3
 80072e0:	2b03      	cmp	r3, #3
 80072e2:	d10b      	bne.n	80072fc <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 80072e4:	68fb      	ldr	r3, [r7, #12]
 80072e6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80072ea:	691b      	ldr	r3, [r3, #16]
 80072ec:	2b00      	cmp	r3, #0
 80072ee:	d005      	beq.n	80072fc <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 80072f0:	68fb      	ldr	r3, [r7, #12]
 80072f2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80072f6:	691b      	ldr	r3, [r3, #16]
 80072f8:	68f8      	ldr	r0, [r7, #12]
 80072fa:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 80072fc:	68f8      	ldr	r0, [r7, #12]
 80072fe:	f001 f80a 	bl	8008316 <USBD_CtlSendStatus>
 8007302:	e01a      	b.n	800733a <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007304:	68fb      	ldr	r3, [r7, #12]
 8007306:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800730a:	b2db      	uxtb	r3, r3
 800730c:	2b03      	cmp	r3, #3
 800730e:	d114      	bne.n	800733a <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 8007310:	68fb      	ldr	r3, [r7, #12]
 8007312:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007316:	699b      	ldr	r3, [r3, #24]
 8007318:	2b00      	cmp	r3, #0
 800731a:	d00e      	beq.n	800733a <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 800731c:	68fb      	ldr	r3, [r7, #12]
 800731e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007322:	699b      	ldr	r3, [r3, #24]
 8007324:	7afa      	ldrb	r2, [r7, #11]
 8007326:	4611      	mov	r1, r2
 8007328:	68f8      	ldr	r0, [r7, #12]
 800732a:	4798      	blx	r3
 800732c:	4603      	mov	r3, r0
 800732e:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8007330:	7dfb      	ldrb	r3, [r7, #23]
 8007332:	2b00      	cmp	r3, #0
 8007334:	d001      	beq.n	800733a <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 8007336:	7dfb      	ldrb	r3, [r7, #23]
 8007338:	e000      	b.n	800733c <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 800733a:	2300      	movs	r3, #0
}
 800733c:	4618      	mov	r0, r3
 800733e:	3718      	adds	r7, #24
 8007340:	46bd      	mov	sp, r7
 8007342:	bd80      	pop	{r7, pc}

08007344 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8007344:	b580      	push	{r7, lr}
 8007346:	b086      	sub	sp, #24
 8007348:	af00      	add	r7, sp, #0
 800734a:	60f8      	str	r0, [r7, #12]
 800734c:	460b      	mov	r3, r1
 800734e:	607a      	str	r2, [r7, #4]
 8007350:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8007352:	7afb      	ldrb	r3, [r7, #11]
 8007354:	2b00      	cmp	r3, #0
 8007356:	d16b      	bne.n	8007430 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 8007358:	68fb      	ldr	r3, [r7, #12]
 800735a:	3314      	adds	r3, #20
 800735c:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800735e:	68fb      	ldr	r3, [r7, #12]
 8007360:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007364:	2b02      	cmp	r3, #2
 8007366:	d156      	bne.n	8007416 <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 8007368:	693b      	ldr	r3, [r7, #16]
 800736a:	689a      	ldr	r2, [r3, #8]
 800736c:	693b      	ldr	r3, [r7, #16]
 800736e:	68db      	ldr	r3, [r3, #12]
 8007370:	429a      	cmp	r2, r3
 8007372:	d914      	bls.n	800739e <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8007374:	693b      	ldr	r3, [r7, #16]
 8007376:	689a      	ldr	r2, [r3, #8]
 8007378:	693b      	ldr	r3, [r7, #16]
 800737a:	68db      	ldr	r3, [r3, #12]
 800737c:	1ad2      	subs	r2, r2, r3
 800737e:	693b      	ldr	r3, [r7, #16]
 8007380:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8007382:	693b      	ldr	r3, [r7, #16]
 8007384:	689b      	ldr	r3, [r3, #8]
 8007386:	461a      	mov	r2, r3
 8007388:	6879      	ldr	r1, [r7, #4]
 800738a:	68f8      	ldr	r0, [r7, #12]
 800738c:	f000 ff84 	bl	8008298 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007390:	2300      	movs	r3, #0
 8007392:	2200      	movs	r2, #0
 8007394:	2100      	movs	r1, #0
 8007396:	68f8      	ldr	r0, [r7, #12]
 8007398:	f001 fcba 	bl	8008d10 <USBD_LL_PrepareReceive>
 800739c:	e03b      	b.n	8007416 <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800739e:	693b      	ldr	r3, [r7, #16]
 80073a0:	68da      	ldr	r2, [r3, #12]
 80073a2:	693b      	ldr	r3, [r7, #16]
 80073a4:	689b      	ldr	r3, [r3, #8]
 80073a6:	429a      	cmp	r2, r3
 80073a8:	d11c      	bne.n	80073e4 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 80073aa:	693b      	ldr	r3, [r7, #16]
 80073ac:	685a      	ldr	r2, [r3, #4]
 80073ae:	693b      	ldr	r3, [r7, #16]
 80073b0:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 80073b2:	429a      	cmp	r2, r3
 80073b4:	d316      	bcc.n	80073e4 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 80073b6:	693b      	ldr	r3, [r7, #16]
 80073b8:	685a      	ldr	r2, [r3, #4]
 80073ba:	68fb      	ldr	r3, [r7, #12]
 80073bc:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 80073c0:	429a      	cmp	r2, r3
 80073c2:	d20f      	bcs.n	80073e4 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 80073c4:	2200      	movs	r2, #0
 80073c6:	2100      	movs	r1, #0
 80073c8:	68f8      	ldr	r0, [r7, #12]
 80073ca:	f000 ff65 	bl	8008298 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80073ce:	68fb      	ldr	r3, [r7, #12]
 80073d0:	2200      	movs	r2, #0
 80073d2:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80073d6:	2300      	movs	r3, #0
 80073d8:	2200      	movs	r2, #0
 80073da:	2100      	movs	r1, #0
 80073dc:	68f8      	ldr	r0, [r7, #12]
 80073de:	f001 fc97 	bl	8008d10 <USBD_LL_PrepareReceive>
 80073e2:	e018      	b.n	8007416 <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80073e4:	68fb      	ldr	r3, [r7, #12]
 80073e6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80073ea:	b2db      	uxtb	r3, r3
 80073ec:	2b03      	cmp	r3, #3
 80073ee:	d10b      	bne.n	8007408 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 80073f0:	68fb      	ldr	r3, [r7, #12]
 80073f2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80073f6:	68db      	ldr	r3, [r3, #12]
 80073f8:	2b00      	cmp	r3, #0
 80073fa:	d005      	beq.n	8007408 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 80073fc:	68fb      	ldr	r3, [r7, #12]
 80073fe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007402:	68db      	ldr	r3, [r3, #12]
 8007404:	68f8      	ldr	r0, [r7, #12]
 8007406:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8007408:	2180      	movs	r1, #128	; 0x80
 800740a:	68f8      	ldr	r0, [r7, #12]
 800740c:	f001 fbd6 	bl	8008bbc <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8007410:	68f8      	ldr	r0, [r7, #12]
 8007412:	f000 ff93 	bl	800833c <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8007416:	68fb      	ldr	r3, [r7, #12]
 8007418:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800741c:	2b01      	cmp	r3, #1
 800741e:	d122      	bne.n	8007466 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 8007420:	68f8      	ldr	r0, [r7, #12]
 8007422:	f7ff fe98 	bl	8007156 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8007426:	68fb      	ldr	r3, [r7, #12]
 8007428:	2200      	movs	r2, #0
 800742a:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800742e:	e01a      	b.n	8007466 <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007430:	68fb      	ldr	r3, [r7, #12]
 8007432:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007436:	b2db      	uxtb	r3, r3
 8007438:	2b03      	cmp	r3, #3
 800743a:	d114      	bne.n	8007466 <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 800743c:	68fb      	ldr	r3, [r7, #12]
 800743e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007442:	695b      	ldr	r3, [r3, #20]
 8007444:	2b00      	cmp	r3, #0
 8007446:	d00e      	beq.n	8007466 <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8007448:	68fb      	ldr	r3, [r7, #12]
 800744a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800744e:	695b      	ldr	r3, [r3, #20]
 8007450:	7afa      	ldrb	r2, [r7, #11]
 8007452:	4611      	mov	r1, r2
 8007454:	68f8      	ldr	r0, [r7, #12]
 8007456:	4798      	blx	r3
 8007458:	4603      	mov	r3, r0
 800745a:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800745c:	7dfb      	ldrb	r3, [r7, #23]
 800745e:	2b00      	cmp	r3, #0
 8007460:	d001      	beq.n	8007466 <USBD_LL_DataInStage+0x122>
        {
          return ret;
 8007462:	7dfb      	ldrb	r3, [r7, #23]
 8007464:	e000      	b.n	8007468 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 8007466:	2300      	movs	r3, #0
}
 8007468:	4618      	mov	r0, r3
 800746a:	3718      	adds	r7, #24
 800746c:	46bd      	mov	sp, r7
 800746e:	bd80      	pop	{r7, pc}

08007470 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8007470:	b580      	push	{r7, lr}
 8007472:	b082      	sub	sp, #8
 8007474:	af00      	add	r7, sp, #0
 8007476:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	2201      	movs	r2, #1
 800747c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	2200      	movs	r2, #0
 8007484:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	2200      	movs	r2, #0
 800748c:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	2200      	movs	r2, #0
 8007492:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800749c:	2b00      	cmp	r3, #0
 800749e:	d101      	bne.n	80074a4 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 80074a0:	2303      	movs	r3, #3
 80074a2:	e02f      	b.n	8007504 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80074aa:	2b00      	cmp	r3, #0
 80074ac:	d00f      	beq.n	80074ce <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80074b4:	685b      	ldr	r3, [r3, #4]
 80074b6:	2b00      	cmp	r3, #0
 80074b8:	d009      	beq.n	80074ce <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80074c0:	685b      	ldr	r3, [r3, #4]
 80074c2:	687a      	ldr	r2, [r7, #4]
 80074c4:	6852      	ldr	r2, [r2, #4]
 80074c6:	b2d2      	uxtb	r2, r2
 80074c8:	4611      	mov	r1, r2
 80074ca:	6878      	ldr	r0, [r7, #4]
 80074cc:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80074ce:	2340      	movs	r3, #64	; 0x40
 80074d0:	2200      	movs	r2, #0
 80074d2:	2100      	movs	r1, #0
 80074d4:	6878      	ldr	r0, [r7, #4]
 80074d6:	f001 fb2c 	bl	8008b32 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	2201      	movs	r2, #1
 80074de:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	2240      	movs	r2, #64	; 0x40
 80074e6:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80074ea:	2340      	movs	r3, #64	; 0x40
 80074ec:	2200      	movs	r2, #0
 80074ee:	2180      	movs	r1, #128	; 0x80
 80074f0:	6878      	ldr	r0, [r7, #4]
 80074f2:	f001 fb1e 	bl	8008b32 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	2201      	movs	r2, #1
 80074fa:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	2240      	movs	r2, #64	; 0x40
 8007500:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 8007502:	2300      	movs	r3, #0
}
 8007504:	4618      	mov	r0, r3
 8007506:	3708      	adds	r7, #8
 8007508:	46bd      	mov	sp, r7
 800750a:	bd80      	pop	{r7, pc}

0800750c <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800750c:	b480      	push	{r7}
 800750e:	b083      	sub	sp, #12
 8007510:	af00      	add	r7, sp, #0
 8007512:	6078      	str	r0, [r7, #4]
 8007514:	460b      	mov	r3, r1
 8007516:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	78fa      	ldrb	r2, [r7, #3]
 800751c:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800751e:	2300      	movs	r3, #0
}
 8007520:	4618      	mov	r0, r3
 8007522:	370c      	adds	r7, #12
 8007524:	46bd      	mov	sp, r7
 8007526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800752a:	4770      	bx	lr

0800752c <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800752c:	b480      	push	{r7}
 800752e:	b083      	sub	sp, #12
 8007530:	af00      	add	r7, sp, #0
 8007532:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800753a:	b2da      	uxtb	r2, r3
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	2204      	movs	r2, #4
 8007546:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800754a:	2300      	movs	r3, #0
}
 800754c:	4618      	mov	r0, r3
 800754e:	370c      	adds	r7, #12
 8007550:	46bd      	mov	sp, r7
 8007552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007556:	4770      	bx	lr

08007558 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8007558:	b480      	push	{r7}
 800755a:	b083      	sub	sp, #12
 800755c:	af00      	add	r7, sp, #0
 800755e:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007566:	b2db      	uxtb	r3, r3
 8007568:	2b04      	cmp	r3, #4
 800756a:	d106      	bne.n	800757a <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8007572:	b2da      	uxtb	r2, r3
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800757a:	2300      	movs	r3, #0
}
 800757c:	4618      	mov	r0, r3
 800757e:	370c      	adds	r7, #12
 8007580:	46bd      	mov	sp, r7
 8007582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007586:	4770      	bx	lr

08007588 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8007588:	b580      	push	{r7, lr}
 800758a:	b082      	sub	sp, #8
 800758c:	af00      	add	r7, sp, #0
 800758e:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007596:	2b00      	cmp	r3, #0
 8007598:	d101      	bne.n	800759e <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 800759a:	2303      	movs	r3, #3
 800759c:	e012      	b.n	80075c4 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80075a4:	b2db      	uxtb	r3, r3
 80075a6:	2b03      	cmp	r3, #3
 80075a8:	d10b      	bne.n	80075c2 <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80075b0:	69db      	ldr	r3, [r3, #28]
 80075b2:	2b00      	cmp	r3, #0
 80075b4:	d005      	beq.n	80075c2 <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80075bc:	69db      	ldr	r3, [r3, #28]
 80075be:	6878      	ldr	r0, [r7, #4]
 80075c0:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80075c2:	2300      	movs	r3, #0
}
 80075c4:	4618      	mov	r0, r3
 80075c6:	3708      	adds	r7, #8
 80075c8:	46bd      	mov	sp, r7
 80075ca:	bd80      	pop	{r7, pc}

080075cc <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 80075cc:	b580      	push	{r7, lr}
 80075ce:	b082      	sub	sp, #8
 80075d0:	af00      	add	r7, sp, #0
 80075d2:	6078      	str	r0, [r7, #4]
 80075d4:	460b      	mov	r3, r1
 80075d6:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80075de:	2b00      	cmp	r3, #0
 80075e0:	d101      	bne.n	80075e6 <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 80075e2:	2303      	movs	r3, #3
 80075e4:	e014      	b.n	8007610 <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80075ec:	b2db      	uxtb	r3, r3
 80075ee:	2b03      	cmp	r3, #3
 80075f0:	d10d      	bne.n	800760e <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80075f8:	6a1b      	ldr	r3, [r3, #32]
 80075fa:	2b00      	cmp	r3, #0
 80075fc:	d007      	beq.n	800760e <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007604:	6a1b      	ldr	r3, [r3, #32]
 8007606:	78fa      	ldrb	r2, [r7, #3]
 8007608:	4611      	mov	r1, r2
 800760a:	6878      	ldr	r0, [r7, #4]
 800760c:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800760e:	2300      	movs	r3, #0
}
 8007610:	4618      	mov	r0, r3
 8007612:	3708      	adds	r7, #8
 8007614:	46bd      	mov	sp, r7
 8007616:	bd80      	pop	{r7, pc}

08007618 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8007618:	b580      	push	{r7, lr}
 800761a:	b082      	sub	sp, #8
 800761c:	af00      	add	r7, sp, #0
 800761e:	6078      	str	r0, [r7, #4]
 8007620:	460b      	mov	r3, r1
 8007622:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800762a:	2b00      	cmp	r3, #0
 800762c:	d101      	bne.n	8007632 <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 800762e:	2303      	movs	r3, #3
 8007630:	e014      	b.n	800765c <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007638:	b2db      	uxtb	r3, r3
 800763a:	2b03      	cmp	r3, #3
 800763c:	d10d      	bne.n	800765a <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007644:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007646:	2b00      	cmp	r3, #0
 8007648:	d007      	beq.n	800765a <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007650:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007652:	78fa      	ldrb	r2, [r7, #3]
 8007654:	4611      	mov	r1, r2
 8007656:	6878      	ldr	r0, [r7, #4]
 8007658:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800765a:	2300      	movs	r3, #0
}
 800765c:	4618      	mov	r0, r3
 800765e:	3708      	adds	r7, #8
 8007660:	46bd      	mov	sp, r7
 8007662:	bd80      	pop	{r7, pc}

08007664 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8007664:	b480      	push	{r7}
 8007666:	b083      	sub	sp, #12
 8007668:	af00      	add	r7, sp, #0
 800766a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800766c:	2300      	movs	r3, #0
}
 800766e:	4618      	mov	r0, r3
 8007670:	370c      	adds	r7, #12
 8007672:	46bd      	mov	sp, r7
 8007674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007678:	4770      	bx	lr

0800767a <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800767a:	b580      	push	{r7, lr}
 800767c:	b082      	sub	sp, #8
 800767e:	af00      	add	r7, sp, #0
 8007680:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	2201      	movs	r2, #1
 8007686:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007690:	2b00      	cmp	r3, #0
 8007692:	d009      	beq.n	80076a8 <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800769a:	685b      	ldr	r3, [r3, #4]
 800769c:	687a      	ldr	r2, [r7, #4]
 800769e:	6852      	ldr	r2, [r2, #4]
 80076a0:	b2d2      	uxtb	r2, r2
 80076a2:	4611      	mov	r1, r2
 80076a4:	6878      	ldr	r0, [r7, #4]
 80076a6:	4798      	blx	r3
  }

  return USBD_OK;
 80076a8:	2300      	movs	r3, #0
}
 80076aa:	4618      	mov	r0, r3
 80076ac:	3708      	adds	r7, #8
 80076ae:	46bd      	mov	sp, r7
 80076b0:	bd80      	pop	{r7, pc}

080076b2 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 80076b2:	b480      	push	{r7}
 80076b4:	b087      	sub	sp, #28
 80076b6:	af00      	add	r7, sp, #0
 80076b8:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 80076be:	697b      	ldr	r3, [r7, #20]
 80076c0:	781b      	ldrb	r3, [r3, #0]
 80076c2:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 80076c4:	697b      	ldr	r3, [r7, #20]
 80076c6:	3301      	adds	r3, #1
 80076c8:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 80076ca:	697b      	ldr	r3, [r7, #20]
 80076cc:	781b      	ldrb	r3, [r3, #0]
 80076ce:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 80076d0:	8a3b      	ldrh	r3, [r7, #16]
 80076d2:	021b      	lsls	r3, r3, #8
 80076d4:	b21a      	sxth	r2, r3
 80076d6:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80076da:	4313      	orrs	r3, r2
 80076dc:	b21b      	sxth	r3, r3
 80076de:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 80076e0:	89fb      	ldrh	r3, [r7, #14]
}
 80076e2:	4618      	mov	r0, r3
 80076e4:	371c      	adds	r7, #28
 80076e6:	46bd      	mov	sp, r7
 80076e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ec:	4770      	bx	lr
	...

080076f0 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80076f0:	b580      	push	{r7, lr}
 80076f2:	b084      	sub	sp, #16
 80076f4:	af00      	add	r7, sp, #0
 80076f6:	6078      	str	r0, [r7, #4]
 80076f8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80076fa:	2300      	movs	r3, #0
 80076fc:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80076fe:	683b      	ldr	r3, [r7, #0]
 8007700:	781b      	ldrb	r3, [r3, #0]
 8007702:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007706:	2b40      	cmp	r3, #64	; 0x40
 8007708:	d005      	beq.n	8007716 <USBD_StdDevReq+0x26>
 800770a:	2b40      	cmp	r3, #64	; 0x40
 800770c:	d853      	bhi.n	80077b6 <USBD_StdDevReq+0xc6>
 800770e:	2b00      	cmp	r3, #0
 8007710:	d00b      	beq.n	800772a <USBD_StdDevReq+0x3a>
 8007712:	2b20      	cmp	r3, #32
 8007714:	d14f      	bne.n	80077b6 <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800771c:	689b      	ldr	r3, [r3, #8]
 800771e:	6839      	ldr	r1, [r7, #0]
 8007720:	6878      	ldr	r0, [r7, #4]
 8007722:	4798      	blx	r3
 8007724:	4603      	mov	r3, r0
 8007726:	73fb      	strb	r3, [r7, #15]
      break;
 8007728:	e04a      	b.n	80077c0 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800772a:	683b      	ldr	r3, [r7, #0]
 800772c:	785b      	ldrb	r3, [r3, #1]
 800772e:	2b09      	cmp	r3, #9
 8007730:	d83b      	bhi.n	80077aa <USBD_StdDevReq+0xba>
 8007732:	a201      	add	r2, pc, #4	; (adr r2, 8007738 <USBD_StdDevReq+0x48>)
 8007734:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007738:	0800778d 	.word	0x0800778d
 800773c:	080077a1 	.word	0x080077a1
 8007740:	080077ab 	.word	0x080077ab
 8007744:	08007797 	.word	0x08007797
 8007748:	080077ab 	.word	0x080077ab
 800774c:	0800776b 	.word	0x0800776b
 8007750:	08007761 	.word	0x08007761
 8007754:	080077ab 	.word	0x080077ab
 8007758:	08007783 	.word	0x08007783
 800775c:	08007775 	.word	0x08007775
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8007760:	6839      	ldr	r1, [r7, #0]
 8007762:	6878      	ldr	r0, [r7, #4]
 8007764:	f000 f9de 	bl	8007b24 <USBD_GetDescriptor>
          break;
 8007768:	e024      	b.n	80077b4 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800776a:	6839      	ldr	r1, [r7, #0]
 800776c:	6878      	ldr	r0, [r7, #4]
 800776e:	f000 fb43 	bl	8007df8 <USBD_SetAddress>
          break;
 8007772:	e01f      	b.n	80077b4 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8007774:	6839      	ldr	r1, [r7, #0]
 8007776:	6878      	ldr	r0, [r7, #4]
 8007778:	f000 fb82 	bl	8007e80 <USBD_SetConfig>
 800777c:	4603      	mov	r3, r0
 800777e:	73fb      	strb	r3, [r7, #15]
          break;
 8007780:	e018      	b.n	80077b4 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8007782:	6839      	ldr	r1, [r7, #0]
 8007784:	6878      	ldr	r0, [r7, #4]
 8007786:	f000 fc21 	bl	8007fcc <USBD_GetConfig>
          break;
 800778a:	e013      	b.n	80077b4 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800778c:	6839      	ldr	r1, [r7, #0]
 800778e:	6878      	ldr	r0, [r7, #4]
 8007790:	f000 fc52 	bl	8008038 <USBD_GetStatus>
          break;
 8007794:	e00e      	b.n	80077b4 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8007796:	6839      	ldr	r1, [r7, #0]
 8007798:	6878      	ldr	r0, [r7, #4]
 800779a:	f000 fc81 	bl	80080a0 <USBD_SetFeature>
          break;
 800779e:	e009      	b.n	80077b4 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80077a0:	6839      	ldr	r1, [r7, #0]
 80077a2:	6878      	ldr	r0, [r7, #4]
 80077a4:	f000 fc90 	bl	80080c8 <USBD_ClrFeature>
          break;
 80077a8:	e004      	b.n	80077b4 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 80077aa:	6839      	ldr	r1, [r7, #0]
 80077ac:	6878      	ldr	r0, [r7, #4]
 80077ae:	f000 fce7 	bl	8008180 <USBD_CtlError>
          break;
 80077b2:	bf00      	nop
      }
      break;
 80077b4:	e004      	b.n	80077c0 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 80077b6:	6839      	ldr	r1, [r7, #0]
 80077b8:	6878      	ldr	r0, [r7, #4]
 80077ba:	f000 fce1 	bl	8008180 <USBD_CtlError>
      break;
 80077be:	bf00      	nop
  }

  return ret;
 80077c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80077c2:	4618      	mov	r0, r3
 80077c4:	3710      	adds	r7, #16
 80077c6:	46bd      	mov	sp, r7
 80077c8:	bd80      	pop	{r7, pc}
 80077ca:	bf00      	nop

080077cc <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80077cc:	b580      	push	{r7, lr}
 80077ce:	b084      	sub	sp, #16
 80077d0:	af00      	add	r7, sp, #0
 80077d2:	6078      	str	r0, [r7, #4]
 80077d4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80077d6:	2300      	movs	r3, #0
 80077d8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80077da:	683b      	ldr	r3, [r7, #0]
 80077dc:	781b      	ldrb	r3, [r3, #0]
 80077de:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80077e2:	2b40      	cmp	r3, #64	; 0x40
 80077e4:	d005      	beq.n	80077f2 <USBD_StdItfReq+0x26>
 80077e6:	2b40      	cmp	r3, #64	; 0x40
 80077e8:	d82f      	bhi.n	800784a <USBD_StdItfReq+0x7e>
 80077ea:	2b00      	cmp	r3, #0
 80077ec:	d001      	beq.n	80077f2 <USBD_StdItfReq+0x26>
 80077ee:	2b20      	cmp	r3, #32
 80077f0:	d12b      	bne.n	800784a <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80077f8:	b2db      	uxtb	r3, r3
 80077fa:	3b01      	subs	r3, #1
 80077fc:	2b02      	cmp	r3, #2
 80077fe:	d81d      	bhi.n	800783c <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8007800:	683b      	ldr	r3, [r7, #0]
 8007802:	889b      	ldrh	r3, [r3, #4]
 8007804:	b2db      	uxtb	r3, r3
 8007806:	2b01      	cmp	r3, #1
 8007808:	d813      	bhi.n	8007832 <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007810:	689b      	ldr	r3, [r3, #8]
 8007812:	6839      	ldr	r1, [r7, #0]
 8007814:	6878      	ldr	r0, [r7, #4]
 8007816:	4798      	blx	r3
 8007818:	4603      	mov	r3, r0
 800781a:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800781c:	683b      	ldr	r3, [r7, #0]
 800781e:	88db      	ldrh	r3, [r3, #6]
 8007820:	2b00      	cmp	r3, #0
 8007822:	d110      	bne.n	8007846 <USBD_StdItfReq+0x7a>
 8007824:	7bfb      	ldrb	r3, [r7, #15]
 8007826:	2b00      	cmp	r3, #0
 8007828:	d10d      	bne.n	8007846 <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 800782a:	6878      	ldr	r0, [r7, #4]
 800782c:	f000 fd73 	bl	8008316 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8007830:	e009      	b.n	8007846 <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 8007832:	6839      	ldr	r1, [r7, #0]
 8007834:	6878      	ldr	r0, [r7, #4]
 8007836:	f000 fca3 	bl	8008180 <USBD_CtlError>
          break;
 800783a:	e004      	b.n	8007846 <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 800783c:	6839      	ldr	r1, [r7, #0]
 800783e:	6878      	ldr	r0, [r7, #4]
 8007840:	f000 fc9e 	bl	8008180 <USBD_CtlError>
          break;
 8007844:	e000      	b.n	8007848 <USBD_StdItfReq+0x7c>
          break;
 8007846:	bf00      	nop
      }
      break;
 8007848:	e004      	b.n	8007854 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 800784a:	6839      	ldr	r1, [r7, #0]
 800784c:	6878      	ldr	r0, [r7, #4]
 800784e:	f000 fc97 	bl	8008180 <USBD_CtlError>
      break;
 8007852:	bf00      	nop
  }

  return ret;
 8007854:	7bfb      	ldrb	r3, [r7, #15]
}
 8007856:	4618      	mov	r0, r3
 8007858:	3710      	adds	r7, #16
 800785a:	46bd      	mov	sp, r7
 800785c:	bd80      	pop	{r7, pc}

0800785e <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800785e:	b580      	push	{r7, lr}
 8007860:	b084      	sub	sp, #16
 8007862:	af00      	add	r7, sp, #0
 8007864:	6078      	str	r0, [r7, #4]
 8007866:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8007868:	2300      	movs	r3, #0
 800786a:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 800786c:	683b      	ldr	r3, [r7, #0]
 800786e:	889b      	ldrh	r3, [r3, #4]
 8007870:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007872:	683b      	ldr	r3, [r7, #0]
 8007874:	781b      	ldrb	r3, [r3, #0]
 8007876:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800787a:	2b40      	cmp	r3, #64	; 0x40
 800787c:	d007      	beq.n	800788e <USBD_StdEPReq+0x30>
 800787e:	2b40      	cmp	r3, #64	; 0x40
 8007880:	f200 8145 	bhi.w	8007b0e <USBD_StdEPReq+0x2b0>
 8007884:	2b00      	cmp	r3, #0
 8007886:	d00c      	beq.n	80078a2 <USBD_StdEPReq+0x44>
 8007888:	2b20      	cmp	r3, #32
 800788a:	f040 8140 	bne.w	8007b0e <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007894:	689b      	ldr	r3, [r3, #8]
 8007896:	6839      	ldr	r1, [r7, #0]
 8007898:	6878      	ldr	r0, [r7, #4]
 800789a:	4798      	blx	r3
 800789c:	4603      	mov	r3, r0
 800789e:	73fb      	strb	r3, [r7, #15]
      break;
 80078a0:	e13a      	b.n	8007b18 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80078a2:	683b      	ldr	r3, [r7, #0]
 80078a4:	785b      	ldrb	r3, [r3, #1]
 80078a6:	2b03      	cmp	r3, #3
 80078a8:	d007      	beq.n	80078ba <USBD_StdEPReq+0x5c>
 80078aa:	2b03      	cmp	r3, #3
 80078ac:	f300 8129 	bgt.w	8007b02 <USBD_StdEPReq+0x2a4>
 80078b0:	2b00      	cmp	r3, #0
 80078b2:	d07f      	beq.n	80079b4 <USBD_StdEPReq+0x156>
 80078b4:	2b01      	cmp	r3, #1
 80078b6:	d03c      	beq.n	8007932 <USBD_StdEPReq+0xd4>
 80078b8:	e123      	b.n	8007b02 <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80078c0:	b2db      	uxtb	r3, r3
 80078c2:	2b02      	cmp	r3, #2
 80078c4:	d002      	beq.n	80078cc <USBD_StdEPReq+0x6e>
 80078c6:	2b03      	cmp	r3, #3
 80078c8:	d016      	beq.n	80078f8 <USBD_StdEPReq+0x9a>
 80078ca:	e02c      	b.n	8007926 <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80078cc:	7bbb      	ldrb	r3, [r7, #14]
 80078ce:	2b00      	cmp	r3, #0
 80078d0:	d00d      	beq.n	80078ee <USBD_StdEPReq+0x90>
 80078d2:	7bbb      	ldrb	r3, [r7, #14]
 80078d4:	2b80      	cmp	r3, #128	; 0x80
 80078d6:	d00a      	beq.n	80078ee <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80078d8:	7bbb      	ldrb	r3, [r7, #14]
 80078da:	4619      	mov	r1, r3
 80078dc:	6878      	ldr	r0, [r7, #4]
 80078de:	f001 f96d 	bl	8008bbc <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80078e2:	2180      	movs	r1, #128	; 0x80
 80078e4:	6878      	ldr	r0, [r7, #4]
 80078e6:	f001 f969 	bl	8008bbc <USBD_LL_StallEP>
 80078ea:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80078ec:	e020      	b.n	8007930 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 80078ee:	6839      	ldr	r1, [r7, #0]
 80078f0:	6878      	ldr	r0, [r7, #4]
 80078f2:	f000 fc45 	bl	8008180 <USBD_CtlError>
              break;
 80078f6:	e01b      	b.n	8007930 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80078f8:	683b      	ldr	r3, [r7, #0]
 80078fa:	885b      	ldrh	r3, [r3, #2]
 80078fc:	2b00      	cmp	r3, #0
 80078fe:	d10e      	bne.n	800791e <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8007900:	7bbb      	ldrb	r3, [r7, #14]
 8007902:	2b00      	cmp	r3, #0
 8007904:	d00b      	beq.n	800791e <USBD_StdEPReq+0xc0>
 8007906:	7bbb      	ldrb	r3, [r7, #14]
 8007908:	2b80      	cmp	r3, #128	; 0x80
 800790a:	d008      	beq.n	800791e <USBD_StdEPReq+0xc0>
 800790c:	683b      	ldr	r3, [r7, #0]
 800790e:	88db      	ldrh	r3, [r3, #6]
 8007910:	2b00      	cmp	r3, #0
 8007912:	d104      	bne.n	800791e <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8007914:	7bbb      	ldrb	r3, [r7, #14]
 8007916:	4619      	mov	r1, r3
 8007918:	6878      	ldr	r0, [r7, #4]
 800791a:	f001 f94f 	bl	8008bbc <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800791e:	6878      	ldr	r0, [r7, #4]
 8007920:	f000 fcf9 	bl	8008316 <USBD_CtlSendStatus>

              break;
 8007924:	e004      	b.n	8007930 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 8007926:	6839      	ldr	r1, [r7, #0]
 8007928:	6878      	ldr	r0, [r7, #4]
 800792a:	f000 fc29 	bl	8008180 <USBD_CtlError>
              break;
 800792e:	bf00      	nop
          }
          break;
 8007930:	e0ec      	b.n	8007b0c <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007938:	b2db      	uxtb	r3, r3
 800793a:	2b02      	cmp	r3, #2
 800793c:	d002      	beq.n	8007944 <USBD_StdEPReq+0xe6>
 800793e:	2b03      	cmp	r3, #3
 8007940:	d016      	beq.n	8007970 <USBD_StdEPReq+0x112>
 8007942:	e030      	b.n	80079a6 <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007944:	7bbb      	ldrb	r3, [r7, #14]
 8007946:	2b00      	cmp	r3, #0
 8007948:	d00d      	beq.n	8007966 <USBD_StdEPReq+0x108>
 800794a:	7bbb      	ldrb	r3, [r7, #14]
 800794c:	2b80      	cmp	r3, #128	; 0x80
 800794e:	d00a      	beq.n	8007966 <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8007950:	7bbb      	ldrb	r3, [r7, #14]
 8007952:	4619      	mov	r1, r3
 8007954:	6878      	ldr	r0, [r7, #4]
 8007956:	f001 f931 	bl	8008bbc <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800795a:	2180      	movs	r1, #128	; 0x80
 800795c:	6878      	ldr	r0, [r7, #4]
 800795e:	f001 f92d 	bl	8008bbc <USBD_LL_StallEP>
 8007962:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007964:	e025      	b.n	80079b2 <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 8007966:	6839      	ldr	r1, [r7, #0]
 8007968:	6878      	ldr	r0, [r7, #4]
 800796a:	f000 fc09 	bl	8008180 <USBD_CtlError>
              break;
 800796e:	e020      	b.n	80079b2 <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007970:	683b      	ldr	r3, [r7, #0]
 8007972:	885b      	ldrh	r3, [r3, #2]
 8007974:	2b00      	cmp	r3, #0
 8007976:	d11b      	bne.n	80079b0 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8007978:	7bbb      	ldrb	r3, [r7, #14]
 800797a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800797e:	2b00      	cmp	r3, #0
 8007980:	d004      	beq.n	800798c <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8007982:	7bbb      	ldrb	r3, [r7, #14]
 8007984:	4619      	mov	r1, r3
 8007986:	6878      	ldr	r0, [r7, #4]
 8007988:	f001 f937 	bl	8008bfa <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800798c:	6878      	ldr	r0, [r7, #4]
 800798e:	f000 fcc2 	bl	8008316 <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007998:	689b      	ldr	r3, [r3, #8]
 800799a:	6839      	ldr	r1, [r7, #0]
 800799c:	6878      	ldr	r0, [r7, #4]
 800799e:	4798      	blx	r3
 80079a0:	4603      	mov	r3, r0
 80079a2:	73fb      	strb	r3, [r7, #15]
              }
              break;
 80079a4:	e004      	b.n	80079b0 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 80079a6:	6839      	ldr	r1, [r7, #0]
 80079a8:	6878      	ldr	r0, [r7, #4]
 80079aa:	f000 fbe9 	bl	8008180 <USBD_CtlError>
              break;
 80079ae:	e000      	b.n	80079b2 <USBD_StdEPReq+0x154>
              break;
 80079b0:	bf00      	nop
          }
          break;
 80079b2:	e0ab      	b.n	8007b0c <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80079ba:	b2db      	uxtb	r3, r3
 80079bc:	2b02      	cmp	r3, #2
 80079be:	d002      	beq.n	80079c6 <USBD_StdEPReq+0x168>
 80079c0:	2b03      	cmp	r3, #3
 80079c2:	d032      	beq.n	8007a2a <USBD_StdEPReq+0x1cc>
 80079c4:	e097      	b.n	8007af6 <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80079c6:	7bbb      	ldrb	r3, [r7, #14]
 80079c8:	2b00      	cmp	r3, #0
 80079ca:	d007      	beq.n	80079dc <USBD_StdEPReq+0x17e>
 80079cc:	7bbb      	ldrb	r3, [r7, #14]
 80079ce:	2b80      	cmp	r3, #128	; 0x80
 80079d0:	d004      	beq.n	80079dc <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 80079d2:	6839      	ldr	r1, [r7, #0]
 80079d4:	6878      	ldr	r0, [r7, #4]
 80079d6:	f000 fbd3 	bl	8008180 <USBD_CtlError>
                break;
 80079da:	e091      	b.n	8007b00 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80079dc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80079e0:	2b00      	cmp	r3, #0
 80079e2:	da0b      	bge.n	80079fc <USBD_StdEPReq+0x19e>
 80079e4:	7bbb      	ldrb	r3, [r7, #14]
 80079e6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80079ea:	4613      	mov	r3, r2
 80079ec:	009b      	lsls	r3, r3, #2
 80079ee:	4413      	add	r3, r2
 80079f0:	009b      	lsls	r3, r3, #2
 80079f2:	3310      	adds	r3, #16
 80079f4:	687a      	ldr	r2, [r7, #4]
 80079f6:	4413      	add	r3, r2
 80079f8:	3304      	adds	r3, #4
 80079fa:	e00b      	b.n	8007a14 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80079fc:	7bbb      	ldrb	r3, [r7, #14]
 80079fe:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007a02:	4613      	mov	r3, r2
 8007a04:	009b      	lsls	r3, r3, #2
 8007a06:	4413      	add	r3, r2
 8007a08:	009b      	lsls	r3, r3, #2
 8007a0a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8007a0e:	687a      	ldr	r2, [r7, #4]
 8007a10:	4413      	add	r3, r2
 8007a12:	3304      	adds	r3, #4
 8007a14:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8007a16:	68bb      	ldr	r3, [r7, #8]
 8007a18:	2200      	movs	r2, #0
 8007a1a:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8007a1c:	68bb      	ldr	r3, [r7, #8]
 8007a1e:	2202      	movs	r2, #2
 8007a20:	4619      	mov	r1, r3
 8007a22:	6878      	ldr	r0, [r7, #4]
 8007a24:	f000 fc1d 	bl	8008262 <USBD_CtlSendData>
              break;
 8007a28:	e06a      	b.n	8007b00 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8007a2a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007a2e:	2b00      	cmp	r3, #0
 8007a30:	da11      	bge.n	8007a56 <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8007a32:	7bbb      	ldrb	r3, [r7, #14]
 8007a34:	f003 020f 	and.w	r2, r3, #15
 8007a38:	6879      	ldr	r1, [r7, #4]
 8007a3a:	4613      	mov	r3, r2
 8007a3c:	009b      	lsls	r3, r3, #2
 8007a3e:	4413      	add	r3, r2
 8007a40:	009b      	lsls	r3, r3, #2
 8007a42:	440b      	add	r3, r1
 8007a44:	3324      	adds	r3, #36	; 0x24
 8007a46:	881b      	ldrh	r3, [r3, #0]
 8007a48:	2b00      	cmp	r3, #0
 8007a4a:	d117      	bne.n	8007a7c <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8007a4c:	6839      	ldr	r1, [r7, #0]
 8007a4e:	6878      	ldr	r0, [r7, #4]
 8007a50:	f000 fb96 	bl	8008180 <USBD_CtlError>
                  break;
 8007a54:	e054      	b.n	8007b00 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8007a56:	7bbb      	ldrb	r3, [r7, #14]
 8007a58:	f003 020f 	and.w	r2, r3, #15
 8007a5c:	6879      	ldr	r1, [r7, #4]
 8007a5e:	4613      	mov	r3, r2
 8007a60:	009b      	lsls	r3, r3, #2
 8007a62:	4413      	add	r3, r2
 8007a64:	009b      	lsls	r3, r3, #2
 8007a66:	440b      	add	r3, r1
 8007a68:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8007a6c:	881b      	ldrh	r3, [r3, #0]
 8007a6e:	2b00      	cmp	r3, #0
 8007a70:	d104      	bne.n	8007a7c <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8007a72:	6839      	ldr	r1, [r7, #0]
 8007a74:	6878      	ldr	r0, [r7, #4]
 8007a76:	f000 fb83 	bl	8008180 <USBD_CtlError>
                  break;
 8007a7a:	e041      	b.n	8007b00 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007a7c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007a80:	2b00      	cmp	r3, #0
 8007a82:	da0b      	bge.n	8007a9c <USBD_StdEPReq+0x23e>
 8007a84:	7bbb      	ldrb	r3, [r7, #14]
 8007a86:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007a8a:	4613      	mov	r3, r2
 8007a8c:	009b      	lsls	r3, r3, #2
 8007a8e:	4413      	add	r3, r2
 8007a90:	009b      	lsls	r3, r3, #2
 8007a92:	3310      	adds	r3, #16
 8007a94:	687a      	ldr	r2, [r7, #4]
 8007a96:	4413      	add	r3, r2
 8007a98:	3304      	adds	r3, #4
 8007a9a:	e00b      	b.n	8007ab4 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007a9c:	7bbb      	ldrb	r3, [r7, #14]
 8007a9e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007aa2:	4613      	mov	r3, r2
 8007aa4:	009b      	lsls	r3, r3, #2
 8007aa6:	4413      	add	r3, r2
 8007aa8:	009b      	lsls	r3, r3, #2
 8007aaa:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8007aae:	687a      	ldr	r2, [r7, #4]
 8007ab0:	4413      	add	r3, r2
 8007ab2:	3304      	adds	r3, #4
 8007ab4:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8007ab6:	7bbb      	ldrb	r3, [r7, #14]
 8007ab8:	2b00      	cmp	r3, #0
 8007aba:	d002      	beq.n	8007ac2 <USBD_StdEPReq+0x264>
 8007abc:	7bbb      	ldrb	r3, [r7, #14]
 8007abe:	2b80      	cmp	r3, #128	; 0x80
 8007ac0:	d103      	bne.n	8007aca <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 8007ac2:	68bb      	ldr	r3, [r7, #8]
 8007ac4:	2200      	movs	r2, #0
 8007ac6:	601a      	str	r2, [r3, #0]
 8007ac8:	e00e      	b.n	8007ae8 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8007aca:	7bbb      	ldrb	r3, [r7, #14]
 8007acc:	4619      	mov	r1, r3
 8007ace:	6878      	ldr	r0, [r7, #4]
 8007ad0:	f001 f8b2 	bl	8008c38 <USBD_LL_IsStallEP>
 8007ad4:	4603      	mov	r3, r0
 8007ad6:	2b00      	cmp	r3, #0
 8007ad8:	d003      	beq.n	8007ae2 <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 8007ada:	68bb      	ldr	r3, [r7, #8]
 8007adc:	2201      	movs	r2, #1
 8007ade:	601a      	str	r2, [r3, #0]
 8007ae0:	e002      	b.n	8007ae8 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 8007ae2:	68bb      	ldr	r3, [r7, #8]
 8007ae4:	2200      	movs	r2, #0
 8007ae6:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8007ae8:	68bb      	ldr	r3, [r7, #8]
 8007aea:	2202      	movs	r2, #2
 8007aec:	4619      	mov	r1, r3
 8007aee:	6878      	ldr	r0, [r7, #4]
 8007af0:	f000 fbb7 	bl	8008262 <USBD_CtlSendData>
              break;
 8007af4:	e004      	b.n	8007b00 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 8007af6:	6839      	ldr	r1, [r7, #0]
 8007af8:	6878      	ldr	r0, [r7, #4]
 8007afa:	f000 fb41 	bl	8008180 <USBD_CtlError>
              break;
 8007afe:	bf00      	nop
          }
          break;
 8007b00:	e004      	b.n	8007b0c <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 8007b02:	6839      	ldr	r1, [r7, #0]
 8007b04:	6878      	ldr	r0, [r7, #4]
 8007b06:	f000 fb3b 	bl	8008180 <USBD_CtlError>
          break;
 8007b0a:	bf00      	nop
      }
      break;
 8007b0c:	e004      	b.n	8007b18 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 8007b0e:	6839      	ldr	r1, [r7, #0]
 8007b10:	6878      	ldr	r0, [r7, #4]
 8007b12:	f000 fb35 	bl	8008180 <USBD_CtlError>
      break;
 8007b16:	bf00      	nop
  }

  return ret;
 8007b18:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b1a:	4618      	mov	r0, r3
 8007b1c:	3710      	adds	r7, #16
 8007b1e:	46bd      	mov	sp, r7
 8007b20:	bd80      	pop	{r7, pc}
	...

08007b24 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007b24:	b580      	push	{r7, lr}
 8007b26:	b084      	sub	sp, #16
 8007b28:	af00      	add	r7, sp, #0
 8007b2a:	6078      	str	r0, [r7, #4]
 8007b2c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007b2e:	2300      	movs	r3, #0
 8007b30:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8007b32:	2300      	movs	r3, #0
 8007b34:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8007b36:	2300      	movs	r3, #0
 8007b38:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8007b3a:	683b      	ldr	r3, [r7, #0]
 8007b3c:	885b      	ldrh	r3, [r3, #2]
 8007b3e:	0a1b      	lsrs	r3, r3, #8
 8007b40:	b29b      	uxth	r3, r3
 8007b42:	3b01      	subs	r3, #1
 8007b44:	2b06      	cmp	r3, #6
 8007b46:	f200 8128 	bhi.w	8007d9a <USBD_GetDescriptor+0x276>
 8007b4a:	a201      	add	r2, pc, #4	; (adr r2, 8007b50 <USBD_GetDescriptor+0x2c>)
 8007b4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b50:	08007b6d 	.word	0x08007b6d
 8007b54:	08007b85 	.word	0x08007b85
 8007b58:	08007bc5 	.word	0x08007bc5
 8007b5c:	08007d9b 	.word	0x08007d9b
 8007b60:	08007d9b 	.word	0x08007d9b
 8007b64:	08007d3b 	.word	0x08007d3b
 8007b68:	08007d67 	.word	0x08007d67
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007b72:	681b      	ldr	r3, [r3, #0]
 8007b74:	687a      	ldr	r2, [r7, #4]
 8007b76:	7c12      	ldrb	r2, [r2, #16]
 8007b78:	f107 0108 	add.w	r1, r7, #8
 8007b7c:	4610      	mov	r0, r2
 8007b7e:	4798      	blx	r3
 8007b80:	60f8      	str	r0, [r7, #12]
      break;
 8007b82:	e112      	b.n	8007daa <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	7c1b      	ldrb	r3, [r3, #16]
 8007b88:	2b00      	cmp	r3, #0
 8007b8a:	d10d      	bne.n	8007ba8 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007b92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b94:	f107 0208 	add.w	r2, r7, #8
 8007b98:	4610      	mov	r0, r2
 8007b9a:	4798      	blx	r3
 8007b9c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007b9e:	68fb      	ldr	r3, [r7, #12]
 8007ba0:	3301      	adds	r3, #1
 8007ba2:	2202      	movs	r2, #2
 8007ba4:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8007ba6:	e100      	b.n	8007daa <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007bae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007bb0:	f107 0208 	add.w	r2, r7, #8
 8007bb4:	4610      	mov	r0, r2
 8007bb6:	4798      	blx	r3
 8007bb8:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007bba:	68fb      	ldr	r3, [r7, #12]
 8007bbc:	3301      	adds	r3, #1
 8007bbe:	2202      	movs	r2, #2
 8007bc0:	701a      	strb	r2, [r3, #0]
      break;
 8007bc2:	e0f2      	b.n	8007daa <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8007bc4:	683b      	ldr	r3, [r7, #0]
 8007bc6:	885b      	ldrh	r3, [r3, #2]
 8007bc8:	b2db      	uxtb	r3, r3
 8007bca:	2b05      	cmp	r3, #5
 8007bcc:	f200 80ac 	bhi.w	8007d28 <USBD_GetDescriptor+0x204>
 8007bd0:	a201      	add	r2, pc, #4	; (adr r2, 8007bd8 <USBD_GetDescriptor+0xb4>)
 8007bd2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007bd6:	bf00      	nop
 8007bd8:	08007bf1 	.word	0x08007bf1
 8007bdc:	08007c25 	.word	0x08007c25
 8007be0:	08007c59 	.word	0x08007c59
 8007be4:	08007c8d 	.word	0x08007c8d
 8007be8:	08007cc1 	.word	0x08007cc1
 8007bec:	08007cf5 	.word	0x08007cf5
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007bf6:	685b      	ldr	r3, [r3, #4]
 8007bf8:	2b00      	cmp	r3, #0
 8007bfa:	d00b      	beq.n	8007c14 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007c02:	685b      	ldr	r3, [r3, #4]
 8007c04:	687a      	ldr	r2, [r7, #4]
 8007c06:	7c12      	ldrb	r2, [r2, #16]
 8007c08:	f107 0108 	add.w	r1, r7, #8
 8007c0c:	4610      	mov	r0, r2
 8007c0e:	4798      	blx	r3
 8007c10:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007c12:	e091      	b.n	8007d38 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007c14:	6839      	ldr	r1, [r7, #0]
 8007c16:	6878      	ldr	r0, [r7, #4]
 8007c18:	f000 fab2 	bl	8008180 <USBD_CtlError>
            err++;
 8007c1c:	7afb      	ldrb	r3, [r7, #11]
 8007c1e:	3301      	adds	r3, #1
 8007c20:	72fb      	strb	r3, [r7, #11]
          break;
 8007c22:	e089      	b.n	8007d38 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007c2a:	689b      	ldr	r3, [r3, #8]
 8007c2c:	2b00      	cmp	r3, #0
 8007c2e:	d00b      	beq.n	8007c48 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007c36:	689b      	ldr	r3, [r3, #8]
 8007c38:	687a      	ldr	r2, [r7, #4]
 8007c3a:	7c12      	ldrb	r2, [r2, #16]
 8007c3c:	f107 0108 	add.w	r1, r7, #8
 8007c40:	4610      	mov	r0, r2
 8007c42:	4798      	blx	r3
 8007c44:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007c46:	e077      	b.n	8007d38 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007c48:	6839      	ldr	r1, [r7, #0]
 8007c4a:	6878      	ldr	r0, [r7, #4]
 8007c4c:	f000 fa98 	bl	8008180 <USBD_CtlError>
            err++;
 8007c50:	7afb      	ldrb	r3, [r7, #11]
 8007c52:	3301      	adds	r3, #1
 8007c54:	72fb      	strb	r3, [r7, #11]
          break;
 8007c56:	e06f      	b.n	8007d38 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007c5e:	68db      	ldr	r3, [r3, #12]
 8007c60:	2b00      	cmp	r3, #0
 8007c62:	d00b      	beq.n	8007c7c <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007c6a:	68db      	ldr	r3, [r3, #12]
 8007c6c:	687a      	ldr	r2, [r7, #4]
 8007c6e:	7c12      	ldrb	r2, [r2, #16]
 8007c70:	f107 0108 	add.w	r1, r7, #8
 8007c74:	4610      	mov	r0, r2
 8007c76:	4798      	blx	r3
 8007c78:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007c7a:	e05d      	b.n	8007d38 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007c7c:	6839      	ldr	r1, [r7, #0]
 8007c7e:	6878      	ldr	r0, [r7, #4]
 8007c80:	f000 fa7e 	bl	8008180 <USBD_CtlError>
            err++;
 8007c84:	7afb      	ldrb	r3, [r7, #11]
 8007c86:	3301      	adds	r3, #1
 8007c88:	72fb      	strb	r3, [r7, #11]
          break;
 8007c8a:	e055      	b.n	8007d38 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007c92:	691b      	ldr	r3, [r3, #16]
 8007c94:	2b00      	cmp	r3, #0
 8007c96:	d00b      	beq.n	8007cb0 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007c9e:	691b      	ldr	r3, [r3, #16]
 8007ca0:	687a      	ldr	r2, [r7, #4]
 8007ca2:	7c12      	ldrb	r2, [r2, #16]
 8007ca4:	f107 0108 	add.w	r1, r7, #8
 8007ca8:	4610      	mov	r0, r2
 8007caa:	4798      	blx	r3
 8007cac:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007cae:	e043      	b.n	8007d38 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007cb0:	6839      	ldr	r1, [r7, #0]
 8007cb2:	6878      	ldr	r0, [r7, #4]
 8007cb4:	f000 fa64 	bl	8008180 <USBD_CtlError>
            err++;
 8007cb8:	7afb      	ldrb	r3, [r7, #11]
 8007cba:	3301      	adds	r3, #1
 8007cbc:	72fb      	strb	r3, [r7, #11]
          break;
 8007cbe:	e03b      	b.n	8007d38 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007cc6:	695b      	ldr	r3, [r3, #20]
 8007cc8:	2b00      	cmp	r3, #0
 8007cca:	d00b      	beq.n	8007ce4 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007cd2:	695b      	ldr	r3, [r3, #20]
 8007cd4:	687a      	ldr	r2, [r7, #4]
 8007cd6:	7c12      	ldrb	r2, [r2, #16]
 8007cd8:	f107 0108 	add.w	r1, r7, #8
 8007cdc:	4610      	mov	r0, r2
 8007cde:	4798      	blx	r3
 8007ce0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007ce2:	e029      	b.n	8007d38 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007ce4:	6839      	ldr	r1, [r7, #0]
 8007ce6:	6878      	ldr	r0, [r7, #4]
 8007ce8:	f000 fa4a 	bl	8008180 <USBD_CtlError>
            err++;
 8007cec:	7afb      	ldrb	r3, [r7, #11]
 8007cee:	3301      	adds	r3, #1
 8007cf0:	72fb      	strb	r3, [r7, #11]
          break;
 8007cf2:	e021      	b.n	8007d38 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007cfa:	699b      	ldr	r3, [r3, #24]
 8007cfc:	2b00      	cmp	r3, #0
 8007cfe:	d00b      	beq.n	8007d18 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007d06:	699b      	ldr	r3, [r3, #24]
 8007d08:	687a      	ldr	r2, [r7, #4]
 8007d0a:	7c12      	ldrb	r2, [r2, #16]
 8007d0c:	f107 0108 	add.w	r1, r7, #8
 8007d10:	4610      	mov	r0, r2
 8007d12:	4798      	blx	r3
 8007d14:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007d16:	e00f      	b.n	8007d38 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007d18:	6839      	ldr	r1, [r7, #0]
 8007d1a:	6878      	ldr	r0, [r7, #4]
 8007d1c:	f000 fa30 	bl	8008180 <USBD_CtlError>
            err++;
 8007d20:	7afb      	ldrb	r3, [r7, #11]
 8007d22:	3301      	adds	r3, #1
 8007d24:	72fb      	strb	r3, [r7, #11]
          break;
 8007d26:	e007      	b.n	8007d38 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8007d28:	6839      	ldr	r1, [r7, #0]
 8007d2a:	6878      	ldr	r0, [r7, #4]
 8007d2c:	f000 fa28 	bl	8008180 <USBD_CtlError>
          err++;
 8007d30:	7afb      	ldrb	r3, [r7, #11]
 8007d32:	3301      	adds	r3, #1
 8007d34:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 8007d36:	bf00      	nop
      }
      break;
 8007d38:	e037      	b.n	8007daa <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	7c1b      	ldrb	r3, [r3, #16]
 8007d3e:	2b00      	cmp	r3, #0
 8007d40:	d109      	bne.n	8007d56 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007d48:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007d4a:	f107 0208 	add.w	r2, r7, #8
 8007d4e:	4610      	mov	r0, r2
 8007d50:	4798      	blx	r3
 8007d52:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007d54:	e029      	b.n	8007daa <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8007d56:	6839      	ldr	r1, [r7, #0]
 8007d58:	6878      	ldr	r0, [r7, #4]
 8007d5a:	f000 fa11 	bl	8008180 <USBD_CtlError>
        err++;
 8007d5e:	7afb      	ldrb	r3, [r7, #11]
 8007d60:	3301      	adds	r3, #1
 8007d62:	72fb      	strb	r3, [r7, #11]
      break;
 8007d64:	e021      	b.n	8007daa <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	7c1b      	ldrb	r3, [r3, #16]
 8007d6a:	2b00      	cmp	r3, #0
 8007d6c:	d10d      	bne.n	8007d8a <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007d74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d76:	f107 0208 	add.w	r2, r7, #8
 8007d7a:	4610      	mov	r0, r2
 8007d7c:	4798      	blx	r3
 8007d7e:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8007d80:	68fb      	ldr	r3, [r7, #12]
 8007d82:	3301      	adds	r3, #1
 8007d84:	2207      	movs	r2, #7
 8007d86:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007d88:	e00f      	b.n	8007daa <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8007d8a:	6839      	ldr	r1, [r7, #0]
 8007d8c:	6878      	ldr	r0, [r7, #4]
 8007d8e:	f000 f9f7 	bl	8008180 <USBD_CtlError>
        err++;
 8007d92:	7afb      	ldrb	r3, [r7, #11]
 8007d94:	3301      	adds	r3, #1
 8007d96:	72fb      	strb	r3, [r7, #11]
      break;
 8007d98:	e007      	b.n	8007daa <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8007d9a:	6839      	ldr	r1, [r7, #0]
 8007d9c:	6878      	ldr	r0, [r7, #4]
 8007d9e:	f000 f9ef 	bl	8008180 <USBD_CtlError>
      err++;
 8007da2:	7afb      	ldrb	r3, [r7, #11]
 8007da4:	3301      	adds	r3, #1
 8007da6:	72fb      	strb	r3, [r7, #11]
      break;
 8007da8:	bf00      	nop
  }

  if (err != 0U)
 8007daa:	7afb      	ldrb	r3, [r7, #11]
 8007dac:	2b00      	cmp	r3, #0
 8007dae:	d11e      	bne.n	8007dee <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8007db0:	683b      	ldr	r3, [r7, #0]
 8007db2:	88db      	ldrh	r3, [r3, #6]
 8007db4:	2b00      	cmp	r3, #0
 8007db6:	d016      	beq.n	8007de6 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8007db8:	893b      	ldrh	r3, [r7, #8]
 8007dba:	2b00      	cmp	r3, #0
 8007dbc:	d00e      	beq.n	8007ddc <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8007dbe:	683b      	ldr	r3, [r7, #0]
 8007dc0:	88da      	ldrh	r2, [r3, #6]
 8007dc2:	893b      	ldrh	r3, [r7, #8]
 8007dc4:	4293      	cmp	r3, r2
 8007dc6:	bf28      	it	cs
 8007dc8:	4613      	movcs	r3, r2
 8007dca:	b29b      	uxth	r3, r3
 8007dcc:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8007dce:	893b      	ldrh	r3, [r7, #8]
 8007dd0:	461a      	mov	r2, r3
 8007dd2:	68f9      	ldr	r1, [r7, #12]
 8007dd4:	6878      	ldr	r0, [r7, #4]
 8007dd6:	f000 fa44 	bl	8008262 <USBD_CtlSendData>
 8007dda:	e009      	b.n	8007df0 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8007ddc:	6839      	ldr	r1, [r7, #0]
 8007dde:	6878      	ldr	r0, [r7, #4]
 8007de0:	f000 f9ce 	bl	8008180 <USBD_CtlError>
 8007de4:	e004      	b.n	8007df0 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8007de6:	6878      	ldr	r0, [r7, #4]
 8007de8:	f000 fa95 	bl	8008316 <USBD_CtlSendStatus>
 8007dec:	e000      	b.n	8007df0 <USBD_GetDescriptor+0x2cc>
    return;
 8007dee:	bf00      	nop
  }
}
 8007df0:	3710      	adds	r7, #16
 8007df2:	46bd      	mov	sp, r7
 8007df4:	bd80      	pop	{r7, pc}
 8007df6:	bf00      	nop

08007df8 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007df8:	b580      	push	{r7, lr}
 8007dfa:	b084      	sub	sp, #16
 8007dfc:	af00      	add	r7, sp, #0
 8007dfe:	6078      	str	r0, [r7, #4]
 8007e00:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8007e02:	683b      	ldr	r3, [r7, #0]
 8007e04:	889b      	ldrh	r3, [r3, #4]
 8007e06:	2b00      	cmp	r3, #0
 8007e08:	d131      	bne.n	8007e6e <USBD_SetAddress+0x76>
 8007e0a:	683b      	ldr	r3, [r7, #0]
 8007e0c:	88db      	ldrh	r3, [r3, #6]
 8007e0e:	2b00      	cmp	r3, #0
 8007e10:	d12d      	bne.n	8007e6e <USBD_SetAddress+0x76>
 8007e12:	683b      	ldr	r3, [r7, #0]
 8007e14:	885b      	ldrh	r3, [r3, #2]
 8007e16:	2b7f      	cmp	r3, #127	; 0x7f
 8007e18:	d829      	bhi.n	8007e6e <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8007e1a:	683b      	ldr	r3, [r7, #0]
 8007e1c:	885b      	ldrh	r3, [r3, #2]
 8007e1e:	b2db      	uxtb	r3, r3
 8007e20:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007e24:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007e2c:	b2db      	uxtb	r3, r3
 8007e2e:	2b03      	cmp	r3, #3
 8007e30:	d104      	bne.n	8007e3c <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8007e32:	6839      	ldr	r1, [r7, #0]
 8007e34:	6878      	ldr	r0, [r7, #4]
 8007e36:	f000 f9a3 	bl	8008180 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007e3a:	e01d      	b.n	8007e78 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	7bfa      	ldrb	r2, [r7, #15]
 8007e40:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8007e44:	7bfb      	ldrb	r3, [r7, #15]
 8007e46:	4619      	mov	r1, r3
 8007e48:	6878      	ldr	r0, [r7, #4]
 8007e4a:	f000 ff21 	bl	8008c90 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8007e4e:	6878      	ldr	r0, [r7, #4]
 8007e50:	f000 fa61 	bl	8008316 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8007e54:	7bfb      	ldrb	r3, [r7, #15]
 8007e56:	2b00      	cmp	r3, #0
 8007e58:	d004      	beq.n	8007e64 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	2202      	movs	r2, #2
 8007e5e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007e62:	e009      	b.n	8007e78 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	2201      	movs	r2, #1
 8007e68:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007e6c:	e004      	b.n	8007e78 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8007e6e:	6839      	ldr	r1, [r7, #0]
 8007e70:	6878      	ldr	r0, [r7, #4]
 8007e72:	f000 f985 	bl	8008180 <USBD_CtlError>
  }
}
 8007e76:	bf00      	nop
 8007e78:	bf00      	nop
 8007e7a:	3710      	adds	r7, #16
 8007e7c:	46bd      	mov	sp, r7
 8007e7e:	bd80      	pop	{r7, pc}

08007e80 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007e80:	b580      	push	{r7, lr}
 8007e82:	b084      	sub	sp, #16
 8007e84:	af00      	add	r7, sp, #0
 8007e86:	6078      	str	r0, [r7, #4]
 8007e88:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007e8a:	2300      	movs	r3, #0
 8007e8c:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8007e8e:	683b      	ldr	r3, [r7, #0]
 8007e90:	885b      	ldrh	r3, [r3, #2]
 8007e92:	b2da      	uxtb	r2, r3
 8007e94:	4b4c      	ldr	r3, [pc, #304]	; (8007fc8 <USBD_SetConfig+0x148>)
 8007e96:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8007e98:	4b4b      	ldr	r3, [pc, #300]	; (8007fc8 <USBD_SetConfig+0x148>)
 8007e9a:	781b      	ldrb	r3, [r3, #0]
 8007e9c:	2b01      	cmp	r3, #1
 8007e9e:	d905      	bls.n	8007eac <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8007ea0:	6839      	ldr	r1, [r7, #0]
 8007ea2:	6878      	ldr	r0, [r7, #4]
 8007ea4:	f000 f96c 	bl	8008180 <USBD_CtlError>
    return USBD_FAIL;
 8007ea8:	2303      	movs	r3, #3
 8007eaa:	e088      	b.n	8007fbe <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007eb2:	b2db      	uxtb	r3, r3
 8007eb4:	2b02      	cmp	r3, #2
 8007eb6:	d002      	beq.n	8007ebe <USBD_SetConfig+0x3e>
 8007eb8:	2b03      	cmp	r3, #3
 8007eba:	d025      	beq.n	8007f08 <USBD_SetConfig+0x88>
 8007ebc:	e071      	b.n	8007fa2 <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8007ebe:	4b42      	ldr	r3, [pc, #264]	; (8007fc8 <USBD_SetConfig+0x148>)
 8007ec0:	781b      	ldrb	r3, [r3, #0]
 8007ec2:	2b00      	cmp	r3, #0
 8007ec4:	d01c      	beq.n	8007f00 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 8007ec6:	4b40      	ldr	r3, [pc, #256]	; (8007fc8 <USBD_SetConfig+0x148>)
 8007ec8:	781b      	ldrb	r3, [r3, #0]
 8007eca:	461a      	mov	r2, r3
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8007ed0:	4b3d      	ldr	r3, [pc, #244]	; (8007fc8 <USBD_SetConfig+0x148>)
 8007ed2:	781b      	ldrb	r3, [r3, #0]
 8007ed4:	4619      	mov	r1, r3
 8007ed6:	6878      	ldr	r0, [r7, #4]
 8007ed8:	f7ff f948 	bl	800716c <USBD_SetClassConfig>
 8007edc:	4603      	mov	r3, r0
 8007ede:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8007ee0:	7bfb      	ldrb	r3, [r7, #15]
 8007ee2:	2b00      	cmp	r3, #0
 8007ee4:	d004      	beq.n	8007ef0 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 8007ee6:	6839      	ldr	r1, [r7, #0]
 8007ee8:	6878      	ldr	r0, [r7, #4]
 8007eea:	f000 f949 	bl	8008180 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8007eee:	e065      	b.n	8007fbc <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8007ef0:	6878      	ldr	r0, [r7, #4]
 8007ef2:	f000 fa10 	bl	8008316 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	2203      	movs	r2, #3
 8007efa:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8007efe:	e05d      	b.n	8007fbc <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8007f00:	6878      	ldr	r0, [r7, #4]
 8007f02:	f000 fa08 	bl	8008316 <USBD_CtlSendStatus>
      break;
 8007f06:	e059      	b.n	8007fbc <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8007f08:	4b2f      	ldr	r3, [pc, #188]	; (8007fc8 <USBD_SetConfig+0x148>)
 8007f0a:	781b      	ldrb	r3, [r3, #0]
 8007f0c:	2b00      	cmp	r3, #0
 8007f0e:	d112      	bne.n	8007f36 <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	2202      	movs	r2, #2
 8007f14:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8007f18:	4b2b      	ldr	r3, [pc, #172]	; (8007fc8 <USBD_SetConfig+0x148>)
 8007f1a:	781b      	ldrb	r3, [r3, #0]
 8007f1c:	461a      	mov	r2, r3
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8007f22:	4b29      	ldr	r3, [pc, #164]	; (8007fc8 <USBD_SetConfig+0x148>)
 8007f24:	781b      	ldrb	r3, [r3, #0]
 8007f26:	4619      	mov	r1, r3
 8007f28:	6878      	ldr	r0, [r7, #4]
 8007f2a:	f7ff f93b 	bl	80071a4 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8007f2e:	6878      	ldr	r0, [r7, #4]
 8007f30:	f000 f9f1 	bl	8008316 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8007f34:	e042      	b.n	8007fbc <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 8007f36:	4b24      	ldr	r3, [pc, #144]	; (8007fc8 <USBD_SetConfig+0x148>)
 8007f38:	781b      	ldrb	r3, [r3, #0]
 8007f3a:	461a      	mov	r2, r3
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	685b      	ldr	r3, [r3, #4]
 8007f40:	429a      	cmp	r2, r3
 8007f42:	d02a      	beq.n	8007f9a <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	685b      	ldr	r3, [r3, #4]
 8007f48:	b2db      	uxtb	r3, r3
 8007f4a:	4619      	mov	r1, r3
 8007f4c:	6878      	ldr	r0, [r7, #4]
 8007f4e:	f7ff f929 	bl	80071a4 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8007f52:	4b1d      	ldr	r3, [pc, #116]	; (8007fc8 <USBD_SetConfig+0x148>)
 8007f54:	781b      	ldrb	r3, [r3, #0]
 8007f56:	461a      	mov	r2, r3
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8007f5c:	4b1a      	ldr	r3, [pc, #104]	; (8007fc8 <USBD_SetConfig+0x148>)
 8007f5e:	781b      	ldrb	r3, [r3, #0]
 8007f60:	4619      	mov	r1, r3
 8007f62:	6878      	ldr	r0, [r7, #4]
 8007f64:	f7ff f902 	bl	800716c <USBD_SetClassConfig>
 8007f68:	4603      	mov	r3, r0
 8007f6a:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8007f6c:	7bfb      	ldrb	r3, [r7, #15]
 8007f6e:	2b00      	cmp	r3, #0
 8007f70:	d00f      	beq.n	8007f92 <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 8007f72:	6839      	ldr	r1, [r7, #0]
 8007f74:	6878      	ldr	r0, [r7, #4]
 8007f76:	f000 f903 	bl	8008180 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	685b      	ldr	r3, [r3, #4]
 8007f7e:	b2db      	uxtb	r3, r3
 8007f80:	4619      	mov	r1, r3
 8007f82:	6878      	ldr	r0, [r7, #4]
 8007f84:	f7ff f90e 	bl	80071a4 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	2202      	movs	r2, #2
 8007f8c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8007f90:	e014      	b.n	8007fbc <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8007f92:	6878      	ldr	r0, [r7, #4]
 8007f94:	f000 f9bf 	bl	8008316 <USBD_CtlSendStatus>
      break;
 8007f98:	e010      	b.n	8007fbc <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8007f9a:	6878      	ldr	r0, [r7, #4]
 8007f9c:	f000 f9bb 	bl	8008316 <USBD_CtlSendStatus>
      break;
 8007fa0:	e00c      	b.n	8007fbc <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8007fa2:	6839      	ldr	r1, [r7, #0]
 8007fa4:	6878      	ldr	r0, [r7, #4]
 8007fa6:	f000 f8eb 	bl	8008180 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8007faa:	4b07      	ldr	r3, [pc, #28]	; (8007fc8 <USBD_SetConfig+0x148>)
 8007fac:	781b      	ldrb	r3, [r3, #0]
 8007fae:	4619      	mov	r1, r3
 8007fb0:	6878      	ldr	r0, [r7, #4]
 8007fb2:	f7ff f8f7 	bl	80071a4 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8007fb6:	2303      	movs	r3, #3
 8007fb8:	73fb      	strb	r3, [r7, #15]
      break;
 8007fba:	bf00      	nop
  }

  return ret;
 8007fbc:	7bfb      	ldrb	r3, [r7, #15]
}
 8007fbe:	4618      	mov	r0, r3
 8007fc0:	3710      	adds	r7, #16
 8007fc2:	46bd      	mov	sp, r7
 8007fc4:	bd80      	pop	{r7, pc}
 8007fc6:	bf00      	nop
 8007fc8:	240002d4 	.word	0x240002d4

08007fcc <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007fcc:	b580      	push	{r7, lr}
 8007fce:	b082      	sub	sp, #8
 8007fd0:	af00      	add	r7, sp, #0
 8007fd2:	6078      	str	r0, [r7, #4]
 8007fd4:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8007fd6:	683b      	ldr	r3, [r7, #0]
 8007fd8:	88db      	ldrh	r3, [r3, #6]
 8007fda:	2b01      	cmp	r3, #1
 8007fdc:	d004      	beq.n	8007fe8 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8007fde:	6839      	ldr	r1, [r7, #0]
 8007fe0:	6878      	ldr	r0, [r7, #4]
 8007fe2:	f000 f8cd 	bl	8008180 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8007fe6:	e023      	b.n	8008030 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007fee:	b2db      	uxtb	r3, r3
 8007ff0:	2b02      	cmp	r3, #2
 8007ff2:	dc02      	bgt.n	8007ffa <USBD_GetConfig+0x2e>
 8007ff4:	2b00      	cmp	r3, #0
 8007ff6:	dc03      	bgt.n	8008000 <USBD_GetConfig+0x34>
 8007ff8:	e015      	b.n	8008026 <USBD_GetConfig+0x5a>
 8007ffa:	2b03      	cmp	r3, #3
 8007ffc:	d00b      	beq.n	8008016 <USBD_GetConfig+0x4a>
 8007ffe:	e012      	b.n	8008026 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	2200      	movs	r2, #0
 8008004:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	3308      	adds	r3, #8
 800800a:	2201      	movs	r2, #1
 800800c:	4619      	mov	r1, r3
 800800e:	6878      	ldr	r0, [r7, #4]
 8008010:	f000 f927 	bl	8008262 <USBD_CtlSendData>
        break;
 8008014:	e00c      	b.n	8008030 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	3304      	adds	r3, #4
 800801a:	2201      	movs	r2, #1
 800801c:	4619      	mov	r1, r3
 800801e:	6878      	ldr	r0, [r7, #4]
 8008020:	f000 f91f 	bl	8008262 <USBD_CtlSendData>
        break;
 8008024:	e004      	b.n	8008030 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8008026:	6839      	ldr	r1, [r7, #0]
 8008028:	6878      	ldr	r0, [r7, #4]
 800802a:	f000 f8a9 	bl	8008180 <USBD_CtlError>
        break;
 800802e:	bf00      	nop
}
 8008030:	bf00      	nop
 8008032:	3708      	adds	r7, #8
 8008034:	46bd      	mov	sp, r7
 8008036:	bd80      	pop	{r7, pc}

08008038 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008038:	b580      	push	{r7, lr}
 800803a:	b082      	sub	sp, #8
 800803c:	af00      	add	r7, sp, #0
 800803e:	6078      	str	r0, [r7, #4]
 8008040:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008048:	b2db      	uxtb	r3, r3
 800804a:	3b01      	subs	r3, #1
 800804c:	2b02      	cmp	r3, #2
 800804e:	d81e      	bhi.n	800808e <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8008050:	683b      	ldr	r3, [r7, #0]
 8008052:	88db      	ldrh	r3, [r3, #6]
 8008054:	2b02      	cmp	r3, #2
 8008056:	d004      	beq.n	8008062 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8008058:	6839      	ldr	r1, [r7, #0]
 800805a:	6878      	ldr	r0, [r7, #4]
 800805c:	f000 f890 	bl	8008180 <USBD_CtlError>
        break;
 8008060:	e01a      	b.n	8008098 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	2201      	movs	r2, #1
 8008066:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800806e:	2b00      	cmp	r3, #0
 8008070:	d005      	beq.n	800807e <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	68db      	ldr	r3, [r3, #12]
 8008076:	f043 0202 	orr.w	r2, r3, #2
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	330c      	adds	r3, #12
 8008082:	2202      	movs	r2, #2
 8008084:	4619      	mov	r1, r3
 8008086:	6878      	ldr	r0, [r7, #4]
 8008088:	f000 f8eb 	bl	8008262 <USBD_CtlSendData>
      break;
 800808c:	e004      	b.n	8008098 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800808e:	6839      	ldr	r1, [r7, #0]
 8008090:	6878      	ldr	r0, [r7, #4]
 8008092:	f000 f875 	bl	8008180 <USBD_CtlError>
      break;
 8008096:	bf00      	nop
  }
}
 8008098:	bf00      	nop
 800809a:	3708      	adds	r7, #8
 800809c:	46bd      	mov	sp, r7
 800809e:	bd80      	pop	{r7, pc}

080080a0 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80080a0:	b580      	push	{r7, lr}
 80080a2:	b082      	sub	sp, #8
 80080a4:	af00      	add	r7, sp, #0
 80080a6:	6078      	str	r0, [r7, #4]
 80080a8:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80080aa:	683b      	ldr	r3, [r7, #0]
 80080ac:	885b      	ldrh	r3, [r3, #2]
 80080ae:	2b01      	cmp	r3, #1
 80080b0:	d106      	bne.n	80080c0 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	2201      	movs	r2, #1
 80080b6:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 80080ba:	6878      	ldr	r0, [r7, #4]
 80080bc:	f000 f92b 	bl	8008316 <USBD_CtlSendStatus>
  }
}
 80080c0:	bf00      	nop
 80080c2:	3708      	adds	r7, #8
 80080c4:	46bd      	mov	sp, r7
 80080c6:	bd80      	pop	{r7, pc}

080080c8 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80080c8:	b580      	push	{r7, lr}
 80080ca:	b082      	sub	sp, #8
 80080cc:	af00      	add	r7, sp, #0
 80080ce:	6078      	str	r0, [r7, #4]
 80080d0:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80080d8:	b2db      	uxtb	r3, r3
 80080da:	3b01      	subs	r3, #1
 80080dc:	2b02      	cmp	r3, #2
 80080de:	d80b      	bhi.n	80080f8 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80080e0:	683b      	ldr	r3, [r7, #0]
 80080e2:	885b      	ldrh	r3, [r3, #2]
 80080e4:	2b01      	cmp	r3, #1
 80080e6:	d10c      	bne.n	8008102 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	2200      	movs	r2, #0
 80080ec:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 80080f0:	6878      	ldr	r0, [r7, #4]
 80080f2:	f000 f910 	bl	8008316 <USBD_CtlSendStatus>
      }
      break;
 80080f6:	e004      	b.n	8008102 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 80080f8:	6839      	ldr	r1, [r7, #0]
 80080fa:	6878      	ldr	r0, [r7, #4]
 80080fc:	f000 f840 	bl	8008180 <USBD_CtlError>
      break;
 8008100:	e000      	b.n	8008104 <USBD_ClrFeature+0x3c>
      break;
 8008102:	bf00      	nop
  }
}
 8008104:	bf00      	nop
 8008106:	3708      	adds	r7, #8
 8008108:	46bd      	mov	sp, r7
 800810a:	bd80      	pop	{r7, pc}

0800810c <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800810c:	b580      	push	{r7, lr}
 800810e:	b084      	sub	sp, #16
 8008110:	af00      	add	r7, sp, #0
 8008112:	6078      	str	r0, [r7, #4]
 8008114:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8008116:	683b      	ldr	r3, [r7, #0]
 8008118:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800811a:	68fb      	ldr	r3, [r7, #12]
 800811c:	781a      	ldrb	r2, [r3, #0]
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8008122:	68fb      	ldr	r3, [r7, #12]
 8008124:	3301      	adds	r3, #1
 8008126:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8008128:	68fb      	ldr	r3, [r7, #12]
 800812a:	781a      	ldrb	r2, [r3, #0]
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8008130:	68fb      	ldr	r3, [r7, #12]
 8008132:	3301      	adds	r3, #1
 8008134:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8008136:	68f8      	ldr	r0, [r7, #12]
 8008138:	f7ff fabb 	bl	80076b2 <SWAPBYTE>
 800813c:	4603      	mov	r3, r0
 800813e:	461a      	mov	r2, r3
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8008144:	68fb      	ldr	r3, [r7, #12]
 8008146:	3301      	adds	r3, #1
 8008148:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800814a:	68fb      	ldr	r3, [r7, #12]
 800814c:	3301      	adds	r3, #1
 800814e:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8008150:	68f8      	ldr	r0, [r7, #12]
 8008152:	f7ff faae 	bl	80076b2 <SWAPBYTE>
 8008156:	4603      	mov	r3, r0
 8008158:	461a      	mov	r2, r3
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800815e:	68fb      	ldr	r3, [r7, #12]
 8008160:	3301      	adds	r3, #1
 8008162:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008164:	68fb      	ldr	r3, [r7, #12]
 8008166:	3301      	adds	r3, #1
 8008168:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800816a:	68f8      	ldr	r0, [r7, #12]
 800816c:	f7ff faa1 	bl	80076b2 <SWAPBYTE>
 8008170:	4603      	mov	r3, r0
 8008172:	461a      	mov	r2, r3
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	80da      	strh	r2, [r3, #6]
}
 8008178:	bf00      	nop
 800817a:	3710      	adds	r7, #16
 800817c:	46bd      	mov	sp, r7
 800817e:	bd80      	pop	{r7, pc}

08008180 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008180:	b580      	push	{r7, lr}
 8008182:	b082      	sub	sp, #8
 8008184:	af00      	add	r7, sp, #0
 8008186:	6078      	str	r0, [r7, #4]
 8008188:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800818a:	2180      	movs	r1, #128	; 0x80
 800818c:	6878      	ldr	r0, [r7, #4]
 800818e:	f000 fd15 	bl	8008bbc <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8008192:	2100      	movs	r1, #0
 8008194:	6878      	ldr	r0, [r7, #4]
 8008196:	f000 fd11 	bl	8008bbc <USBD_LL_StallEP>
}
 800819a:	bf00      	nop
 800819c:	3708      	adds	r7, #8
 800819e:	46bd      	mov	sp, r7
 80081a0:	bd80      	pop	{r7, pc}

080081a2 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80081a2:	b580      	push	{r7, lr}
 80081a4:	b086      	sub	sp, #24
 80081a6:	af00      	add	r7, sp, #0
 80081a8:	60f8      	str	r0, [r7, #12]
 80081aa:	60b9      	str	r1, [r7, #8]
 80081ac:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80081ae:	2300      	movs	r3, #0
 80081b0:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 80081b2:	68fb      	ldr	r3, [r7, #12]
 80081b4:	2b00      	cmp	r3, #0
 80081b6:	d036      	beq.n	8008226 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 80081b8:	68fb      	ldr	r3, [r7, #12]
 80081ba:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 80081bc:	6938      	ldr	r0, [r7, #16]
 80081be:	f000 f836 	bl	800822e <USBD_GetLen>
 80081c2:	4603      	mov	r3, r0
 80081c4:	3301      	adds	r3, #1
 80081c6:	b29b      	uxth	r3, r3
 80081c8:	005b      	lsls	r3, r3, #1
 80081ca:	b29a      	uxth	r2, r3
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 80081d0:	7dfb      	ldrb	r3, [r7, #23]
 80081d2:	68ba      	ldr	r2, [r7, #8]
 80081d4:	4413      	add	r3, r2
 80081d6:	687a      	ldr	r2, [r7, #4]
 80081d8:	7812      	ldrb	r2, [r2, #0]
 80081da:	701a      	strb	r2, [r3, #0]
  idx++;
 80081dc:	7dfb      	ldrb	r3, [r7, #23]
 80081de:	3301      	adds	r3, #1
 80081e0:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 80081e2:	7dfb      	ldrb	r3, [r7, #23]
 80081e4:	68ba      	ldr	r2, [r7, #8]
 80081e6:	4413      	add	r3, r2
 80081e8:	2203      	movs	r2, #3
 80081ea:	701a      	strb	r2, [r3, #0]
  idx++;
 80081ec:	7dfb      	ldrb	r3, [r7, #23]
 80081ee:	3301      	adds	r3, #1
 80081f0:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 80081f2:	e013      	b.n	800821c <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 80081f4:	7dfb      	ldrb	r3, [r7, #23]
 80081f6:	68ba      	ldr	r2, [r7, #8]
 80081f8:	4413      	add	r3, r2
 80081fa:	693a      	ldr	r2, [r7, #16]
 80081fc:	7812      	ldrb	r2, [r2, #0]
 80081fe:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8008200:	693b      	ldr	r3, [r7, #16]
 8008202:	3301      	adds	r3, #1
 8008204:	613b      	str	r3, [r7, #16]
    idx++;
 8008206:	7dfb      	ldrb	r3, [r7, #23]
 8008208:	3301      	adds	r3, #1
 800820a:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800820c:	7dfb      	ldrb	r3, [r7, #23]
 800820e:	68ba      	ldr	r2, [r7, #8]
 8008210:	4413      	add	r3, r2
 8008212:	2200      	movs	r2, #0
 8008214:	701a      	strb	r2, [r3, #0]
    idx++;
 8008216:	7dfb      	ldrb	r3, [r7, #23]
 8008218:	3301      	adds	r3, #1
 800821a:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800821c:	693b      	ldr	r3, [r7, #16]
 800821e:	781b      	ldrb	r3, [r3, #0]
 8008220:	2b00      	cmp	r3, #0
 8008222:	d1e7      	bne.n	80081f4 <USBD_GetString+0x52>
 8008224:	e000      	b.n	8008228 <USBD_GetString+0x86>
    return;
 8008226:	bf00      	nop
  }
}
 8008228:	3718      	adds	r7, #24
 800822a:	46bd      	mov	sp, r7
 800822c:	bd80      	pop	{r7, pc}

0800822e <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800822e:	b480      	push	{r7}
 8008230:	b085      	sub	sp, #20
 8008232:	af00      	add	r7, sp, #0
 8008234:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8008236:	2300      	movs	r3, #0
 8008238:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800823e:	e005      	b.n	800824c <USBD_GetLen+0x1e>
  {
    len++;
 8008240:	7bfb      	ldrb	r3, [r7, #15]
 8008242:	3301      	adds	r3, #1
 8008244:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8008246:	68bb      	ldr	r3, [r7, #8]
 8008248:	3301      	adds	r3, #1
 800824a:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800824c:	68bb      	ldr	r3, [r7, #8]
 800824e:	781b      	ldrb	r3, [r3, #0]
 8008250:	2b00      	cmp	r3, #0
 8008252:	d1f5      	bne.n	8008240 <USBD_GetLen+0x12>
  }

  return len;
 8008254:	7bfb      	ldrb	r3, [r7, #15]
}
 8008256:	4618      	mov	r0, r3
 8008258:	3714      	adds	r7, #20
 800825a:	46bd      	mov	sp, r7
 800825c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008260:	4770      	bx	lr

08008262 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8008262:	b580      	push	{r7, lr}
 8008264:	b084      	sub	sp, #16
 8008266:	af00      	add	r7, sp, #0
 8008268:	60f8      	str	r0, [r7, #12]
 800826a:	60b9      	str	r1, [r7, #8]
 800826c:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800826e:	68fb      	ldr	r3, [r7, #12]
 8008270:	2202      	movs	r2, #2
 8008272:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8008276:	68fb      	ldr	r3, [r7, #12]
 8008278:	687a      	ldr	r2, [r7, #4]
 800827a:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800827c:	68fb      	ldr	r3, [r7, #12]
 800827e:	687a      	ldr	r2, [r7, #4]
 8008280:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	68ba      	ldr	r2, [r7, #8]
 8008286:	2100      	movs	r1, #0
 8008288:	68f8      	ldr	r0, [r7, #12]
 800828a:	f000 fd20 	bl	8008cce <USBD_LL_Transmit>

  return USBD_OK;
 800828e:	2300      	movs	r3, #0
}
 8008290:	4618      	mov	r0, r3
 8008292:	3710      	adds	r7, #16
 8008294:	46bd      	mov	sp, r7
 8008296:	bd80      	pop	{r7, pc}

08008298 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8008298:	b580      	push	{r7, lr}
 800829a:	b084      	sub	sp, #16
 800829c:	af00      	add	r7, sp, #0
 800829e:	60f8      	str	r0, [r7, #12]
 80082a0:	60b9      	str	r1, [r7, #8]
 80082a2:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	68ba      	ldr	r2, [r7, #8]
 80082a8:	2100      	movs	r1, #0
 80082aa:	68f8      	ldr	r0, [r7, #12]
 80082ac:	f000 fd0f 	bl	8008cce <USBD_LL_Transmit>

  return USBD_OK;
 80082b0:	2300      	movs	r3, #0
}
 80082b2:	4618      	mov	r0, r3
 80082b4:	3710      	adds	r7, #16
 80082b6:	46bd      	mov	sp, r7
 80082b8:	bd80      	pop	{r7, pc}

080082ba <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 80082ba:	b580      	push	{r7, lr}
 80082bc:	b084      	sub	sp, #16
 80082be:	af00      	add	r7, sp, #0
 80082c0:	60f8      	str	r0, [r7, #12]
 80082c2:	60b9      	str	r1, [r7, #8]
 80082c4:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80082c6:	68fb      	ldr	r3, [r7, #12]
 80082c8:	2203      	movs	r2, #3
 80082ca:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 80082ce:	68fb      	ldr	r3, [r7, #12]
 80082d0:	687a      	ldr	r2, [r7, #4]
 80082d2:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 80082d6:	68fb      	ldr	r3, [r7, #12]
 80082d8:	687a      	ldr	r2, [r7, #4]
 80082da:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	68ba      	ldr	r2, [r7, #8]
 80082e2:	2100      	movs	r1, #0
 80082e4:	68f8      	ldr	r0, [r7, #12]
 80082e6:	f000 fd13 	bl	8008d10 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80082ea:	2300      	movs	r3, #0
}
 80082ec:	4618      	mov	r0, r3
 80082ee:	3710      	adds	r7, #16
 80082f0:	46bd      	mov	sp, r7
 80082f2:	bd80      	pop	{r7, pc}

080082f4 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 80082f4:	b580      	push	{r7, lr}
 80082f6:	b084      	sub	sp, #16
 80082f8:	af00      	add	r7, sp, #0
 80082fa:	60f8      	str	r0, [r7, #12]
 80082fc:	60b9      	str	r1, [r7, #8]
 80082fe:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	68ba      	ldr	r2, [r7, #8]
 8008304:	2100      	movs	r1, #0
 8008306:	68f8      	ldr	r0, [r7, #12]
 8008308:	f000 fd02 	bl	8008d10 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800830c:	2300      	movs	r3, #0
}
 800830e:	4618      	mov	r0, r3
 8008310:	3710      	adds	r7, #16
 8008312:	46bd      	mov	sp, r7
 8008314:	bd80      	pop	{r7, pc}

08008316 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8008316:	b580      	push	{r7, lr}
 8008318:	b082      	sub	sp, #8
 800831a:	af00      	add	r7, sp, #0
 800831c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	2204      	movs	r2, #4
 8008322:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8008326:	2300      	movs	r3, #0
 8008328:	2200      	movs	r2, #0
 800832a:	2100      	movs	r1, #0
 800832c:	6878      	ldr	r0, [r7, #4]
 800832e:	f000 fcce 	bl	8008cce <USBD_LL_Transmit>

  return USBD_OK;
 8008332:	2300      	movs	r3, #0
}
 8008334:	4618      	mov	r0, r3
 8008336:	3708      	adds	r7, #8
 8008338:	46bd      	mov	sp, r7
 800833a:	bd80      	pop	{r7, pc}

0800833c <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800833c:	b580      	push	{r7, lr}
 800833e:	b082      	sub	sp, #8
 8008340:	af00      	add	r7, sp, #0
 8008342:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	2205      	movs	r2, #5
 8008348:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800834c:	2300      	movs	r3, #0
 800834e:	2200      	movs	r2, #0
 8008350:	2100      	movs	r1, #0
 8008352:	6878      	ldr	r0, [r7, #4]
 8008354:	f000 fcdc 	bl	8008d10 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008358:	2300      	movs	r3, #0
}
 800835a:	4618      	mov	r0, r3
 800835c:	3708      	adds	r7, #8
 800835e:	46bd      	mov	sp, r7
 8008360:	bd80      	pop	{r7, pc}
	...

08008364 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8008364:	b580      	push	{r7, lr}
 8008366:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8008368:	2200      	movs	r2, #0
 800836a:	4913      	ldr	r1, [pc, #76]	; (80083b8 <MX_USB_DEVICE_Init+0x54>)
 800836c:	4813      	ldr	r0, [pc, #76]	; (80083bc <MX_USB_DEVICE_Init+0x58>)
 800836e:	f7fe fe8f 	bl	8007090 <USBD_Init>
 8008372:	4603      	mov	r3, r0
 8008374:	2b00      	cmp	r3, #0
 8008376:	d001      	beq.n	800837c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8008378:	f7f8 fa22 	bl	80007c0 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800837c:	4910      	ldr	r1, [pc, #64]	; (80083c0 <MX_USB_DEVICE_Init+0x5c>)
 800837e:	480f      	ldr	r0, [pc, #60]	; (80083bc <MX_USB_DEVICE_Init+0x58>)
 8008380:	f7fe feb6 	bl	80070f0 <USBD_RegisterClass>
 8008384:	4603      	mov	r3, r0
 8008386:	2b00      	cmp	r3, #0
 8008388:	d001      	beq.n	800838e <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800838a:	f7f8 fa19 	bl	80007c0 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800838e:	490d      	ldr	r1, [pc, #52]	; (80083c4 <MX_USB_DEVICE_Init+0x60>)
 8008390:	480a      	ldr	r0, [pc, #40]	; (80083bc <MX_USB_DEVICE_Init+0x58>)
 8008392:	f7fe fdd7 	bl	8006f44 <USBD_CDC_RegisterInterface>
 8008396:	4603      	mov	r3, r0
 8008398:	2b00      	cmp	r3, #0
 800839a:	d001      	beq.n	80083a0 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800839c:	f7f8 fa10 	bl	80007c0 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80083a0:	4806      	ldr	r0, [pc, #24]	; (80083bc <MX_USB_DEVICE_Init+0x58>)
 80083a2:	f7fe fecc 	bl	800713e <USBD_Start>
 80083a6:	4603      	mov	r3, r0
 80083a8:	2b00      	cmp	r3, #0
 80083aa:	d001      	beq.n	80083b0 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 80083ac:	f7f8 fa08 	bl	80007c0 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  HAL_PWREx_EnableUSBVoltageDetector();
 80083b0:	f7fa ffae 	bl	8003310 <HAL_PWREx_EnableUSBVoltageDetector>

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80083b4:	bf00      	nop
 80083b6:	bd80      	pop	{r7, pc}
 80083b8:	24000140 	.word	0x24000140
 80083bc:	240002d8 	.word	0x240002d8
 80083c0:	24000028 	.word	0x24000028
 80083c4:	2400012c 	.word	0x2400012c

080083c8 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 80083c8:	b580      	push	{r7, lr}
 80083ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80083cc:	2200      	movs	r2, #0
 80083ce:	4905      	ldr	r1, [pc, #20]	; (80083e4 <CDC_Init_FS+0x1c>)
 80083d0:	4805      	ldr	r0, [pc, #20]	; (80083e8 <CDC_Init_FS+0x20>)
 80083d2:	f7fe fdcc 	bl	8006f6e <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80083d6:	4905      	ldr	r1, [pc, #20]	; (80083ec <CDC_Init_FS+0x24>)
 80083d8:	4803      	ldr	r0, [pc, #12]	; (80083e8 <CDC_Init_FS+0x20>)
 80083da:	f7fe fde6 	bl	8006faa <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 80083de:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 80083e0:	4618      	mov	r0, r3
 80083e2:	bd80      	pop	{r7, pc}
 80083e4:	24000da8 	.word	0x24000da8
 80083e8:	240002d8 	.word	0x240002d8
 80083ec:	240005a8 	.word	0x240005a8

080083f0 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 80083f0:	b480      	push	{r7}
 80083f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 80083f4:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80083f6:	4618      	mov	r0, r3
 80083f8:	46bd      	mov	sp, r7
 80083fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083fe:	4770      	bx	lr

08008400 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8008400:	b480      	push	{r7}
 8008402:	b083      	sub	sp, #12
 8008404:	af00      	add	r7, sp, #0
 8008406:	4603      	mov	r3, r0
 8008408:	6039      	str	r1, [r7, #0]
 800840a:	71fb      	strb	r3, [r7, #7]
 800840c:	4613      	mov	r3, r2
 800840e:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8008410:	79fb      	ldrb	r3, [r7, #7]
 8008412:	2b23      	cmp	r3, #35	; 0x23
 8008414:	d84a      	bhi.n	80084ac <CDC_Control_FS+0xac>
 8008416:	a201      	add	r2, pc, #4	; (adr r2, 800841c <CDC_Control_FS+0x1c>)
 8008418:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800841c:	080084ad 	.word	0x080084ad
 8008420:	080084ad 	.word	0x080084ad
 8008424:	080084ad 	.word	0x080084ad
 8008428:	080084ad 	.word	0x080084ad
 800842c:	080084ad 	.word	0x080084ad
 8008430:	080084ad 	.word	0x080084ad
 8008434:	080084ad 	.word	0x080084ad
 8008438:	080084ad 	.word	0x080084ad
 800843c:	080084ad 	.word	0x080084ad
 8008440:	080084ad 	.word	0x080084ad
 8008444:	080084ad 	.word	0x080084ad
 8008448:	080084ad 	.word	0x080084ad
 800844c:	080084ad 	.word	0x080084ad
 8008450:	080084ad 	.word	0x080084ad
 8008454:	080084ad 	.word	0x080084ad
 8008458:	080084ad 	.word	0x080084ad
 800845c:	080084ad 	.word	0x080084ad
 8008460:	080084ad 	.word	0x080084ad
 8008464:	080084ad 	.word	0x080084ad
 8008468:	080084ad 	.word	0x080084ad
 800846c:	080084ad 	.word	0x080084ad
 8008470:	080084ad 	.word	0x080084ad
 8008474:	080084ad 	.word	0x080084ad
 8008478:	080084ad 	.word	0x080084ad
 800847c:	080084ad 	.word	0x080084ad
 8008480:	080084ad 	.word	0x080084ad
 8008484:	080084ad 	.word	0x080084ad
 8008488:	080084ad 	.word	0x080084ad
 800848c:	080084ad 	.word	0x080084ad
 8008490:	080084ad 	.word	0x080084ad
 8008494:	080084ad 	.word	0x080084ad
 8008498:	080084ad 	.word	0x080084ad
 800849c:	080084ad 	.word	0x080084ad
 80084a0:	080084ad 	.word	0x080084ad
 80084a4:	080084ad 	.word	0x080084ad
 80084a8:	080084ad 	.word	0x080084ad
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 80084ac:	bf00      	nop
  }

  return (USBD_OK);
 80084ae:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80084b0:	4618      	mov	r0, r3
 80084b2:	370c      	adds	r7, #12
 80084b4:	46bd      	mov	sp, r7
 80084b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084ba:	4770      	bx	lr

080084bc <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 80084bc:	b580      	push	{r7, lr}
 80084be:	b082      	sub	sp, #8
 80084c0:	af00      	add	r7, sp, #0
 80084c2:	6078      	str	r0, [r7, #4]
 80084c4:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80084c6:	6879      	ldr	r1, [r7, #4]
 80084c8:	4805      	ldr	r0, [pc, #20]	; (80084e0 <CDC_Receive_FS+0x24>)
 80084ca:	f7fe fd6e 	bl	8006faa <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80084ce:	4804      	ldr	r0, [pc, #16]	; (80084e0 <CDC_Receive_FS+0x24>)
 80084d0:	f7fe fdb4 	bl	800703c <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 80084d4:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 80084d6:	4618      	mov	r0, r3
 80084d8:	3708      	adds	r7, #8
 80084da:	46bd      	mov	sp, r7
 80084dc:	bd80      	pop	{r7, pc}
 80084de:	bf00      	nop
 80084e0:	240002d8 	.word	0x240002d8

080084e4 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 80084e4:	b580      	push	{r7, lr}
 80084e6:	b084      	sub	sp, #16
 80084e8:	af00      	add	r7, sp, #0
 80084ea:	6078      	str	r0, [r7, #4]
 80084ec:	460b      	mov	r3, r1
 80084ee:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 80084f0:	2300      	movs	r3, #0
 80084f2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 80084f4:	4b0d      	ldr	r3, [pc, #52]	; (800852c <CDC_Transmit_FS+0x48>)
 80084f6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80084fa:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 80084fc:	68bb      	ldr	r3, [r7, #8]
 80084fe:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8008502:	2b00      	cmp	r3, #0
 8008504:	d001      	beq.n	800850a <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8008506:	2301      	movs	r3, #1
 8008508:	e00b      	b.n	8008522 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800850a:	887b      	ldrh	r3, [r7, #2]
 800850c:	461a      	mov	r2, r3
 800850e:	6879      	ldr	r1, [r7, #4]
 8008510:	4806      	ldr	r0, [pc, #24]	; (800852c <CDC_Transmit_FS+0x48>)
 8008512:	f7fe fd2c 	bl	8006f6e <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8008516:	4805      	ldr	r0, [pc, #20]	; (800852c <CDC_Transmit_FS+0x48>)
 8008518:	f7fe fd60 	bl	8006fdc <USBD_CDC_TransmitPacket>
 800851c:	4603      	mov	r3, r0
 800851e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8008520:	7bfb      	ldrb	r3, [r7, #15]
}
 8008522:	4618      	mov	r0, r3
 8008524:	3710      	adds	r7, #16
 8008526:	46bd      	mov	sp, r7
 8008528:	bd80      	pop	{r7, pc}
 800852a:	bf00      	nop
 800852c:	240002d8 	.word	0x240002d8

08008530 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8008530:	b480      	push	{r7}
 8008532:	b087      	sub	sp, #28
 8008534:	af00      	add	r7, sp, #0
 8008536:	60f8      	str	r0, [r7, #12]
 8008538:	60b9      	str	r1, [r7, #8]
 800853a:	4613      	mov	r3, r2
 800853c:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800853e:	2300      	movs	r3, #0
 8008540:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8008542:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008546:	4618      	mov	r0, r3
 8008548:	371c      	adds	r7, #28
 800854a:	46bd      	mov	sp, r7
 800854c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008550:	4770      	bx	lr
	...

08008554 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008554:	b480      	push	{r7}
 8008556:	b083      	sub	sp, #12
 8008558:	af00      	add	r7, sp, #0
 800855a:	4603      	mov	r3, r0
 800855c:	6039      	str	r1, [r7, #0]
 800855e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8008560:	683b      	ldr	r3, [r7, #0]
 8008562:	2212      	movs	r2, #18
 8008564:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8008566:	4b03      	ldr	r3, [pc, #12]	; (8008574 <USBD_FS_DeviceDescriptor+0x20>)
}
 8008568:	4618      	mov	r0, r3
 800856a:	370c      	adds	r7, #12
 800856c:	46bd      	mov	sp, r7
 800856e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008572:	4770      	bx	lr
 8008574:	2400015c 	.word	0x2400015c

08008578 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008578:	b480      	push	{r7}
 800857a:	b083      	sub	sp, #12
 800857c:	af00      	add	r7, sp, #0
 800857e:	4603      	mov	r3, r0
 8008580:	6039      	str	r1, [r7, #0]
 8008582:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8008584:	683b      	ldr	r3, [r7, #0]
 8008586:	2204      	movs	r2, #4
 8008588:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800858a:	4b03      	ldr	r3, [pc, #12]	; (8008598 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800858c:	4618      	mov	r0, r3
 800858e:	370c      	adds	r7, #12
 8008590:	46bd      	mov	sp, r7
 8008592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008596:	4770      	bx	lr
 8008598:	24000170 	.word	0x24000170

0800859c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800859c:	b580      	push	{r7, lr}
 800859e:	b082      	sub	sp, #8
 80085a0:	af00      	add	r7, sp, #0
 80085a2:	4603      	mov	r3, r0
 80085a4:	6039      	str	r1, [r7, #0]
 80085a6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80085a8:	79fb      	ldrb	r3, [r7, #7]
 80085aa:	2b00      	cmp	r3, #0
 80085ac:	d105      	bne.n	80085ba <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80085ae:	683a      	ldr	r2, [r7, #0]
 80085b0:	4907      	ldr	r1, [pc, #28]	; (80085d0 <USBD_FS_ProductStrDescriptor+0x34>)
 80085b2:	4808      	ldr	r0, [pc, #32]	; (80085d4 <USBD_FS_ProductStrDescriptor+0x38>)
 80085b4:	f7ff fdf5 	bl	80081a2 <USBD_GetString>
 80085b8:	e004      	b.n	80085c4 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80085ba:	683a      	ldr	r2, [r7, #0]
 80085bc:	4904      	ldr	r1, [pc, #16]	; (80085d0 <USBD_FS_ProductStrDescriptor+0x34>)
 80085be:	4805      	ldr	r0, [pc, #20]	; (80085d4 <USBD_FS_ProductStrDescriptor+0x38>)
 80085c0:	f7ff fdef 	bl	80081a2 <USBD_GetString>
  }
  return USBD_StrDesc;
 80085c4:	4b02      	ldr	r3, [pc, #8]	; (80085d0 <USBD_FS_ProductStrDescriptor+0x34>)
}
 80085c6:	4618      	mov	r0, r3
 80085c8:	3708      	adds	r7, #8
 80085ca:	46bd      	mov	sp, r7
 80085cc:	bd80      	pop	{r7, pc}
 80085ce:	bf00      	nop
 80085d0:	240015a8 	.word	0x240015a8
 80085d4:	08008ee4 	.word	0x08008ee4

080085d8 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80085d8:	b580      	push	{r7, lr}
 80085da:	b082      	sub	sp, #8
 80085dc:	af00      	add	r7, sp, #0
 80085de:	4603      	mov	r3, r0
 80085e0:	6039      	str	r1, [r7, #0]
 80085e2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80085e4:	683a      	ldr	r2, [r7, #0]
 80085e6:	4904      	ldr	r1, [pc, #16]	; (80085f8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 80085e8:	4804      	ldr	r0, [pc, #16]	; (80085fc <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80085ea:	f7ff fdda 	bl	80081a2 <USBD_GetString>
  return USBD_StrDesc;
 80085ee:	4b02      	ldr	r3, [pc, #8]	; (80085f8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 80085f0:	4618      	mov	r0, r3
 80085f2:	3708      	adds	r7, #8
 80085f4:	46bd      	mov	sp, r7
 80085f6:	bd80      	pop	{r7, pc}
 80085f8:	240015a8 	.word	0x240015a8
 80085fc:	08008efc 	.word	0x08008efc

08008600 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008600:	b580      	push	{r7, lr}
 8008602:	b082      	sub	sp, #8
 8008604:	af00      	add	r7, sp, #0
 8008606:	4603      	mov	r3, r0
 8008608:	6039      	str	r1, [r7, #0]
 800860a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800860c:	683b      	ldr	r3, [r7, #0]
 800860e:	221a      	movs	r2, #26
 8008610:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8008612:	f000 f843 	bl	800869c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8008616:	4b02      	ldr	r3, [pc, #8]	; (8008620 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8008618:	4618      	mov	r0, r3
 800861a:	3708      	adds	r7, #8
 800861c:	46bd      	mov	sp, r7
 800861e:	bd80      	pop	{r7, pc}
 8008620:	24000174 	.word	0x24000174

08008624 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008624:	b580      	push	{r7, lr}
 8008626:	b082      	sub	sp, #8
 8008628:	af00      	add	r7, sp, #0
 800862a:	4603      	mov	r3, r0
 800862c:	6039      	str	r1, [r7, #0]
 800862e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8008630:	79fb      	ldrb	r3, [r7, #7]
 8008632:	2b00      	cmp	r3, #0
 8008634:	d105      	bne.n	8008642 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008636:	683a      	ldr	r2, [r7, #0]
 8008638:	4907      	ldr	r1, [pc, #28]	; (8008658 <USBD_FS_ConfigStrDescriptor+0x34>)
 800863a:	4808      	ldr	r0, [pc, #32]	; (800865c <USBD_FS_ConfigStrDescriptor+0x38>)
 800863c:	f7ff fdb1 	bl	80081a2 <USBD_GetString>
 8008640:	e004      	b.n	800864c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008642:	683a      	ldr	r2, [r7, #0]
 8008644:	4904      	ldr	r1, [pc, #16]	; (8008658 <USBD_FS_ConfigStrDescriptor+0x34>)
 8008646:	4805      	ldr	r0, [pc, #20]	; (800865c <USBD_FS_ConfigStrDescriptor+0x38>)
 8008648:	f7ff fdab 	bl	80081a2 <USBD_GetString>
  }
  return USBD_StrDesc;
 800864c:	4b02      	ldr	r3, [pc, #8]	; (8008658 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800864e:	4618      	mov	r0, r3
 8008650:	3708      	adds	r7, #8
 8008652:	46bd      	mov	sp, r7
 8008654:	bd80      	pop	{r7, pc}
 8008656:	bf00      	nop
 8008658:	240015a8 	.word	0x240015a8
 800865c:	08008f10 	.word	0x08008f10

08008660 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008660:	b580      	push	{r7, lr}
 8008662:	b082      	sub	sp, #8
 8008664:	af00      	add	r7, sp, #0
 8008666:	4603      	mov	r3, r0
 8008668:	6039      	str	r1, [r7, #0]
 800866a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800866c:	79fb      	ldrb	r3, [r7, #7]
 800866e:	2b00      	cmp	r3, #0
 8008670:	d105      	bne.n	800867e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008672:	683a      	ldr	r2, [r7, #0]
 8008674:	4907      	ldr	r1, [pc, #28]	; (8008694 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008676:	4808      	ldr	r0, [pc, #32]	; (8008698 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008678:	f7ff fd93 	bl	80081a2 <USBD_GetString>
 800867c:	e004      	b.n	8008688 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800867e:	683a      	ldr	r2, [r7, #0]
 8008680:	4904      	ldr	r1, [pc, #16]	; (8008694 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008682:	4805      	ldr	r0, [pc, #20]	; (8008698 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008684:	f7ff fd8d 	bl	80081a2 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008688:	4b02      	ldr	r3, [pc, #8]	; (8008694 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800868a:	4618      	mov	r0, r3
 800868c:	3708      	adds	r7, #8
 800868e:	46bd      	mov	sp, r7
 8008690:	bd80      	pop	{r7, pc}
 8008692:	bf00      	nop
 8008694:	240015a8 	.word	0x240015a8
 8008698:	08008f1c 	.word	0x08008f1c

0800869c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800869c:	b580      	push	{r7, lr}
 800869e:	b084      	sub	sp, #16
 80086a0:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80086a2:	4b0f      	ldr	r3, [pc, #60]	; (80086e0 <Get_SerialNum+0x44>)
 80086a4:	681b      	ldr	r3, [r3, #0]
 80086a6:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80086a8:	4b0e      	ldr	r3, [pc, #56]	; (80086e4 <Get_SerialNum+0x48>)
 80086aa:	681b      	ldr	r3, [r3, #0]
 80086ac:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80086ae:	4b0e      	ldr	r3, [pc, #56]	; (80086e8 <Get_SerialNum+0x4c>)
 80086b0:	681b      	ldr	r3, [r3, #0]
 80086b2:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80086b4:	68fa      	ldr	r2, [r7, #12]
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	4413      	add	r3, r2
 80086ba:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80086bc:	68fb      	ldr	r3, [r7, #12]
 80086be:	2b00      	cmp	r3, #0
 80086c0:	d009      	beq.n	80086d6 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80086c2:	2208      	movs	r2, #8
 80086c4:	4909      	ldr	r1, [pc, #36]	; (80086ec <Get_SerialNum+0x50>)
 80086c6:	68f8      	ldr	r0, [r7, #12]
 80086c8:	f000 f814 	bl	80086f4 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80086cc:	2204      	movs	r2, #4
 80086ce:	4908      	ldr	r1, [pc, #32]	; (80086f0 <Get_SerialNum+0x54>)
 80086d0:	68b8      	ldr	r0, [r7, #8]
 80086d2:	f000 f80f 	bl	80086f4 <IntToUnicode>
  }
}
 80086d6:	bf00      	nop
 80086d8:	3710      	adds	r7, #16
 80086da:	46bd      	mov	sp, r7
 80086dc:	bd80      	pop	{r7, pc}
 80086de:	bf00      	nop
 80086e0:	1ff1e800 	.word	0x1ff1e800
 80086e4:	1ff1e804 	.word	0x1ff1e804
 80086e8:	1ff1e808 	.word	0x1ff1e808
 80086ec:	24000176 	.word	0x24000176
 80086f0:	24000186 	.word	0x24000186

080086f4 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80086f4:	b480      	push	{r7}
 80086f6:	b087      	sub	sp, #28
 80086f8:	af00      	add	r7, sp, #0
 80086fa:	60f8      	str	r0, [r7, #12]
 80086fc:	60b9      	str	r1, [r7, #8]
 80086fe:	4613      	mov	r3, r2
 8008700:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8008702:	2300      	movs	r3, #0
 8008704:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8008706:	2300      	movs	r3, #0
 8008708:	75fb      	strb	r3, [r7, #23]
 800870a:	e027      	b.n	800875c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800870c:	68fb      	ldr	r3, [r7, #12]
 800870e:	0f1b      	lsrs	r3, r3, #28
 8008710:	2b09      	cmp	r3, #9
 8008712:	d80b      	bhi.n	800872c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8008714:	68fb      	ldr	r3, [r7, #12]
 8008716:	0f1b      	lsrs	r3, r3, #28
 8008718:	b2da      	uxtb	r2, r3
 800871a:	7dfb      	ldrb	r3, [r7, #23]
 800871c:	005b      	lsls	r3, r3, #1
 800871e:	4619      	mov	r1, r3
 8008720:	68bb      	ldr	r3, [r7, #8]
 8008722:	440b      	add	r3, r1
 8008724:	3230      	adds	r2, #48	; 0x30
 8008726:	b2d2      	uxtb	r2, r2
 8008728:	701a      	strb	r2, [r3, #0]
 800872a:	e00a      	b.n	8008742 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800872c:	68fb      	ldr	r3, [r7, #12]
 800872e:	0f1b      	lsrs	r3, r3, #28
 8008730:	b2da      	uxtb	r2, r3
 8008732:	7dfb      	ldrb	r3, [r7, #23]
 8008734:	005b      	lsls	r3, r3, #1
 8008736:	4619      	mov	r1, r3
 8008738:	68bb      	ldr	r3, [r7, #8]
 800873a:	440b      	add	r3, r1
 800873c:	3237      	adds	r2, #55	; 0x37
 800873e:	b2d2      	uxtb	r2, r2
 8008740:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8008742:	68fb      	ldr	r3, [r7, #12]
 8008744:	011b      	lsls	r3, r3, #4
 8008746:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8008748:	7dfb      	ldrb	r3, [r7, #23]
 800874a:	005b      	lsls	r3, r3, #1
 800874c:	3301      	adds	r3, #1
 800874e:	68ba      	ldr	r2, [r7, #8]
 8008750:	4413      	add	r3, r2
 8008752:	2200      	movs	r2, #0
 8008754:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8008756:	7dfb      	ldrb	r3, [r7, #23]
 8008758:	3301      	adds	r3, #1
 800875a:	75fb      	strb	r3, [r7, #23]
 800875c:	7dfa      	ldrb	r2, [r7, #23]
 800875e:	79fb      	ldrb	r3, [r7, #7]
 8008760:	429a      	cmp	r2, r3
 8008762:	d3d3      	bcc.n	800870c <IntToUnicode+0x18>
  }
}
 8008764:	bf00      	nop
 8008766:	bf00      	nop
 8008768:	371c      	adds	r7, #28
 800876a:	46bd      	mov	sp, r7
 800876c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008770:	4770      	bx	lr
	...

08008774 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8008774:	b580      	push	{r7, lr}
 8008776:	b0b8      	sub	sp, #224	; 0xe0
 8008778:	af00      	add	r7, sp, #0
 800877a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800877c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8008780:	2200      	movs	r2, #0
 8008782:	601a      	str	r2, [r3, #0]
 8008784:	605a      	str	r2, [r3, #4]
 8008786:	609a      	str	r2, [r3, #8]
 8008788:	60da      	str	r2, [r3, #12]
 800878a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800878c:	f107 0310 	add.w	r3, r7, #16
 8008790:	22bc      	movs	r2, #188	; 0xbc
 8008792:	2100      	movs	r1, #0
 8008794:	4618      	mov	r0, r3
 8008796:	f000 fb65 	bl	8008e64 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	681b      	ldr	r3, [r3, #0]
 800879e:	4a33      	ldr	r2, [pc, #204]	; (800886c <HAL_PCD_MspInit+0xf8>)
 80087a0:	4293      	cmp	r3, r2
 80087a2:	d15e      	bne.n	8008862 <HAL_PCD_MspInit+0xee>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80087a4:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80087a8:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 80087aa:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80087ae:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80087b2:	f107 0310 	add.w	r3, r7, #16
 80087b6:	4618      	mov	r0, r3
 80087b8:	f7fb fd28 	bl	800420c <HAL_RCCEx_PeriphCLKConfig>
 80087bc:	4603      	mov	r3, r0
 80087be:	2b00      	cmp	r3, #0
 80087c0:	d001      	beq.n	80087c6 <HAL_PCD_MspInit+0x52>
    {
      Error_Handler();
 80087c2:	f7f7 fffd 	bl	80007c0 <Error_Handler>
    }
  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 80087c6:	f7fa fda3 	bl	8003310 <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80087ca:	4b29      	ldr	r3, [pc, #164]	; (8008870 <HAL_PCD_MspInit+0xfc>)
 80087cc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80087d0:	4a27      	ldr	r2, [pc, #156]	; (8008870 <HAL_PCD_MspInit+0xfc>)
 80087d2:	f043 0301 	orr.w	r3, r3, #1
 80087d6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80087da:	4b25      	ldr	r3, [pc, #148]	; (8008870 <HAL_PCD_MspInit+0xfc>)
 80087dc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80087e0:	f003 0301 	and.w	r3, r3, #1
 80087e4:	60fb      	str	r3, [r7, #12]
 80087e6:	68fb      	ldr	r3, [r7, #12]
    PA8     ------> USB_OTG_FS_SOF
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 80087e8:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 80087ec:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80087f0:	2302      	movs	r3, #2
 80087f2:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80087f6:	2300      	movs	r3, #0
 80087f8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80087fc:	2300      	movs	r3, #0
 80087fe:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8008802:	230a      	movs	r3, #10
 8008804:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008808:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800880c:	4619      	mov	r1, r3
 800880e:	4819      	ldr	r0, [pc, #100]	; (8008874 <HAL_PCD_MspInit+0x100>)
 8008810:	f7f9 f9b8 	bl	8001b84 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8008814:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008818:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800881c:	2300      	movs	r3, #0
 800881e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008822:	2300      	movs	r3, #0
 8008824:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008828:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800882c:	4619      	mov	r1, r3
 800882e:	4811      	ldr	r0, [pc, #68]	; (8008874 <HAL_PCD_MspInit+0x100>)
 8008830:	f7f9 f9a8 	bl	8001b84 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8008834:	4b0e      	ldr	r3, [pc, #56]	; (8008870 <HAL_PCD_MspInit+0xfc>)
 8008836:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800883a:	4a0d      	ldr	r2, [pc, #52]	; (8008870 <HAL_PCD_MspInit+0xfc>)
 800883c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8008840:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8008844:	4b0a      	ldr	r3, [pc, #40]	; (8008870 <HAL_PCD_MspInit+0xfc>)
 8008846:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800884a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800884e:	60bb      	str	r3, [r7, #8]
 8008850:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8008852:	2200      	movs	r2, #0
 8008854:	2100      	movs	r1, #0
 8008856:	2065      	movs	r0, #101	; 0x65
 8008858:	f7f8 fac1 	bl	8000dde <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800885c:	2065      	movs	r0, #101	; 0x65
 800885e:	f7f8 fad8 	bl	8000e12 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8008862:	bf00      	nop
 8008864:	37e0      	adds	r7, #224	; 0xe0
 8008866:	46bd      	mov	sp, r7
 8008868:	bd80      	pop	{r7, pc}
 800886a:	bf00      	nop
 800886c:	40080000 	.word	0x40080000
 8008870:	58024400 	.word	0x58024400
 8008874:	58020000 	.word	0x58020000

08008878 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008878:	b580      	push	{r7, lr}
 800887a:	b082      	sub	sp, #8
 800887c:	af00      	add	r7, sp, #0
 800887e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800888c:	4619      	mov	r1, r3
 800888e:	4610      	mov	r0, r2
 8008890:	f7fe fca0 	bl	80071d4 <USBD_LL_SetupStage>
}
 8008894:	bf00      	nop
 8008896:	3708      	adds	r7, #8
 8008898:	46bd      	mov	sp, r7
 800889a:	bd80      	pop	{r7, pc}

0800889c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800889c:	b580      	push	{r7, lr}
 800889e:	b082      	sub	sp, #8
 80088a0:	af00      	add	r7, sp, #0
 80088a2:	6078      	str	r0, [r7, #4]
 80088a4:	460b      	mov	r3, r1
 80088a6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 80088ae:	78fa      	ldrb	r2, [r7, #3]
 80088b0:	6879      	ldr	r1, [r7, #4]
 80088b2:	4613      	mov	r3, r2
 80088b4:	00db      	lsls	r3, r3, #3
 80088b6:	1a9b      	subs	r3, r3, r2
 80088b8:	009b      	lsls	r3, r3, #2
 80088ba:	440b      	add	r3, r1
 80088bc:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80088c0:	681a      	ldr	r2, [r3, #0]
 80088c2:	78fb      	ldrb	r3, [r7, #3]
 80088c4:	4619      	mov	r1, r3
 80088c6:	f7fe fcda 	bl	800727e <USBD_LL_DataOutStage>
}
 80088ca:	bf00      	nop
 80088cc:	3708      	adds	r7, #8
 80088ce:	46bd      	mov	sp, r7
 80088d0:	bd80      	pop	{r7, pc}

080088d2 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80088d2:	b580      	push	{r7, lr}
 80088d4:	b082      	sub	sp, #8
 80088d6:	af00      	add	r7, sp, #0
 80088d8:	6078      	str	r0, [r7, #4]
 80088da:	460b      	mov	r3, r1
 80088dc:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 80088e4:	78fa      	ldrb	r2, [r7, #3]
 80088e6:	6879      	ldr	r1, [r7, #4]
 80088e8:	4613      	mov	r3, r2
 80088ea:	00db      	lsls	r3, r3, #3
 80088ec:	1a9b      	subs	r3, r3, r2
 80088ee:	009b      	lsls	r3, r3, #2
 80088f0:	440b      	add	r3, r1
 80088f2:	3348      	adds	r3, #72	; 0x48
 80088f4:	681a      	ldr	r2, [r3, #0]
 80088f6:	78fb      	ldrb	r3, [r7, #3]
 80088f8:	4619      	mov	r1, r3
 80088fa:	f7fe fd23 	bl	8007344 <USBD_LL_DataInStage>
}
 80088fe:	bf00      	nop
 8008900:	3708      	adds	r7, #8
 8008902:	46bd      	mov	sp, r7
 8008904:	bd80      	pop	{r7, pc}

08008906 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008906:	b580      	push	{r7, lr}
 8008908:	b082      	sub	sp, #8
 800890a:	af00      	add	r7, sp, #0
 800890c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008914:	4618      	mov	r0, r3
 8008916:	f7fe fe37 	bl	8007588 <USBD_LL_SOF>
}
 800891a:	bf00      	nop
 800891c:	3708      	adds	r7, #8
 800891e:	46bd      	mov	sp, r7
 8008920:	bd80      	pop	{r7, pc}

08008922 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008922:	b580      	push	{r7, lr}
 8008924:	b084      	sub	sp, #16
 8008926:	af00      	add	r7, sp, #0
 8008928:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800892a:	2301      	movs	r3, #1
 800892c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	68db      	ldr	r3, [r3, #12]
 8008932:	2b00      	cmp	r3, #0
 8008934:	d102      	bne.n	800893c <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8008936:	2300      	movs	r3, #0
 8008938:	73fb      	strb	r3, [r7, #15]
 800893a:	e008      	b.n	800894e <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	68db      	ldr	r3, [r3, #12]
 8008940:	2b02      	cmp	r3, #2
 8008942:	d102      	bne.n	800894a <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8008944:	2301      	movs	r3, #1
 8008946:	73fb      	strb	r3, [r7, #15]
 8008948:	e001      	b.n	800894e <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800894a:	f7f7 ff39 	bl	80007c0 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008954:	7bfa      	ldrb	r2, [r7, #15]
 8008956:	4611      	mov	r1, r2
 8008958:	4618      	mov	r0, r3
 800895a:	f7fe fdd7 	bl	800750c <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008964:	4618      	mov	r0, r3
 8008966:	f7fe fd83 	bl	8007470 <USBD_LL_Reset>
}
 800896a:	bf00      	nop
 800896c:	3710      	adds	r7, #16
 800896e:	46bd      	mov	sp, r7
 8008970:	bd80      	pop	{r7, pc}
	...

08008974 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008974:	b580      	push	{r7, lr}
 8008976:	b082      	sub	sp, #8
 8008978:	af00      	add	r7, sp, #0
 800897a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008982:	4618      	mov	r0, r3
 8008984:	f7fe fdd2 	bl	800752c <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	681b      	ldr	r3, [r3, #0]
 800898c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008990:	681b      	ldr	r3, [r3, #0]
 8008992:	687a      	ldr	r2, [r7, #4]
 8008994:	6812      	ldr	r2, [r2, #0]
 8008996:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800899a:	f043 0301 	orr.w	r3, r3, #1
 800899e:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	6a1b      	ldr	r3, [r3, #32]
 80089a4:	2b00      	cmp	r3, #0
 80089a6:	d005      	beq.n	80089b4 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80089a8:	4b04      	ldr	r3, [pc, #16]	; (80089bc <HAL_PCD_SuspendCallback+0x48>)
 80089aa:	691b      	ldr	r3, [r3, #16]
 80089ac:	4a03      	ldr	r2, [pc, #12]	; (80089bc <HAL_PCD_SuspendCallback+0x48>)
 80089ae:	f043 0306 	orr.w	r3, r3, #6
 80089b2:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80089b4:	bf00      	nop
 80089b6:	3708      	adds	r7, #8
 80089b8:	46bd      	mov	sp, r7
 80089ba:	bd80      	pop	{r7, pc}
 80089bc:	e000ed00 	.word	0xe000ed00

080089c0 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80089c0:	b580      	push	{r7, lr}
 80089c2:	b082      	sub	sp, #8
 80089c4:	af00      	add	r7, sp, #0
 80089c6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80089ce:	4618      	mov	r0, r3
 80089d0:	f7fe fdc2 	bl	8007558 <USBD_LL_Resume>
}
 80089d4:	bf00      	nop
 80089d6:	3708      	adds	r7, #8
 80089d8:	46bd      	mov	sp, r7
 80089da:	bd80      	pop	{r7, pc}

080089dc <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80089dc:	b580      	push	{r7, lr}
 80089de:	b082      	sub	sp, #8
 80089e0:	af00      	add	r7, sp, #0
 80089e2:	6078      	str	r0, [r7, #4]
 80089e4:	460b      	mov	r3, r1
 80089e6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80089ee:	78fa      	ldrb	r2, [r7, #3]
 80089f0:	4611      	mov	r1, r2
 80089f2:	4618      	mov	r0, r3
 80089f4:	f7fe fe10 	bl	8007618 <USBD_LL_IsoOUTIncomplete>
}
 80089f8:	bf00      	nop
 80089fa:	3708      	adds	r7, #8
 80089fc:	46bd      	mov	sp, r7
 80089fe:	bd80      	pop	{r7, pc}

08008a00 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008a00:	b580      	push	{r7, lr}
 8008a02:	b082      	sub	sp, #8
 8008a04:	af00      	add	r7, sp, #0
 8008a06:	6078      	str	r0, [r7, #4]
 8008a08:	460b      	mov	r3, r1
 8008a0a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008a12:	78fa      	ldrb	r2, [r7, #3]
 8008a14:	4611      	mov	r1, r2
 8008a16:	4618      	mov	r0, r3
 8008a18:	f7fe fdd8 	bl	80075cc <USBD_LL_IsoINIncomplete>
}
 8008a1c:	bf00      	nop
 8008a1e:	3708      	adds	r7, #8
 8008a20:	46bd      	mov	sp, r7
 8008a22:	bd80      	pop	{r7, pc}

08008a24 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008a24:	b580      	push	{r7, lr}
 8008a26:	b082      	sub	sp, #8
 8008a28:	af00      	add	r7, sp, #0
 8008a2a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008a32:	4618      	mov	r0, r3
 8008a34:	f7fe fe16 	bl	8007664 <USBD_LL_DevConnected>
}
 8008a38:	bf00      	nop
 8008a3a:	3708      	adds	r7, #8
 8008a3c:	46bd      	mov	sp, r7
 8008a3e:	bd80      	pop	{r7, pc}

08008a40 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008a40:	b580      	push	{r7, lr}
 8008a42:	b082      	sub	sp, #8
 8008a44:	af00      	add	r7, sp, #0
 8008a46:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008a4e:	4618      	mov	r0, r3
 8008a50:	f7fe fe13 	bl	800767a <USBD_LL_DevDisconnected>
}
 8008a54:	bf00      	nop
 8008a56:	3708      	adds	r7, #8
 8008a58:	46bd      	mov	sp, r7
 8008a5a:	bd80      	pop	{r7, pc}

08008a5c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8008a5c:	b580      	push	{r7, lr}
 8008a5e:	b082      	sub	sp, #8
 8008a60:	af00      	add	r7, sp, #0
 8008a62:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	781b      	ldrb	r3, [r3, #0]
 8008a68:	2b00      	cmp	r3, #0
 8008a6a:	d13e      	bne.n	8008aea <USBD_LL_Init+0x8e>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8008a6c:	4a21      	ldr	r2, [pc, #132]	; (8008af4 <USBD_LL_Init+0x98>)
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	4a1f      	ldr	r2, [pc, #124]	; (8008af4 <USBD_LL_Init+0x98>)
 8008a78:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8008a7c:	4b1d      	ldr	r3, [pc, #116]	; (8008af4 <USBD_LL_Init+0x98>)
 8008a7e:	4a1e      	ldr	r2, [pc, #120]	; (8008af8 <USBD_LL_Init+0x9c>)
 8008a80:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 8008a82:	4b1c      	ldr	r3, [pc, #112]	; (8008af4 <USBD_LL_Init+0x98>)
 8008a84:	2209      	movs	r2, #9
 8008a86:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8008a88:	4b1a      	ldr	r3, [pc, #104]	; (8008af4 <USBD_LL_Init+0x98>)
 8008a8a:	2202      	movs	r2, #2
 8008a8c:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8008a8e:	4b19      	ldr	r3, [pc, #100]	; (8008af4 <USBD_LL_Init+0x98>)
 8008a90:	2200      	movs	r2, #0
 8008a92:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8008a94:	4b17      	ldr	r3, [pc, #92]	; (8008af4 <USBD_LL_Init+0x98>)
 8008a96:	2202      	movs	r2, #2
 8008a98:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8008a9a:	4b16      	ldr	r3, [pc, #88]	; (8008af4 <USBD_LL_Init+0x98>)
 8008a9c:	2201      	movs	r2, #1
 8008a9e:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8008aa0:	4b14      	ldr	r3, [pc, #80]	; (8008af4 <USBD_LL_Init+0x98>)
 8008aa2:	2200      	movs	r2, #0
 8008aa4:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8008aa6:	4b13      	ldr	r3, [pc, #76]	; (8008af4 <USBD_LL_Init+0x98>)
 8008aa8:	2200      	movs	r2, #0
 8008aaa:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 8008aac:	4b11      	ldr	r3, [pc, #68]	; (8008af4 <USBD_LL_Init+0x98>)
 8008aae:	2201      	movs	r2, #1
 8008ab0:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8008ab2:	4b10      	ldr	r3, [pc, #64]	; (8008af4 <USBD_LL_Init+0x98>)
 8008ab4:	2201      	movs	r2, #1
 8008ab6:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8008ab8:	4b0e      	ldr	r3, [pc, #56]	; (8008af4 <USBD_LL_Init+0x98>)
 8008aba:	2200      	movs	r2, #0
 8008abc:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8008abe:	480d      	ldr	r0, [pc, #52]	; (8008af4 <USBD_LL_Init+0x98>)
 8008ac0:	f7f9 fa10 	bl	8001ee4 <HAL_PCD_Init>
 8008ac4:	4603      	mov	r3, r0
 8008ac6:	2b00      	cmp	r3, #0
 8008ac8:	d001      	beq.n	8008ace <USBD_LL_Init+0x72>
  {
    Error_Handler( );
 8008aca:	f7f7 fe79 	bl	80007c0 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN TxRx_Configuration */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8008ace:	2180      	movs	r1, #128	; 0x80
 8008ad0:	4808      	ldr	r0, [pc, #32]	; (8008af4 <USBD_LL_Init+0x98>)
 8008ad2:	f7fa fba2 	bl	800321a <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8008ad6:	2240      	movs	r2, #64	; 0x40
 8008ad8:	2100      	movs	r1, #0
 8008ada:	4806      	ldr	r0, [pc, #24]	; (8008af4 <USBD_LL_Init+0x98>)
 8008adc:	f7fa fb56 	bl	800318c <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8008ae0:	2280      	movs	r2, #128	; 0x80
 8008ae2:	2101      	movs	r1, #1
 8008ae4:	4803      	ldr	r0, [pc, #12]	; (8008af4 <USBD_LL_Init+0x98>)
 8008ae6:	f7fa fb51 	bl	800318c <HAL_PCDEx_SetTxFiFo>
  /* USER CODE END TxRx_Configuration */
  }
  return USBD_OK;
 8008aea:	2300      	movs	r3, #0
}
 8008aec:	4618      	mov	r0, r3
 8008aee:	3708      	adds	r7, #8
 8008af0:	46bd      	mov	sp, r7
 8008af2:	bd80      	pop	{r7, pc}
 8008af4:	240017a8 	.word	0x240017a8
 8008af8:	40080000 	.word	0x40080000

08008afc <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8008afc:	b580      	push	{r7, lr}
 8008afe:	b084      	sub	sp, #16
 8008b00:	af00      	add	r7, sp, #0
 8008b02:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008b04:	2300      	movs	r3, #0
 8008b06:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008b08:	2300      	movs	r3, #0
 8008b0a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008b12:	4618      	mov	r0, r3
 8008b14:	f7f9 fb0a 	bl	800212c <HAL_PCD_Start>
 8008b18:	4603      	mov	r3, r0
 8008b1a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008b1c:	7bfb      	ldrb	r3, [r7, #15]
 8008b1e:	4618      	mov	r0, r3
 8008b20:	f000 f942 	bl	8008da8 <USBD_Get_USB_Status>
 8008b24:	4603      	mov	r3, r0
 8008b26:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008b28:	7bbb      	ldrb	r3, [r7, #14]
}
 8008b2a:	4618      	mov	r0, r3
 8008b2c:	3710      	adds	r7, #16
 8008b2e:	46bd      	mov	sp, r7
 8008b30:	bd80      	pop	{r7, pc}

08008b32 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8008b32:	b580      	push	{r7, lr}
 8008b34:	b084      	sub	sp, #16
 8008b36:	af00      	add	r7, sp, #0
 8008b38:	6078      	str	r0, [r7, #4]
 8008b3a:	4608      	mov	r0, r1
 8008b3c:	4611      	mov	r1, r2
 8008b3e:	461a      	mov	r2, r3
 8008b40:	4603      	mov	r3, r0
 8008b42:	70fb      	strb	r3, [r7, #3]
 8008b44:	460b      	mov	r3, r1
 8008b46:	70bb      	strb	r3, [r7, #2]
 8008b48:	4613      	mov	r3, r2
 8008b4a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008b4c:	2300      	movs	r3, #0
 8008b4e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008b50:	2300      	movs	r3, #0
 8008b52:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8008b5a:	78bb      	ldrb	r3, [r7, #2]
 8008b5c:	883a      	ldrh	r2, [r7, #0]
 8008b5e:	78f9      	ldrb	r1, [r7, #3]
 8008b60:	f7f9 ff1b 	bl	800299a <HAL_PCD_EP_Open>
 8008b64:	4603      	mov	r3, r0
 8008b66:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008b68:	7bfb      	ldrb	r3, [r7, #15]
 8008b6a:	4618      	mov	r0, r3
 8008b6c:	f000 f91c 	bl	8008da8 <USBD_Get_USB_Status>
 8008b70:	4603      	mov	r3, r0
 8008b72:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008b74:	7bbb      	ldrb	r3, [r7, #14]
}
 8008b76:	4618      	mov	r0, r3
 8008b78:	3710      	adds	r7, #16
 8008b7a:	46bd      	mov	sp, r7
 8008b7c:	bd80      	pop	{r7, pc}

08008b7e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008b7e:	b580      	push	{r7, lr}
 8008b80:	b084      	sub	sp, #16
 8008b82:	af00      	add	r7, sp, #0
 8008b84:	6078      	str	r0, [r7, #4]
 8008b86:	460b      	mov	r3, r1
 8008b88:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008b8a:	2300      	movs	r3, #0
 8008b8c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008b8e:	2300      	movs	r3, #0
 8008b90:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008b98:	78fa      	ldrb	r2, [r7, #3]
 8008b9a:	4611      	mov	r1, r2
 8008b9c:	4618      	mov	r0, r3
 8008b9e:	f7f9 ff64 	bl	8002a6a <HAL_PCD_EP_Close>
 8008ba2:	4603      	mov	r3, r0
 8008ba4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008ba6:	7bfb      	ldrb	r3, [r7, #15]
 8008ba8:	4618      	mov	r0, r3
 8008baa:	f000 f8fd 	bl	8008da8 <USBD_Get_USB_Status>
 8008bae:	4603      	mov	r3, r0
 8008bb0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008bb2:	7bbb      	ldrb	r3, [r7, #14]
}
 8008bb4:	4618      	mov	r0, r3
 8008bb6:	3710      	adds	r7, #16
 8008bb8:	46bd      	mov	sp, r7
 8008bba:	bd80      	pop	{r7, pc}

08008bbc <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008bbc:	b580      	push	{r7, lr}
 8008bbe:	b084      	sub	sp, #16
 8008bc0:	af00      	add	r7, sp, #0
 8008bc2:	6078      	str	r0, [r7, #4]
 8008bc4:	460b      	mov	r3, r1
 8008bc6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008bc8:	2300      	movs	r3, #0
 8008bca:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008bcc:	2300      	movs	r3, #0
 8008bce:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008bd6:	78fa      	ldrb	r2, [r7, #3]
 8008bd8:	4611      	mov	r1, r2
 8008bda:	4618      	mov	r0, r3
 8008bdc:	f7fa f83c 	bl	8002c58 <HAL_PCD_EP_SetStall>
 8008be0:	4603      	mov	r3, r0
 8008be2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008be4:	7bfb      	ldrb	r3, [r7, #15]
 8008be6:	4618      	mov	r0, r3
 8008be8:	f000 f8de 	bl	8008da8 <USBD_Get_USB_Status>
 8008bec:	4603      	mov	r3, r0
 8008bee:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008bf0:	7bbb      	ldrb	r3, [r7, #14]
}
 8008bf2:	4618      	mov	r0, r3
 8008bf4:	3710      	adds	r7, #16
 8008bf6:	46bd      	mov	sp, r7
 8008bf8:	bd80      	pop	{r7, pc}

08008bfa <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008bfa:	b580      	push	{r7, lr}
 8008bfc:	b084      	sub	sp, #16
 8008bfe:	af00      	add	r7, sp, #0
 8008c00:	6078      	str	r0, [r7, #4]
 8008c02:	460b      	mov	r3, r1
 8008c04:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008c06:	2300      	movs	r3, #0
 8008c08:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008c0a:	2300      	movs	r3, #0
 8008c0c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008c14:	78fa      	ldrb	r2, [r7, #3]
 8008c16:	4611      	mov	r1, r2
 8008c18:	4618      	mov	r0, r3
 8008c1a:	f7fa f881 	bl	8002d20 <HAL_PCD_EP_ClrStall>
 8008c1e:	4603      	mov	r3, r0
 8008c20:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008c22:	7bfb      	ldrb	r3, [r7, #15]
 8008c24:	4618      	mov	r0, r3
 8008c26:	f000 f8bf 	bl	8008da8 <USBD_Get_USB_Status>
 8008c2a:	4603      	mov	r3, r0
 8008c2c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008c2e:	7bbb      	ldrb	r3, [r7, #14]
}
 8008c30:	4618      	mov	r0, r3
 8008c32:	3710      	adds	r7, #16
 8008c34:	46bd      	mov	sp, r7
 8008c36:	bd80      	pop	{r7, pc}

08008c38 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008c38:	b480      	push	{r7}
 8008c3a:	b085      	sub	sp, #20
 8008c3c:	af00      	add	r7, sp, #0
 8008c3e:	6078      	str	r0, [r7, #4]
 8008c40:	460b      	mov	r3, r1
 8008c42:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008c4a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8008c4c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008c50:	2b00      	cmp	r3, #0
 8008c52:	da0b      	bge.n	8008c6c <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8008c54:	78fb      	ldrb	r3, [r7, #3]
 8008c56:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008c5a:	68f9      	ldr	r1, [r7, #12]
 8008c5c:	4613      	mov	r3, r2
 8008c5e:	00db      	lsls	r3, r3, #3
 8008c60:	1a9b      	subs	r3, r3, r2
 8008c62:	009b      	lsls	r3, r3, #2
 8008c64:	440b      	add	r3, r1
 8008c66:	333e      	adds	r3, #62	; 0x3e
 8008c68:	781b      	ldrb	r3, [r3, #0]
 8008c6a:	e00b      	b.n	8008c84 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8008c6c:	78fb      	ldrb	r3, [r7, #3]
 8008c6e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008c72:	68f9      	ldr	r1, [r7, #12]
 8008c74:	4613      	mov	r3, r2
 8008c76:	00db      	lsls	r3, r3, #3
 8008c78:	1a9b      	subs	r3, r3, r2
 8008c7a:	009b      	lsls	r3, r3, #2
 8008c7c:	440b      	add	r3, r1
 8008c7e:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8008c82:	781b      	ldrb	r3, [r3, #0]
  }
}
 8008c84:	4618      	mov	r0, r3
 8008c86:	3714      	adds	r7, #20
 8008c88:	46bd      	mov	sp, r7
 8008c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c8e:	4770      	bx	lr

08008c90 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8008c90:	b580      	push	{r7, lr}
 8008c92:	b084      	sub	sp, #16
 8008c94:	af00      	add	r7, sp, #0
 8008c96:	6078      	str	r0, [r7, #4]
 8008c98:	460b      	mov	r3, r1
 8008c9a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008c9c:	2300      	movs	r3, #0
 8008c9e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008ca0:	2300      	movs	r3, #0
 8008ca2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008caa:	78fa      	ldrb	r2, [r7, #3]
 8008cac:	4611      	mov	r1, r2
 8008cae:	4618      	mov	r0, r3
 8008cb0:	f7f9 fe4e 	bl	8002950 <HAL_PCD_SetAddress>
 8008cb4:	4603      	mov	r3, r0
 8008cb6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008cb8:	7bfb      	ldrb	r3, [r7, #15]
 8008cba:	4618      	mov	r0, r3
 8008cbc:	f000 f874 	bl	8008da8 <USBD_Get_USB_Status>
 8008cc0:	4603      	mov	r3, r0
 8008cc2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008cc4:	7bbb      	ldrb	r3, [r7, #14]
}
 8008cc6:	4618      	mov	r0, r3
 8008cc8:	3710      	adds	r7, #16
 8008cca:	46bd      	mov	sp, r7
 8008ccc:	bd80      	pop	{r7, pc}

08008cce <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8008cce:	b580      	push	{r7, lr}
 8008cd0:	b086      	sub	sp, #24
 8008cd2:	af00      	add	r7, sp, #0
 8008cd4:	60f8      	str	r0, [r7, #12]
 8008cd6:	607a      	str	r2, [r7, #4]
 8008cd8:	603b      	str	r3, [r7, #0]
 8008cda:	460b      	mov	r3, r1
 8008cdc:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008cde:	2300      	movs	r3, #0
 8008ce0:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008ce2:	2300      	movs	r3, #0
 8008ce4:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8008ce6:	68fb      	ldr	r3, [r7, #12]
 8008ce8:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8008cec:	7af9      	ldrb	r1, [r7, #11]
 8008cee:	683b      	ldr	r3, [r7, #0]
 8008cf0:	687a      	ldr	r2, [r7, #4]
 8008cf2:	f7f9 ff67 	bl	8002bc4 <HAL_PCD_EP_Transmit>
 8008cf6:	4603      	mov	r3, r0
 8008cf8:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008cfa:	7dfb      	ldrb	r3, [r7, #23]
 8008cfc:	4618      	mov	r0, r3
 8008cfe:	f000 f853 	bl	8008da8 <USBD_Get_USB_Status>
 8008d02:	4603      	mov	r3, r0
 8008d04:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008d06:	7dbb      	ldrb	r3, [r7, #22]
}
 8008d08:	4618      	mov	r0, r3
 8008d0a:	3718      	adds	r7, #24
 8008d0c:	46bd      	mov	sp, r7
 8008d0e:	bd80      	pop	{r7, pc}

08008d10 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8008d10:	b580      	push	{r7, lr}
 8008d12:	b086      	sub	sp, #24
 8008d14:	af00      	add	r7, sp, #0
 8008d16:	60f8      	str	r0, [r7, #12]
 8008d18:	607a      	str	r2, [r7, #4]
 8008d1a:	603b      	str	r3, [r7, #0]
 8008d1c:	460b      	mov	r3, r1
 8008d1e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008d20:	2300      	movs	r3, #0
 8008d22:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008d24:	2300      	movs	r3, #0
 8008d26:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8008d28:	68fb      	ldr	r3, [r7, #12]
 8008d2a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8008d2e:	7af9      	ldrb	r1, [r7, #11]
 8008d30:	683b      	ldr	r3, [r7, #0]
 8008d32:	687a      	ldr	r2, [r7, #4]
 8008d34:	f7f9 fee3 	bl	8002afe <HAL_PCD_EP_Receive>
 8008d38:	4603      	mov	r3, r0
 8008d3a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008d3c:	7dfb      	ldrb	r3, [r7, #23]
 8008d3e:	4618      	mov	r0, r3
 8008d40:	f000 f832 	bl	8008da8 <USBD_Get_USB_Status>
 8008d44:	4603      	mov	r3, r0
 8008d46:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008d48:	7dbb      	ldrb	r3, [r7, #22]
}
 8008d4a:	4618      	mov	r0, r3
 8008d4c:	3718      	adds	r7, #24
 8008d4e:	46bd      	mov	sp, r7
 8008d50:	bd80      	pop	{r7, pc}

08008d52 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008d52:	b580      	push	{r7, lr}
 8008d54:	b082      	sub	sp, #8
 8008d56:	af00      	add	r7, sp, #0
 8008d58:	6078      	str	r0, [r7, #4]
 8008d5a:	460b      	mov	r3, r1
 8008d5c:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008d64:	78fa      	ldrb	r2, [r7, #3]
 8008d66:	4611      	mov	r1, r2
 8008d68:	4618      	mov	r0, r3
 8008d6a:	f7f9 ff13 	bl	8002b94 <HAL_PCD_EP_GetRxCount>
 8008d6e:	4603      	mov	r3, r0
}
 8008d70:	4618      	mov	r0, r3
 8008d72:	3708      	adds	r7, #8
 8008d74:	46bd      	mov	sp, r7
 8008d76:	bd80      	pop	{r7, pc}

08008d78 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8008d78:	b480      	push	{r7}
 8008d7a:	b083      	sub	sp, #12
 8008d7c:	af00      	add	r7, sp, #0
 8008d7e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8008d80:	4b03      	ldr	r3, [pc, #12]	; (8008d90 <USBD_static_malloc+0x18>)
}
 8008d82:	4618      	mov	r0, r3
 8008d84:	370c      	adds	r7, #12
 8008d86:	46bd      	mov	sp, r7
 8008d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d8c:	4770      	bx	lr
 8008d8e:	bf00      	nop
 8008d90:	24001bb0 	.word	0x24001bb0

08008d94 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8008d94:	b480      	push	{r7}
 8008d96:	b083      	sub	sp, #12
 8008d98:	af00      	add	r7, sp, #0
 8008d9a:	6078      	str	r0, [r7, #4]

}
 8008d9c:	bf00      	nop
 8008d9e:	370c      	adds	r7, #12
 8008da0:	46bd      	mov	sp, r7
 8008da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008da6:	4770      	bx	lr

08008da8 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8008da8:	b480      	push	{r7}
 8008daa:	b085      	sub	sp, #20
 8008dac:	af00      	add	r7, sp, #0
 8008dae:	4603      	mov	r3, r0
 8008db0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008db2:	2300      	movs	r3, #0
 8008db4:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8008db6:	79fb      	ldrb	r3, [r7, #7]
 8008db8:	2b03      	cmp	r3, #3
 8008dba:	d817      	bhi.n	8008dec <USBD_Get_USB_Status+0x44>
 8008dbc:	a201      	add	r2, pc, #4	; (adr r2, 8008dc4 <USBD_Get_USB_Status+0x1c>)
 8008dbe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008dc2:	bf00      	nop
 8008dc4:	08008dd5 	.word	0x08008dd5
 8008dc8:	08008ddb 	.word	0x08008ddb
 8008dcc:	08008de1 	.word	0x08008de1
 8008dd0:	08008de7 	.word	0x08008de7
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8008dd4:	2300      	movs	r3, #0
 8008dd6:	73fb      	strb	r3, [r7, #15]
    break;
 8008dd8:	e00b      	b.n	8008df2 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008dda:	2303      	movs	r3, #3
 8008ddc:	73fb      	strb	r3, [r7, #15]
    break;
 8008dde:	e008      	b.n	8008df2 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008de0:	2301      	movs	r3, #1
 8008de2:	73fb      	strb	r3, [r7, #15]
    break;
 8008de4:	e005      	b.n	8008df2 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8008de6:	2303      	movs	r3, #3
 8008de8:	73fb      	strb	r3, [r7, #15]
    break;
 8008dea:	e002      	b.n	8008df2 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8008dec:	2303      	movs	r3, #3
 8008dee:	73fb      	strb	r3, [r7, #15]
    break;
 8008df0:	bf00      	nop
  }
  return usb_status;
 8008df2:	7bfb      	ldrb	r3, [r7, #15]
}
 8008df4:	4618      	mov	r0, r3
 8008df6:	3714      	adds	r7, #20
 8008df8:	46bd      	mov	sp, r7
 8008dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dfe:	4770      	bx	lr

08008e00 <__libc_init_array>:
 8008e00:	b570      	push	{r4, r5, r6, lr}
 8008e02:	4d0d      	ldr	r5, [pc, #52]	; (8008e38 <__libc_init_array+0x38>)
 8008e04:	4c0d      	ldr	r4, [pc, #52]	; (8008e3c <__libc_init_array+0x3c>)
 8008e06:	1b64      	subs	r4, r4, r5
 8008e08:	10a4      	asrs	r4, r4, #2
 8008e0a:	2600      	movs	r6, #0
 8008e0c:	42a6      	cmp	r6, r4
 8008e0e:	d109      	bne.n	8008e24 <__libc_init_array+0x24>
 8008e10:	4d0b      	ldr	r5, [pc, #44]	; (8008e40 <__libc_init_array+0x40>)
 8008e12:	4c0c      	ldr	r4, [pc, #48]	; (8008e44 <__libc_init_array+0x44>)
 8008e14:	f000 f82e 	bl	8008e74 <_init>
 8008e18:	1b64      	subs	r4, r4, r5
 8008e1a:	10a4      	asrs	r4, r4, #2
 8008e1c:	2600      	movs	r6, #0
 8008e1e:	42a6      	cmp	r6, r4
 8008e20:	d105      	bne.n	8008e2e <__libc_init_array+0x2e>
 8008e22:	bd70      	pop	{r4, r5, r6, pc}
 8008e24:	f855 3b04 	ldr.w	r3, [r5], #4
 8008e28:	4798      	blx	r3
 8008e2a:	3601      	adds	r6, #1
 8008e2c:	e7ee      	b.n	8008e0c <__libc_init_array+0xc>
 8008e2e:	f855 3b04 	ldr.w	r3, [r5], #4
 8008e32:	4798      	blx	r3
 8008e34:	3601      	adds	r6, #1
 8008e36:	e7f2      	b.n	8008e1e <__libc_init_array+0x1e>
 8008e38:	08008f4c 	.word	0x08008f4c
 8008e3c:	08008f4c 	.word	0x08008f4c
 8008e40:	08008f4c 	.word	0x08008f4c
 8008e44:	08008f50 	.word	0x08008f50

08008e48 <memcpy>:
 8008e48:	440a      	add	r2, r1
 8008e4a:	4291      	cmp	r1, r2
 8008e4c:	f100 33ff 	add.w	r3, r0, #4294967295
 8008e50:	d100      	bne.n	8008e54 <memcpy+0xc>
 8008e52:	4770      	bx	lr
 8008e54:	b510      	push	{r4, lr}
 8008e56:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008e5a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008e5e:	4291      	cmp	r1, r2
 8008e60:	d1f9      	bne.n	8008e56 <memcpy+0xe>
 8008e62:	bd10      	pop	{r4, pc}

08008e64 <memset>:
 8008e64:	4402      	add	r2, r0
 8008e66:	4603      	mov	r3, r0
 8008e68:	4293      	cmp	r3, r2
 8008e6a:	d100      	bne.n	8008e6e <memset+0xa>
 8008e6c:	4770      	bx	lr
 8008e6e:	f803 1b01 	strb.w	r1, [r3], #1
 8008e72:	e7f9      	b.n	8008e68 <memset+0x4>

08008e74 <_init>:
 8008e74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008e76:	bf00      	nop
 8008e78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008e7a:	bc08      	pop	{r3}
 8008e7c:	469e      	mov	lr, r3
 8008e7e:	4770      	bx	lr

08008e80 <_fini>:
 8008e80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008e82:	bf00      	nop
 8008e84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008e86:	bc08      	pop	{r3}
 8008e88:	469e      	mov	lr, r3
 8008e8a:	4770      	bx	lr
